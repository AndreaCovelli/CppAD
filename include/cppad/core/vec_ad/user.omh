/* --------------------------------------------------------------------------
CppAD: C++ Algorithmic Differentiation: Copyright (C) 2003-19 Bradley M. Bell

CppAD is distributed under the terms of the
             Eclipse Public License Version 2.0.

This Source Code may also be made available under the following
Secondary License when the conditions for such availability set forth
in the Eclipse Public License, Version 2.0 are satisfied:
      GNU General Public License, Version 2.0 or later.
---------------------------------------------------------------------------- */
/*
$begin VecAD$$
$spell
    cppad.hpp
    CondExpGt
    grep
    Ld
    vp
    Lu
    wc
    op
    Ldp
    Ldv
    Taylor
    VecAD
    const
    Cpp
    ind
$$


$section AD Vectors that Record Index Operations$$


$head Syntax$$
$codei%VecAD<%Base%> %vec%(%n%)%$$
$pre
$$
$icode%vec%.size()%$$
$pre
$$
$icode%b% = %vec%[%i%]%$$
$pre
$$
$icode%ref% = %vec%[%ind%]%$$

$head Purpose$$
If either $icode vec$$ or $icode ind$$ is a
$cref/variable/glossary/Variable/$$,
the indexing operation
$codei%
    %ref% = %vec%[%ind%]
%$$
is recorded in the corresponding
AD of $icode Base$$
$cref/operation sequence/glossary/Operation/Sequence/$$ and
transferred to the corresponding $cref ADFun$$ object $icode f$$.
Such an index can change each time
zero order $cref/f.Forward/Forward/$$ is used; i.e.,
$icode f$$ is evaluated with new value for the
$cref/independent variables/glossary/Tape/Independent Variable/$$.
Note that the value of $icode ref$$ depends on the value of $icode ind$$
in a discrete fashion and CppAD computes its partial derivative with
respect to $icode ind$$ as zero.

$head Alternatives$$
If only the values in the vector,
and not the indices,
depend on the independent variables,
the class $icode%Vector%< AD<%Base%> >%$$ is much more efficient for
storing AD values where $icode Vector$$ is any
$cref SimpleVector$$ template class,
If only the indices,
and not the values in the vector,
depend on the independent variables,
The $cref Discrete$$ functions are a much more efficient
way to represent these vectors.

$head VecAD<Base>::reference$$
The result $icode ref$$ has type
$codei%
    VecAD<%Base%>::reference
%$$
which is very much like the $codei%AD<%Base%>%$$ type
with some notable exceptions:

$subhead Exceptions$$
$list number$$
The object $icode ref$$ cannot be used with the
$cref Value$$ function to compute the corresponding $icode Base$$ value.
If $icode vec$$ and $icode i$$ are not $cref/variables/glossary/Variable/$$
$codei%
    %b% = v[%i%]
%$$
can be used to compute the corresponding $icode Base$$ value.

$lnext
The object $icode ref$$ cannot be used
with the $cref/compound assignments operators/Arithmetic/$$
$code +=$$,
$code -=$$,
$code *=$$, or
$code /=$$.
For example, the following syntax is not valid:
$codei%
    %vec%[%ind%] += %z%;
%$$
no matter what the types of $icode z$$.

$lnext
Assignment to $icode ref$$ returns a $code void$$.
For example, the following syntax is not valid:
$codei%
    %z% = %vec%[%ind%] = %u%;
%$$
no matter what the types of $icode z$$, and $icode u$$.

$lnext
The $cref CondExp$$ functions do not accept
$codei%VecAD<%Base%>::reference%$$ arguments.
For example, the following syntax is not valid:
$codei%
    CondExpGt(%vec%[%ind%], %z%, %u%, %vec%)
%$$
no matter what the types of $icode z$$, $icode u$$, and $icode vec$$.

$lnext
The $cref/Parameter/con_dyn_var/Parameter/$$
and $cref/Variable/con_dyn_var/Variable/$$ functions cannot be used with
$codei%VecAD<%Base%>::reference%$$ arguments like $icode ref$$,
use the entire $codei%VecAD<%Base%>%$$ vector instead; i.e. $icode vec$$.

$lnext
The vectors passed to $cref Independent$$ can not have elements
of type $codei%AD<%Base%>%$$; i.e., $cref VecAD$$ vectors
cannot be passed to $code Independent$$.

$lnext
If one uses this type in a
AD of $icode Base$$
$cref/operation sequence/glossary/Operation/Sequence/$$,
$cref/sparsity pattern/glossary/Sparsity Pattern/$$ calculations
($cref sparsity_pattern$$)
are less efficient because the dependence of different
elements of the vector cannot be separated.

$lend

$head Constructor$$

$subhead vec$$
The syntax
$codei%
    VecAD<%Base%> %vec%(%n%)
%$$
creates an $code VecAD$$ object $icode vec$$ with
$icode n$$ elements.
The initial value of the elements of $icode vec$$ is unspecified.

$subhead n$$
The argument $icode n$$ has prototype
$codei%
    size_t %n%
%$$

$head size$$
The syntax
$codei%
    %vec%.size()
%$$
returns the number of elements in the vector $icode vec$$;
i.e., the value of $icode n$$ when it was constructed.

$head size_t Indexing$$
We refer to the syntax
$codei%
    %b% = %vec%[%i%]
%$$
as $code size_t$$ indexing of a $code VecAD$$ object.
This indexing is only valid if the vector $icode vec$$ is a
$cref/parameter/con_dyn_var/Parameter/$$; i.e.,
it does not depend on the independent variables.

$subhead i$$
The operand $icode i$$ has prototype
$codei%
    size_t %i%
%$$
It must be greater than or equal zero
and less than $icode n$$; i.e., less than
the number of elements in $icode vec$$.

$subhead b$$
The result $icode b$$ has prototype
$codei%
    %Base%& %b%
%$$
and is a reference to the $th i$$ element in the vector $icode vec$$.
It can be used to change the element value;
for example,
$codei%
    %vec%[%i%] = %c%
%$$
is valid where $icode c$$ is a $icode Base$$ object.
The reference $icode b$$ is no longer valid once the
destructor for $icode vec$$ is called; for example,
when $icode vec$$ falls out of scope.

$head AD Indexing$$
We refer to the syntax
$codei%
    %ref% = %vec%[%ind%]
%$$
as AD indexing of a $code VecAD$$ object.

$subhead ind$$
The argument $icode ind$$ has prototype
$codei%
    const AD<%Base%> &%ind%
%$$
The value of $icode ind$$ must be greater than or equal zero
and less than $icode n$$; i.e., less than
the number of elements in $icode vec$$.

$subhead ref$$
The result $icode ref$$ has prototype
$codei%
    VecAD<%Base%>::reference %ref%
%$$
The object $icode ref$$ has an AD type and its
operations are recorded as part of the same
AD of $icode Base$$
$cref/operation sequence/glossary/Operation/Sequence/$$ as
for $codei%AD<%Base%>%$$ objects.
It acts as a reference to the
element with index $latex {\rm floor} (x)$$ in the vector $icode vec$$
($latex {\rm floor} (x)$$ is
the greatest integer less than or equal $icode ind$$).
Because it is a reference, it can be used to change the element value;
for example,
$codei%
    %vec%[%ind%] = %z%
%$$
is valid where $icode z$$ is an
$codei%VecAD<%Base%>::reference%$$ object.
As a reference, $icode ref$$ is no longer valid once the
destructor for $icode vec$$ is called; for example,
when $icode vec$$ falls out of scope.

$head Dynamic Parameters$$
The index $icode ind$$,
and the value $icode z$$ assigned to
$icode%vec%[%ind%]%$$ or $icode%vec%[%i%]%$$,
cannot be $cref/dynamic parameters/glossary/Parameter/Dynamic/$$.

$head Example$$
$children%
    example/general/vec_ad.cpp
%$$
The file
$cref vec_ad.cpp$$
contains an example and test using $code VecAD$$ vectors.


$head Speed and Memory$$
The $cref VecAD$$ vector type is inefficient because every
time an element of a vector is accessed, a new CppAD
$cref/variable/glossary/Variable/$$ is created on the tape
using either the $code Ldp$$ or $code Ldv$$ operation
(unless all of the elements of the vector are
$cref/parameters/glossary/Parameter/$$).
The effect of this can be seen by executing the following steps:

$list number$$
In the file $code cppad/local/forward1sweep.h$$,
change the definition of $code CPPAD_FORWARD1SWEEP_TRACE$$ to
$codep
    # define CPPAD_FORWARD1SWEEP_TRACE 1
$$
$lnext
In the $code Example$$ directory, execute the command
$codep
    ./test_one.sh lu_vec_ad_ok.cpp lu_vec_ad.cpp -DNDEBUG > lu_vec_ad_ok.log
$$
This will write a trace of all the forward tape operations,
for the test case $cref lu_vec_ad_ok.cpp$$,
to the file $code lu_vec_ad_ok.log$$.
$lnext
In the $code Example$$ directory execute the commands
$codep
    grep "op="           lu_vec_ad_ok.log | wc -l
    grep "op=Ld[vp]"     lu_vec_ad_ok.log | wc -l
    grep "op=St[vp][vp]" lu_vec_ad_ok.log | wc -l
$$
The first command counts the number of operators in the tracing,
the second counts the number of VecAD load operations,
and the third counts the number of VecAD store operations.
(For CppAD version 05-11-20 these counts were 956, 348, and 118
respectively.)
$lend

$end
------------------------------------------------------------------------
*/
