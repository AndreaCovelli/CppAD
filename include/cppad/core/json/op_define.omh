/* --------------------------------------------------------------------------
CppAD: C++ Algorithmic Differentiation: Copyright (C) 2003-19 Bradley M. Bell

  CppAD is distributed under the terms of the
               Eclipse Public License Version 2.0.

  This Source Code may also be made available under the following
  Secondary License when the conditions for such availability set forth
  in the Eclipse Public License, Version 2.0 are satisfied:
        GNU General Public License, Version 2.0 or later.
-------------------------------------------------------------------------- */
$begin json_op_define$$
$spell
    cexp_rel
    eq
    lt
    le
    Cond
    Gt
    log1p
    expm1
    erfc
    erf
    atanh
    asinh
    acosh
    acos
    asin
    atan
    cos
    exp
    sqrt
    tanh
    Json
    arg
    op
    mul
    div
    chkpoint
    CppAD
$$

$section Json Operator Definitions$$

$head Notation$$

$subhead op_code$$
Each operator definition has a $icode op_code$$ value that
is used to identify it for a particular $icode json_ad_graph$$.

$subhead Arguments$$
The values $icode first_arg$$, ... ,
$cref/last_arg/json_ad_graph/op_usage/first_arg, ..., last_arg/$$
are the node indices for arguments to an operator.

$head Unary Operators$$
All these operations create one result node and
have the following Json definition:
$codei%
{
    "op_code":      %op_code%,
    "name":         %name%,
    "n_arg":        1
}
%$$
where $icode name$$ is a $cref/string/json_ad_graph/Token/String/$$.
A corresponding $icode op_usage$$ has the form
$codei%
    [ %op_code%, %arg% ]
%$$
The possible values for the string $icode name$$ are listed below.

$subhead abs$$
The result is the absolute value of the argument.

$subhead acos$$
The result is the inverse cosine of the argument.

$subhead asin$$
The result is the inverse sine of the argument.

$subhead atan$$
The result is the inverse tangent of the argument.

$subhead cosh$$
The result is the cosine of the argument.

$subhead cos$$
The result is the cosine of the argument.

$subhead exp$$
The result is the exponential of the argument; see
the example and test $cref json_exp_op.cpp$$.

$subhead log$$
The result is the logarithm of the argument; see
the example and test $cref json_log_op.cpp$$.

$subhead sign$$
The result is the sign function of the argument; see
the example and test $cref json_sign_op.cpp$$.

$subhead sinh$$
The result is the hyperbolic sine of the argument; see
the example and test $cref json_sinh_op.cpp$$.

$subhead sin$$
The result is the sine of the argument; see
the example and test $cref json_sin_op.cpp$$.

$subhead sqrt$$
The result is the square root of the argument; see
the example and test $cref json_sqrt_op.cpp$$.

$subhead tanh$$
The result is the hyperbolic tangent of the argument; see
the example and test $cref json_tanh_op.cpp$$.

$subhead tan$$
The result is the tangent of the argument; see
the example and test $cref json_tan_op.cpp$$.

$subhead C++11$$
The unary operators below this point (e.g. $code asinh$$)
require C++11 or higher to work with CppAD.

$subhead asinh$$
The result is the inverse hyperbolic sine of the argument.

$subhead atanh$$
The result is the inverse hyperbolic sine of the argument.

$subhead erf$$
The result is the error functions of the argument; see
the example and test $cref json_erf_op.cpp$$.

$subhead erfc$$
The result is the complementary error function of the argument; see
the example and test $cref json_erfc_op.cpp$$.

$subhead expm1$$
The result is the minus one plus the exponential of the argument; see
The file $cref json_expm1_op.cpp$$ is an example and test of this operation.

$subhead log1p$$
The result is the log of the argument plus one.
The file $cref json_log1p_op.cpp$$ is an example and test of this operation.

$subhead acosh$$
The result is the inverse hyperbolic cosine of the argument.

$head Binary Operators$$
All these operations create one result node and
have the following Json definition:
$codei%
{
    "op_code":      %op_code%,
    "name":         %name%,
    "n_arg":        2
}
%$$
where $icode name$$ is a $cref/string/json_ad_graph/Token/String/$$.
A corresponding $icode op_usage$$ has the form
$codei%
    [ %op_code%, %first_arg%, %second_arg% ]
%$$
The possible values for the string $icode name$$ are listed below:

$subhead add$$
The result is
the first argument value plus the second argument value.
the example and test $cref json_add_op.cpp$$.

$subhead div$$
The result is
the first argument value divided by the second argument value.
the example and test $cref json_div_op.cpp$$.

$subhead mul$$
The result is
the first argument value times the second argument value.
the example and test $cref json_mul_op.cpp$$.

$subhead sub$$
The result is
the first argument value minus the second argument value.
the example and test $cref json_sub_op.cpp$$.

$head atom$$
This operator has the following Json definition:
$codei%
{
    "op_code":      %op_code%,
    "name":          "atom"
}
%$$
A corresponding $icode op_usage$$ has the form
$codei%
    [ %op_code%, %name%, %n_result%, %n_arg%,
        [ %first_arg%, %...%, %last_arg% ]
    ]
%$$
This operator creates $icode n_result$$ nodes with values equal to
an evaluation of the $code atomic_three$$ function specified by
$cref/name/atomic_three_ctor/atomic_three/name/$$.
The number of arguments (results) must equal the domain (range)
dimension for the atomic function.
The values corresponding to the indices
$icode first_arg$$, ..., $icode last_arg$$ specify the
value for the independent variables during checkpoint function evaluation.
In the case where the atomic function is a $code chkpoint_two$$ function,
the independent dynamic parameters are specified by calling its
$cref/new_dynamic/chkpoint_two/Syntax/new_dynamic/$$ routine.

$subhead Example$$
the example and test $cref json_atom_op.cpp$$.

$subhead call_name$$
This is a $cref/string/json_ad_graph/Token/$$ containing the
$cref/function_name/json_ad_graph/AD Graph/function_name/$$
for the function being called.

$subhead n_result$$
The must be equal to
$cref/n_dependent/json_ad_graph/dependent_vec/n_dependent/$$
for the function specified by $icode call_name$$.

$subhead n_arg$$
The must be equal to
$cref/n_independent/json_ad_graph/independent_vec/n_independent/$$
for the function specified by $icode call_name$$.

$subhead first_arg, ..., last_arg$$
These are the node indices that specify the value of the
independent variable vector in the call to $icode call_name$$.

$head sum$$
This operator has the following Json definition:
$codei%
{
    "op_code":      %op_code%,
    "name":         "sum"
}
%$$
A corresponding $icode op_usage$$ has the form
$codei%
    [ %op_code%, %n_result%, %n_arg%, [ %first_arg%, %...%, %last_arg% ] ]
%$$
where $icode n_result$$ is always $code 1$$.
This operation creates one node with value equal to
the sum of values corresponding to all of its argument nodes.

$subhead Example$$
the example and test $cref json_sum_op.cpp$$.

$head Conditional Expressions$$
These operators are $cref/conditional expressions/CondExp/$$
and have the following Json definition:
$codei%
{
    "op_code":      %op_code%,
    "name":         "cexp_%rel%,
    "n_arg":        4
}
%$$
where $icode rel$$ is $code eq$$ (equal), $code le$$, or $code lt$$.
The first argument is $cref/left/CondExp/left/$$,
the second is $cref/right/CondExp/right/$$,
the third is $cref/if_true/CondExp/if_true/$$,
the fourth is $cref/if_false/CondExp/if_false/$$.
The result for this operator is given by
$codei%
    if( %left% %cop% %right%)
        %result% = %if_true%;
    else
        %result% = %if_false%;
%$$
where the comparison $icode cop$$ is define by the cases below:

$subhead cexp_eq$$
$icode cop$$ is $code ==$$

$subhead cexp_le$$
$icode cop$$ is $code <=$$

$subhead cexp_lt$$
$icode cop$$ is $code <$$


$subhead Other Comparisons$$
Note that
$codei%
    CondExpGt(%left%, %right%, %if_true%, %if_false%)
%$$
is equivalent to
$codei%
    CondExpLe(%left%, %right%, %if_false%, %if_true%)
%$$
Similar conversions can be used for all the possible
$cref/conditional expressions/CondExp/$$.


$subhead Example$$
the example and test $cref json_cexp_op.cpp$$.

$children%
    example/json/exp_op.cpp%
    example/json/log_op.cpp%
    example/json/sign_op.cpp%
    example/json/sinh_op.cpp%
    example/json/sin_op.cpp%
    example/json/sqrt_op.cpp%
    example/json/tanh_op.cpp%
    example/json/tan_op.cpp%
    example/json/acosh_op.cpp%
    example/json/asinh_op.cpp%
    example/json/atanh_op.cpp%
    example/json/erf_op.cpp%
    example/json/erfc_op.cpp%
    example/json/expm1_op.cpp%
    example/json/log1p_op.cpp%
    example/json/add_op.cpp%
    example/json/atom_op.cpp%
    example/json/div_op.cpp%
    example/json/mul_op.cpp%
    example/json/sub_op.cpp%
    example/json/sum_op.cpp%
    example/json/cexp_op.cpp
%$$

$end
