/* --------------------------------------------------------------------------
CppAD: C++ Algorithmic Differentiation: Copyright (C) 2003-19 Bradley M. Bell

  CppAD is distributed under the terms of the
               Eclipse Public License Version 2.0.

  This Source Code may also be made available under the following
  Secondary License when the conditions for such availability set forth
  in the Eclipse Public License, Version 2.0 are satisfied:
        GNU General Public License, Version 2.0 or later.
-------------------------------------------------------------------------- */
$begin json_op_define$$
$spell
    Json
    arg
    op
    mul
    div
$$

$section Json Operator Definitions$$

$head Notation$$

$subhead op_code$$
Each operator definition has a $icode op_code$$ value that
is used to identify it for a particular $icode json_ad_graph$$.

$subhead Arguments$$
The values
$cref/
    first_arg, ..., last_arg/
    json_ad_graph/
    op_usage/
    first_arg, ..., last_arg
/$$
are the node indices for arguments to an operator.
Unless otherwise specified,
arguments are not string; i.e.,
the corresponding nodes are not in $cref/strings/json_ad_graph/string_vec/$$.

$head add$$
This operator has the following Json definition:
$codei%
{
    "op_code":      %op_code%,
    "name":         "add",
    "n_arg":        2
}
%$$
A corresponding $icode op_usage$$ has the form
$codei%
    [ %op_code%, %first_arg%, %second_arg% ]
%$$
This operation creates one node with value equal to
the first argument value plus the second argument value.

$subhead Example$$
The file $cref json_add_op.cpp$$ is an example and test of this operation.

$head div$$
This operator has the following Json definition:
$codei%
{
    "op_code":      %op_code%,
    "name":         "div",
    "n_arg":        2
}
%$$
A corresponding $icode op_usage$$ has the form
$codei%
    [ %op_code%, %first_arg%, %second_arg%  ]
%$$
This operation creates one node with value equal to
the first argument value divided by the second argument value.

$subhead Example$$
The file $cref json_div_op.cpp$$ is an example and test of this operation.

$head mul$$
This operator has the following Json definition:
$codei%
{
    "op_code":      %op_code%,
    "name":         "mul",
    "n_arg":        2
}
%$$
A corresponding $icode op_usage$$ has the form
$codei%
    [ %op_code%, %first_arg%, %second_arg%  ]
%$$
This operation creates one node with value equal to
the first argument value times the second argument value.

$subhead Example$$
The file $cref json_mul_op.cpp$$ is an example and test of this operation.

$head sub$$
This operator has the following Json definition:
$codei%
{
    "op_code":      %op_code%,
    "name":         "sub",
    "n_arg":        2
}
%$$
A corresponding $icode op_usage$$ has the form
$codei%
    [ %op_code%, %first_arg%, %second_arg% ]
%$$
This operation creates one node with value equal to
the first argument value minus the second argument value.

$subhead Example$$
The file $cref json_sub_op.cpp$$ is an example and test of this operation.

$head sum$$
This operator has the following Json definition:
$codei%
{
    "op_code":      %op_code%,
    "name":         "sum"
}
%$$
A corresponding $icode op_usage$$ has the form
$codei%
    [ %op_code%, %n_result%, %n_arg%, [ %first_arg%, %...%, %last_arg% ] ]
%$$
where $icode n_result$$ is always $code 1$$.
This operation creates one node with value equal to
the sum of values corresponding to all of its argument nodes.

$subhead Example$$
The file $cref json_sum_op.cpp$$ is an example and test of this operation.

$childtable%
    example/json/add_op.cpp%
    example/json/div_op.cpp%
    example/json/mul_op.cpp%
    example/json/sub_op.cpp%
    example/json/sum_op.cpp
%$$

$end
