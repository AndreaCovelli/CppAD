/* --------------------------------------------------------------------------
CppAD: C++ Algorithmic Differentiation: Copyright (C) 2003-19 Bradley M. Bell

  CppAD is distributed under the terms of the
               Eclipse Public License Version 2.0.

  This Source Code may also be made available under the following
  Secondary License when the conditions for such availability set forth
  in the Eclipse Public License, Version 2.0 are satisfied:
        GNU General Public License, Version 2.0 or later.
-------------------------------------------------------------------------- */
$begin json_op_define$$
$spell
    erfc
    erf
    atanh
    asinh
    acosh
    acos
    asin
    atan
    cos
    exp
    sqrt
    tanh
    Json
    arg
    op
    mul
    div
    chkpoint
    CppAD
$$

$section Json Operator Definitions$$

$head Notation$$

$subhead op_code$$
Each operator definition has a $icode op_code$$ value that
is used to identify it for a particular $icode json_ad_graph$$.

$subhead Arguments$$
The values
$cref/
    first_arg, ..., last_arg/
    json_ad_graph/
    op_usage/
    first_arg, ..., last_arg
/$$
are the node indices for arguments to an operator.
Unless otherwise specified,
arguments are not string; i.e.,
the corresponding nodes are not in $cref/strings/json_ad_graph/string_vec/$$.

$head Unary Operators$$
All these operations create one result node and
have the following Json definition:
$codei%
{
    "op_code":      %op_code%,
    "name":         %name%,
    "n_arg":        1
}
%$$
where $icode name$$ is a $cref/string/json_ad_graph/Token/String/$$.
A corresponding $icode op_usage$$ has the form
$codei%
    [ %op_code%, %arg% ]
%$$
The possible values for the string $icode name$$ are listed below.

$subhead C++11$$
The following unary operators require C++11 or higher to work with CppAD:
$code acosh$$,  $code asinh$$, $code atanh$$, $code erf$$, $code erfc$$.

$subhead abs$$
The result node value is the absolute value of the argument.
The file $cref json_abs_op.cpp$$ is an example and test of this operation.

$subhead asinh$$
The result node value is the inverse hyperbolic sine of the argument.
The file $cref json_asinh_op.cpp$$ is an example and test of this operation.

$subhead atanh$$
The result node value is the inverse hyperbolic sine of the argument.
The file $cref json_atanh_op.cpp$$ is an example and test of this operation.

$subhead erf$$
The result node value is the inverse hyperbolic sine of the argument.
The file $cref json_erf_op.cpp$$ is an example and test of this operation.error function

$subhead erfc$$
The result node value is the inverse hyperbolic sine of the argument.
The file $cref json_erfc_op.cpp$$ is an example and test of this operation.error functioncomplementary error function

$subhead acosh$$
The result node value is the inverse hyperbolic cosine of the argument.
The file $cref json_acosh_op.cpp$$ is an example and test of this operation.

$subhead acos$$
The result node value is the inverse cosine of the argument.
The file $cref json_acos_op.cpp$$ is an example and test of this operation.

$subhead asin$$
The result node value is the inverse sine of the argument.
The file $cref json_asin_op.cpp$$ is an example and test of this operation.

$subhead atan$$
The result node value is the inverse tangent of the argument.
The file $cref json_atan_op.cpp$$ is an example and test of this operation.

$subhead cosh$$
The result node value is the cosine of the argument.
The file $cref json_cosh_op.cpp$$ is an example and test of this operation.

$subhead cos$$
The result node value is the cosine of the argument.
The file $cref json_cos_op.cpp$$ is an example and test of this operation.

$subhead exp$$
The result node value is the exponential of the argument.
The file $cref json_exp_op.cpp$$ is an example and test of this operation.

$subhead log$$
The result node value is the logarithm of the argument.
The file $cref json_log_op.cpp$$ is an example and test of this operation.

$subhead sign$$
The result node value is the sign function of the argument.
The file $cref json_sign_op.cpp$$ is an example and test of this operation.

$subhead sinh$$
The result node value is the hyperbolic sine of the argument.
The file $cref json_sinh_op.cpp$$ is an example and test of this operation.

$subhead sin$$
The result node value is the sine of the argument.
The file $cref json_sin_op.cpp$$ is an example and test of this operation.

$subhead sqrt$$
The result node value is the square root of the argument.
The file $cref json_sqrt_op.cpp$$ is an example and test of this operation.

$subhead tanh$$
The result node value is the hyperbolic tangent of the argument.
The file $cref json_tanh_op.cpp$$ is an example and test of this operation.

$subhead tan$$
The result node value is the tangent of the argument.
The file $cref json_tan_op.cpp$$ is an example and test of this operation.

$head Binary Operators$$
All these operations create one result node and
have the following Json definition:
$codei%
{
    "op_code":      %op_code%,
    "name":         %name%,
    "n_arg":        2
}
%$$
where $icode name$$ is a $cref/string/json_ad_graph/Token/String/$$.
A corresponding $icode op_usage$$ has the form
$codei%
    [ %op_code%, %first_arg%, %second_arg% ]
%$$
The possible values for the string $icode name$$ are listed below:

$subhead add$$
The result node value is
the first argument value plus the second argument value.
The file $cref json_add_op.cpp$$ is an example and test of this operation.

$subhead div$$
The result node value is
the first argument value divided by the second argument value.
The file $cref json_div_op.cpp$$ is an example and test of this operation.

$subhead mul$$
The result node value is
the first argument value times the second argument value.
The file $cref json_mul_op.cpp$$ is an example and test of this operation.

$subhead sub$$
The result node value is
the first argument value minus the second argument value.
The file $cref json_sub_op.cpp$$ is an example and test of this operation.

$head atom$$
This operator has the following Json definition:
$codei%
{
    "op_code":      %op_code%,
    "name":          "atom"
}
%$$
A corresponding $icode op_usage$$ has the form
$codei%
    [ %op_code%, %name%, %n_result%, %n_arg%,
        [ %first_arg%, %...%, %last_arg% ]
    ]
%$$
This operator creates $icode n_result$$ nodes with values equal to
an evaluation of the $code atomic_three$$ function specified by
$cref/name/atomic_three_ctor/atomic_three/name/$$.
The number of arguments (results) must equal the domain (range)
dimension for the atomic function.
The values corresponding to the indices
$icode first_arg$$, ..., $icode last_arg$$ specify the
value for the independent variables during checkpoint function evaluation.
In the case where the atomic function is a $code chkpoint_two$$ function,
the independent dynamic parameters are specified by calling its
$cref/new_dynamic/chkpoint_two/Syntax/new_dynamic/$$ routine.

$subhead Example$$
The file $cref json_atom_op.cpp$$ is an example and test of this operation.

$subhead call_name$$
This is a $cref/string/json_ad_graph/Token/$$ containing the
$cref/function_name/json_ad_graph/AD Graph/function_name/$$
for the function being called.

$subhead n_result$$
The must be equal to
$cref/n_dependent/json_ad_graph/dependent_vec/n_dependent/$$
for the function specified by $icode call_name$$.

$subhead n_arg$$
The must be equal to
$cref/n_independent/json_ad_graph/independent_vec/n_independent/$$
for the function specified by $icode call_name$$.

$subhead first_arg, ..., last_arg$$
These are the node indices that specify the value of the
independent variable vector in the call to $icode call_name$$.

$head sum$$
This operator has the following Json definition:
$codei%
{
    "op_code":      %op_code%,
    "name":         "sum"
}
%$$
A corresponding $icode op_usage$$ has the form
$codei%
    [ %op_code%, %n_result%, %n_arg%, [ %first_arg%, %...%, %last_arg% ] ]
%$$
where $icode n_result$$ is always $code 1$$.
This operation creates one node with value equal to
the sum of values corresponding to all of its argument nodes.

$subhead Example$$
The file $cref json_sum_op.cpp$$ is an example and test of this operation.

$childtable%
    example/json/abs_op.cpp%
    example/json/acos_op.cpp%
    example/json/asin_op.cpp%
    example/json/atan_op.cpp%
    example/json/cosh_op.cpp%
    example/json/cos_op.cpp%
    example/json/exp_op.cpp%
    example/json/log_op.cpp%
    example/json/sign_op.cpp%
    example/json/sinh_op.cpp%
    example/json/sin_op.cpp%
    example/json/sqrt_op.cpp%
    example/json/tanh_op.cpp%
    example/json/tan_op.cpp%
    example/json/acosh_op.cpp%
    example/json/asinh_op.cpp%
    example/json/atanh_op.cpp%
    example/json/erf_op.cpp%
    example/json/erfc_op.cpp%
    example/json/add_op.cpp%
    example/json/atom_op.cpp%
    example/json/div_op.cpp%
    example/json/mul_op.cpp%
    example/json/sub_op.cpp%
    example/json/sum_op.cpp
%$$

$end
