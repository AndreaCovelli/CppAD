/* --------------------------------------------------------------------------
CppAD: C++ Algorithmic Differentiation: Copyright (C) 2003-19 Bradley M. Bell

  CppAD is distributed under the terms of the
               Eclipse Public License Version 2.0.

  This Source Code may also be made available under the following
  Secondary License when the conditions for such availability set forth
  in the Eclipse Public License, Version 2.0 are satisfied:
        GNU General Public License, Version 2.0 or later.
-------------------------------------------------------------------------- */
$begin json_ad_graph$$
$spell
    Json
    vec
    enum_op
    arg
    ind
$$

$section Json Format for A Graph Representing an ADFun object$$

$head Under Construction$$
This section is under construction and subject to change
without backward compatibility

$head Format$$
See
$href%
    /https://en.wikipedia.org/wiki/JSON#Data_types_and_syntax%
    Json data types and syntax
%$$.

$head Token$$

$subhead White Space$$
Any sequence of white space, except within a string,
terminates the current token and is otherwise ignored.

$subhead Non-Negative Integer$$
A non-negative integer is a non-empty sequence of the following
characters: $code 0123456789$$.

$subhead Floating Point Number$$
A floating point number is a non-empty sequence of the following
characters: $code 0123456789+-eE.$$.
Note that there can't be any white space between a leading plus
or minus sign and the rest of the number.

$subhead String$$
A string starts with the double quote character $code "$$
and includes all the characters until the next double quote.
The value of a string is the sequence of characters between the
double quotes.
Currently there is no support using the double quote
as part of the value of a string.

$subhead Single Character$$
The following is a list of the single character tokens:
$table
Token      $cnext Usage                                           $rnext
$code ,$$  $cnext separates entries in a list                     $rnext
$code :$$  $cnext separates name from corresponding value         $rnext
$code {$$  $cnext starts a list of name $code :$$ value pairs     $rnext
$code }$$  $cnext ends a list of name $code:$$ value pairs        $rnext
$code [$$  $cnext starts a list of values                         $rnext
$code ]$$  $cnext ends a list of values
$tend

$head operator$$
The Json format for an $icode operator$$ is
$codei%
[ %code%, %n_result%, %n_arg%, [ %first_arg%, %..%, %last_arg% ], "%name%" ]
%$$


$subhead code$$
Each operator has a corresponding $code operator_enum$$ value defined by
$srcfile%include/cppad/local/json/operator.hpp%
    0%// BEGIN_OPERATOR_ENUM%// END_OPERATOR_ENUM%0
%$$
Note that $code n_operator$$ is the number of operators implemented so far,
not a valid operator value.
The value $icode code$$ above is the non-negative integer corresponding to the
$code operator_enum$$ value.
These values are subject to change and programs that uses these values should
easily adapt to this change;
e.g., it could use the enum type instead of the corresponding integer values.

$subhead n_results$$
This is the number of results for the operator; i.e.,
the dimension of its range space.

$subhead n_arg$$
This is the number of argument values for the operator; i.e.,
the dimension of its domain space.

$subhead Arguments$$
The values $icode first_arg$$, ..., $icode last_arg$$,
are the node indices
corresponding to each of the arguments for this operator.
They specify which previous result (result before this operator in the graph)
correspond to each of the arguments to this operator.

$subhead name$$
Each operator also has a name which is the string corresponding to
its enum symbol up to but not including the $code _operator$$ at the end.
For example $code add$$ is the name for the $code add_operator$$.
The name is used to make the Jason easier for humans to read
and for checking that the enum value $icode code$$ is correct.
(For speed purposes, this check may be suppressed when
$code NDEBUG$$ is defined.)

$head dynamic_ind_vec$$
This is the independent dynamic parameter vector; see
$cref/dynamic/Independent/dynamic/$$..
The function can depend on these parameters,
but no derivatives are computed with respect to these parameters.
We use the non-negative integer $icode n_dynamic_ind$$
for the number of elements in this vector.

$subhead Node Indices$$
We use the notation $icode%start_dynamic% = 1%$$.
The node indices corresponding to the dynamic parameter vector are
$codei%
    %start_dynamic%, %...%, %start_dynamic% + %n_dynamic_ind% - 1
%$$

$head independent_vec$$
This is the independent variable vector.
The function can depend on these variable and
derivatives can be computed  with respect to these variables.
We use the non-negative integer $icode n_independent$$
for the number of element in this vector.

$subhead Node Indices$$
We use the notation
$codei%
    %start_independent% = %start_dynamic% + %n_dynamic_ind%
%$$
The node indices corresponding to the independent variable vector are
$codei%
    %start_independent%, %...%,  %start_independent% + %n_independent% - 1
%$$

$head string_vec$$
This is the string vector which cannot change.
These strings can be used to display information about the function.
The Json format for $icode string_vec$$ is
$codei%
    [ %n_string%, [ %first_string%, %...%, %last_string% ] ]
%$$
where the non-negative integer $icode n_string$$
is the number of elements in this vector.
Each of the elements of this vector
(e.g. $icode first_string$$)
is a $cref/string/json_ad_graph/Token/String/$$.

$subhead Node Indices$$
We use the notation
$codei%
    %start_string% = %start_independent% + %n_independent%
%$$
The node indices corresponding to the string vector are
$codei%
    %start_string%, %...%,  %start_string% + %n_string% - 1
%$$

$head constant_vec$$
This is the constant parameter vector.
These parameters can be used to define the function and cannot change.
The Json format for $icode constant_vec$$ is
$codei%
    [ %n_constant%, [ %first_constant%, %...%, %last_constant% ] ]
%$$
where the non-negative integer $icode n_constant$$
is the number of elements in this vector,
Each of the elements of this vector
(e.g., $icode first_constant$$)
is a $cref/floating point number/json_ad_graph/Token/Floating Point Number/$$.

$subhead Node Indices$$
We use the notation
$codei%
    %start_constant% = %start_string% + %n_string%
%$$
The node indices corresponding to the constant vector are
$codei%
    %start_constant%, %...%,  %start_constant% + %n_constant% - 1
%$$

$head operator_vec$$
The Jason format for an $icode operator_vec$$ is
$codei%
    [ %n_operator%, [ %first_operator%, %...%, %last_operator% ] ]
%$$
where the non-negative integer $icode n_operator$$
is the number of operators in this vector.
Each of the elements of this vector
(e.g. $icode first_operator$$)
is an $cref/operator/json_ad_graph/operator/$$.

$subhead Node Indices$$
For $icode%i% = 1 , %...%, %n_operator%$$, we use
$icode%n_result%[%i%]%$$ to denote the
$icode n_result$$ value corresponding to the $th i$$ operator.
We define
$codei%
    %start_operator%[1] = %start_constant% + %n_constant%
%$$
and for $icode%i% = 2 , %...%, %n_operator%$$,
$codei%
    %start_operator%[%i%] = %start_operator%[%i%-1] + %n_result%[%i%-1]
%$$
For $icode%i% = 1 , %...%, %n_operator%$$,
the nodes corresponding to the $th i$$ operator are
$codei%
    %start_operator%[%i%], %...%, %start_operator%[%i%] + %n_result%[%i%] - 1
%$$

$head dependent_vec$$
This is the vector of dependent variable node indices.
This identifies which nodes in the graph correspond to dependent variables.
The Json format for $icode dependent_vec$$ is
$codei%
    [ %n_dependent%, [ %first_dependent%, %...%, %last_dependent% ] ]
%$$
where the non-negative integer $icode n_dependent$$
is the number of elements in this vector,
Each of the elements of this vector
(e.g., $icode first_dependent$$)
is a $cref/non-negative integer/json_ad_graph/Token/Non-Negative Integer/$$
corresponding to a node index in the graph.

$head AD Graph$$
The Json format for an AD graph is
$codei%
{
    "n_dynamic_ind": %n_dynamic_ind%,
    "n_independent": %n_independent%,
    "string_vec":    %string_vec%,
    "constant_vec":  %constant_vec%,
    "operator_vec":  %operator_vec%,
    "dependent_vec": %dependent_vec%
}
%$$


$end
