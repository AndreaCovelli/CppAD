/* --------------------------------------------------------------------------
CppAD: C++ Algorithmic Differentiation: Copyright (C) 2003-22 Bradley M. Bell

CppAD is distributed under the terms of the
             Eclipse Public License Version 2.0.

This Source Code may also be made available under the following
Secondary License when the conditions for such availability set forth
in the Eclipse Public License, Version 2.0 are satisfied:
      GNU General Public License, Version 2.0 or later.
---------------------------------------------------------------------------- */
$begin atomic_four_lin_ode$$
$spell
    Taylor
    nr
    nc
    mul
    lin
$$

$section
    Atomic First Order Linear ODE: Example Implementation
$$

$head Under construction$$
This example is under construction and not yet ready for use.

$head Syntax$$
$codei%atomic_lin_ode %ode%(%name%)
%$$
$icode%call_id% = %lin_ode%.set(%r%, %n_step%)
%$$
$icode%lin_ode%.get(%call_id%, %r%, %n_step%)
%$$
$icode%lin_ode%(%call_id%, %x%, %y%)
%$$

$head Purpose$$
Construct an atomic operation that computes the solution of
the first order linear ODE
$latex \[
    \partial_s z(s, x) = A(x) z(s, x) \; , \;  z(0, x) = b(x)
\] $$
where
$latex z : \B{R} \times \B{R}^n \rightarrow \B{R}^m$$,
$latex A : \B{R}^n \rightarrow \B{R}^{m \times m}$$, and
$latex b : \B{R}^n \rightarrow  \B{R}^m$$.

$head r$$
This is the value of $icode s$$ at which we are computing the solution
$latex z(s, x)$$.
This is a argument (return value) for the $code set$$, ($code get$$) routine.

$head n_step$$
This is the number of equal size steps,
between $latex s = 0$$ and $latex s = R$$,
used by the numerical method that approximates
the solution of the differential equation.
This is a argument (return value) for the $code set$$, ($code get$$) routine.

$head call_id$$
This is a return value (argument) for the $code set$$, ($code get$$) routine.

$head x$$
We use $icode x$$ to denote the argument to the atomic function.

$subhead n$$
The size of the vector $icode x$$ is
$icode%
    n = m * m + m
%$$

$subhead A(x)$$
The matrix $icode A(x)$$ is stored in row major order at the beginning of
$icode x$$; i.e. its $icode (i,j)$$ element is
$icode%
    A[i,j] = x[ i * m + j]
%$$

$subhead b(x)$$
The vector $icode b(x)$$ is stored at the end of
$icode x$$; i.e. its $icode j$$ element is
$icode%
    b[j] = x[ m * m + j ]
%$$

$head y(x)$$
We use $icode y(x)$$ to denote the result of the atomic function.
The size of this vector must be $icode m$$ and it is defined by
$icode%
    y[i] = z_i (r, x)
%$$

$head Theory$$
The theory below includes function values and
first order derivatives.

$subhead Forward$$
Suppose we are given Taylor coefficients
$latex x^0$$, $latex x^1$$, for $latex x$$.
$latex \[
    y^0 = b^0 + \int_0^r A^0 z^0(s, x) ds
\] $$
$latex \[
    y^1 = b^1 + \int_0^r [ A^0 z^1 (s, x) + A^1 z^0 (s, x) ] ds
\] $$
The Taylor coefficients
$latex y^0$$, $latex y^1$$ can be solved for using
the following extended initial value problem:
$latex \[
\left[ \begin{array}{c}
z^0_s (s, x) \\
z^1_s (s, x)
\end{array} \right]
=
\left[ \begin{array}{cc}
A^0 & 0   \\
A^1 & A^0
\end{array} \right]
\left[ \begin{array}{c}
z^0 (s, x) \\
z^1 (s, x)
\end{array} \right]
\; , \;
\left[ \begin{array}{c}
z^0 (0, x) \\
z^1 (0, x)
\end{array} \right]
=
\left[ \begin{array}{c}
b^0 \\
b^1
\end{array} \right]
\] $$

$subhead Reverse$$
We are given a vector $latex w \in \B{R}^m$$
and need to compute
$latex \[
    \partial_x w^\R{T} z(r, x)
\] $$
We use forward mode derivatives for this computation.
This is not efficient, but it can be computed using an atomic operation.
Let $latex A^{1,k}$$, $latex b^{1,k}$$ be the
first order Taylor coefficient corresponding to the direction $latex x_k$$
Note that $latex b^{1,k}$$ is zero for $latex k < m^2$$ and
$latex A^{1,k}$$ is zero for $latex m^2 \leq k$$.
The extended initial value problem for this calculation is
$latex \[
\left[ \begin{array}{c}
z^0_s (s, x)      \\
z^{1,0}_s (s, x)  \\
\vdots            \\
z^{1,K}_s (s, x)
\end{array} \right]
=
\left[ \begin{array}{ccccc}
A^0     & 0     & \cdots &  0      \\
A^{1,0} &  A^0  & 0      & \vdots  \\
\vdots  & 0     & \ddots & \vdots  \\
A^{1,K} & 0     & \cdots &  A^0 \\
\end{array} \right]
\left[ \begin{array}{c}
z^0     (s, x)  \\
z^{1,0} (s, x)  \\
\vdots          \\
z^{1,K} (s, x)
\end{array} \right]
\; , \;
\left[ \begin{array}{c}
z^0 (0, x)      \\
z^{1,0} (0, x)  \\
\vdots          \\
z^{1,K} (0, x)
\end{array} \right]
=
\left[ \begin{array}{c}
b^0      \\
b^{1,0}  \\
\vdots   \\
b^{1,K}
\end{array} \right]
\] $$
where $latex K = m \cdot m + m - 1$$ and
for $latex i = 0 , \ldots, m-1$$, $latex j = 0, \ldots, m-1$$
$latex \[
A^{1,k}_{i,j} = \left\{ \begin{array}{ll}
    1   & \R{if} \; k < m \cdot m  \; \R{and} \; k = i \cdot m + j \\
    0   & \R{otherwise}
\end{array} \right.
\W{,}
b^{1,k}_{i} = \left\{ \begin{array}{ll}
    1   & \R{if} \; m \cdot m  \leq k \; \R{and} \; k = m \cdot m + i \\
    0   & \R{otherwise}
\end{array} \right.
\] $$
The necessary derivative can then be computed using
$latex \[
    \partial_{x(k)} w^\R{T} z(r, x) = w^\R{T} z^{1,k} (r, s)
\] $$

$childtable%
    include/cppad/example/atomic_four/lin_ode/implement.omh
    %example/atomic_four/lin_ode/forward.cpp
    %example/atomic_four/lin_ode/reverse.cpp
%$$

$end
