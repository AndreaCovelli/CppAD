/* --------------------------------------------------------------------------
CppAD: C++ Algorithmic Differentiation: Copyright (C) 2003-22 Bradley M. Bell

CppAD is distributed under the terms of the
             Eclipse Public License Version 2.0.

This Source Code may also be made available under the following
Secondary License when the conditions for such availability set forth
in the Eclipse Public License, Version 2.0 are satisfied:
      GNU General Public License, Version 2.0 or later.
---------------------------------------------------------------------------- */
$begin atomic_vector$$
$spell
    op
    enum
    mul
    div
    vec_op
$$

$section Atomic Vector Element-wise Operators: Example and Test$$

$head Syntax$$
$codei%atomic_vector_op %vec_op%(%name%)
%$$
$icode%vec_op%(%x%, %y%)
%$$

$head Purpose$$

$subhead Vector Operations$$
This atomic function unary operations
$codei%
    %y% = %op%(u)
%$$
and binary operations
$codei%
    %y% = %u% %op% %v%
%$$
where $icode op$$, $icode u$$ and $icode v$$ are defined below.

$subhead base2ad$$
This also serves as an example for how one can
define $codei%AD<%Base%>%$$ atomic operations use
atomic operators (instead of element-wise operators).
This avoids expanding the atomic operator to an operator for each element
when recording derivative calculations.
For example, notice the difference between $code forward_add$$
for the $code double$$ and the $code AD<double>$$ cases
(note that copying an AD variable does not create a new variable):
$srcfile%
    example/atomic_vector/add_op.cpp%
    0%// BEGIN forward_add%// END forward_add%0
%$$

$head x$$
We use $icode x$$ to denote the argument to the atomic function.
The length of $icode x$$ is denoted by $icode n$$.

$head m$$
This is the length of the vectors in the operations.
In the case of unary (binary) operators
$code%m% = %n% - 1$$  ( $icode%m% = (%n% - 1) / 2%$$ ).

$head op$$
The value $icode%x%[0]%$$
is a constant parameter with the following possible values:
$srcfile%
    example/atomic_vector/atomic_vector.hpp%
    0%// BEGIN op_enum_t%// END op_enum_t%0
%$$
We use $icode op$$ for the corresponding operator.

$head u$$
We use $icode u$$ to denote the following sub-vector of $icode x$$:
$codei%
    %u% = ( %x%[1] , %...% , %x%[%m%] )
%$$

$head v$$
For binary operators,
we use $icode v$$ to denote the following sub-vector of $icode x$$:
$codei%
    %v% = ( %x%[%m% + 1] , %...% , %x%[2 * %m%] )
%$$

$head y$$
We use $icode y$$ to denote the atomic function return value.
The length of $icode y$$ is equal to $icode m$$.

$head AD<double>$$
During $code AD<double>$$ operations, copying variables
from one vector to another does not add any operations to the
resulting tape.


$comment BEGIN_SORT_THIS_LINE_PLUS_3$$
$childtable%
    example/atomic_vector/atomic_vector.hpp
    %example/atomic_vector/add.cpp
    %example/atomic_vector/div.cpp
    %example/atomic_vector/mul.cpp
    %example/atomic_vector/neg.cpp
    %example/atomic_vector/sub.cpp
%$$
$comment END_SORT_THIS_LINE_MINUS_2$$

$end
