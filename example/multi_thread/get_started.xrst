{xrst_comment: This template file has the following parameters:
@Name@    : is the name of this threading system
@####@    : is the underlining for the name of the threading system
@DEFAULT@ : is macro a macro name. If it is 1 (0), 
            the ADFun default ctor is used (is not used)
@Dir@     : is the subdirectory of multi_thread that contins the source code 
            for this get_started.cpp
}

Getting Started Using @Name@ Threads With CppAD
######################@####@###################

in_parallel
***********
see :ref:`ta_parallel_setup@in_parallel` .

thread_number
*************
see :ref:`ta_parallel_setup@thread_num` .

ADFun Constructor
*****************
If you use the :ref:`fun_construct@Sequence Constructor` for the original
function, you will need to clear the Taylor coefficient memory associated
with the function using :ref:`capacity_order-name` ; e.g. ::

   CppAD::ADFun fun(ax, ay);
   fun.capacity_order(0);

If you do not free the Taylor coefficient memory in ``fun`` ,
the function assignments will allocate zero order Taylor coefficients for each
function in ``fun_thread`` using thread zero. Depending on what you do in
parallel mode, you may attempt to free that memory using another thread.
For example, if you change @DEFAULT@ from 1 to 0, you will
get the message::

   Attempt to return memory for a different thread while in parallel mode

Source Code
***********
{xrst_literal
   example/multi_thread/@Dir@/get_started.cpp
   // BEGIN C++
   // END C++
}
