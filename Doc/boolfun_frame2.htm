<html><head>
<title>Defining Boolean Functions with AD Arguments</title>
<meta name="description" content="Defining Boolean Functions with AD Arguments">
<meta name="keywords" content=" bool function "><style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
</head>
<body>
<div align='right'>&nbsp;&nbsp;This:&nbsp;&nbsp;<a href="boolfun.htm" target="_top">section</a>, <a href="boolfun_frame2.htm" target="_top">frame</a></div>

<b><big><a name="CppADCreateUnaryBool">CppADCreateUnaryBool</a></big></b>
<br>
The preprocessor macro invocation
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppADCreateUnaryBool(</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>FunName</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>creates a function with the following prototype:
<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
inline&nbsp;bool&nbsp;</span></font></code><i><span style='white-space: nowrap'>FunName</span></i><code><font color="blue"><span style='white-space: nowrap'>(const&nbsp;AD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>ad</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>This enables one to define arbitrary
boolean valued functions with one AD argument.
The value <i>FunName</i> must correspond to a 
function with the prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
bool&nbsp;</span></font></code><i><span style='white-space: nowrap'>FunName</span></i><code><font color="blue"><span style='white-space: nowrap'>(const&nbsp;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>base</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>The value returned for the argument <i>ad</i>
is the value return for the argument <i>base</i>
where <i>base</i> is the base type value of the argument <i>ad</i>.

<br>
<br>
<b><big><a name="CppADCreateBinaryBool">CppADCreateBinaryBool</a></big></b>
<br>
The preprocessor macro invocation
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppADCreateBinaryBool(</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>FunName</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>creates a function with the following prototype:
<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
inline&nbsp;bool&nbsp;</span></font></code><i><span style='white-space: nowrap'>FunName</span></i><code><font color="blue"><span style='white-space: nowrap'>(const&nbsp;AD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>ad_x</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;const&nbsp;AD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>ad_y</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>This enables one to define arbitrary
boolean valued functions with two AD arguments.
The value <i>FunName</i> must correspond to a 
function with the prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
bool&nbsp;</span></font></code><i><span style='white-space: nowrap'>FunName</span></i><code><font color="blue"><span style='white-space: nowrap'>(const&nbsp;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>base_x</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;const&nbsp;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>base_y</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>The value returned by the call
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>FunName</span></i><code><font color="blue"><span style='white-space: nowrap'>(</span></font></code><i><span style='white-space: nowrap'>ad_x</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>ad_y</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>,
is equal to the value returned by the call
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>FunName</span></i><code><font color="blue"><span style='white-space: nowrap'>(</span></font></code><i><span style='white-space: nowrap'>base_x</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>base_y</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>,
where <i>base_x</i> and <i>base_y</i>
are the base type values corresponding to 
<i>ad_x</i> and <i>ad_y</i>.


<br>
<br>
<b><big><a name="Example">Example</a></big></b>

<br>
The file
<a href="boolfun.cpp.htm" target="_top"><span style='white-space: nowrap'>BoolFun.cpp</span></a>

contains an example and a test of these operations.
It returns true if it succeeds and false otherwise.


<hr>Input File: CppAD\local\BoolFun.h

</body>
</html>
