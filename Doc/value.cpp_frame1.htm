<html><head>
<title>Conversion to Base Type: Example and Test</title>
<meta name="description" content="Conversion to Base Type: Example and Test">
<meta name="keywords" content=" Base Value example test "><style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
</head>
<body>
<div align='right'><a href="value.htm" target="_top">previous</a>
&nbsp;&nbsp;<a href="neg.htm" target="_top">next</a>
&nbsp;&nbsp;<a href="_contents.htm" target="_top">contents</a>
&nbsp;&nbsp;<a href="_reference.htm" target="_top">reference</a>
&nbsp;&nbsp;<a href="_index.htm" target="_top">index</a>
&nbsp;&nbsp;<a href="_search.htm" target="_top">search</a>
&nbsp;&nbsp;<a href="_external.htm" target="_top">external</a>
&nbsp;&nbsp;This:&nbsp;&nbsp;<a href="value.cpp.htm" target="_top">section</a>, <a href="value.cpp_frame1.htm" target="_top">frame</a></div>
<hr>


<center><b><big><big>Conversion to Base Type: Example and Test</big></big></b></center>
<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
#&nbsp;include&nbsp;&lt;CppAD/CppAD.h&gt;<br>
<br>
bool&nbsp;Value(void)<br>
{&nbsp;&nbsp;&nbsp;&nbsp;bool&nbsp;ok&nbsp;=&nbsp;true;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;using&nbsp;namespace&nbsp;CppAD;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;independent&nbsp;variable&nbsp;vector,&nbsp;indices,&nbsp;values,&nbsp;and&nbsp;declaration<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppADvector&lt;&nbsp;AD&lt;double&gt;&nbsp;&gt;&nbsp;U(2);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;s&nbsp;=&nbsp;0;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;t&nbsp;=&nbsp;1;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;U[s]&nbsp;=&nbsp;3.;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;U[t]&nbsp;=&nbsp;4.;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Independent(U);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;cannot&nbsp;call&nbsp;Value&nbsp;after&nbsp;Independent&nbsp;(tape&nbsp;is&nbsp;recording)<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;dependent&nbsp;variable&nbsp;vector&nbsp;and&nbsp;indices<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppADvector&lt;&nbsp;AD&lt;double&gt;&nbsp;&gt;&nbsp;Z(1);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;x&nbsp;=&nbsp;0;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;dependent&nbsp;variable&nbsp;values<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Z[x]&nbsp;=&nbsp;-&nbsp;U[t];<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;create&nbsp;f:&nbsp;U&nbsp;-&gt;&nbsp;Z&nbsp;and&nbsp;vectors&nbsp;used&nbsp;for&nbsp;derivative&nbsp;calculations<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ADFun&lt;double&gt;&nbsp;f(U,&nbsp;Z);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppADvector&lt;double&gt;&nbsp;v(&nbsp;f.Domain()&nbsp;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppADvector&lt;double&gt;&nbsp;w(&nbsp;f.Range()&nbsp;);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;can&nbsp;call&nbsp;Value&nbsp;after&nbsp;ADFun&nbsp;constructor&nbsp;(tape&nbsp;is&nbsp;no&nbsp;longer&nbsp;recording)<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;check&nbsp;value&nbsp;of&nbsp;s<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;sValue&nbsp;=&nbsp;Value(U[s]);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;(&nbsp;sValue&nbsp;==&nbsp;3.&nbsp;);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;check&nbsp;value&nbsp;of&nbsp;x<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;xValue&nbsp;=&nbsp;Value(Z[x]);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;(&nbsp;xValue&nbsp;==&nbsp;-4.&nbsp;);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;ok;<br>
}<br>
</span></font></code>
<hr>Input File: Example\Value.cpp

</body>
</html>
