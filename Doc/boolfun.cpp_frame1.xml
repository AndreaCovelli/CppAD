<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>Defining Boolean Functions with AD Arguments: Example and Test</title>
<meta name="description" content="Defining Boolean Functions with AD Arguments: Example and Test"/>
<meta name="keywords" content=" Isreal Absgeq complex boolean computed add example test "/><style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
</head>
<body>
<div align='right'><a href="boolfun.xml" target="_top">previous</a>
&#xA0;&#xA0;<a href="vectortypes.xml" target="_top">next</a>
&#xA0;&#xA0;<a href="_contents.xml" target="_top">contents</a>
&#xA0;&#xA0;<a href="_reference.xml" target="_top">reference</a>
&#xA0;&#xA0;<a href="_index.xml" target="_top">index</a>
&#xA0;&#xA0;<a href="_search.xml" target="_top">search</a>
&#xA0;&#xA0;<a href="_external.xml" target="_top">external</a>
&#xA0;&#xA0;This:&#xA0;&#xA0;<a href="boolfun.cpp.xml" target="_top">section</a>, <a href="boolfun.cpp_frame1.xml" target="_top">frame</a></div>
<hr/>


<center><b><big><big>Defining Boolean Functions with AD Arguments: Example and Test</big></big></b></center>
<code><font color="blue"><span style='white-space: nowrap'><br/>
<br/>
#&#xA0;include&#xA0;&lt;CppAD/CppAD.h&gt;<br/>
#&#xA0;include&#xA0;&lt;complex&gt;<br/>
<br/>
//&#xA0;define&#xA0;abbreviation&#xA0;for&#xA0;double&#xA0;precision&#xA0;complex&#xA0;<br/>
typedef&#xA0;std::complex&lt;double&gt;&#xA0;Complex;<br/>
<br/>
namespace&#xA0;{&#xA0;//&#xA0;place&#xA0;these&#xA0;functions&#xA0;in&#xA0;the&#xA0;empty&#xA0;namespace<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;create&#xA0;Complex&#xA0;and&#xA0;AD&lt;Complex&gt;&#xA0;versions&#xA0;of&#xA0;IsReal<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;static&#xA0;bool&#xA0;IsReal(const&#xA0;Complex&#xA0;&amp;x)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;x.imag()&#xA0;==&#xA0;0.;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADCreateUnaryBool(Complex,&#xA0;IsReal)<br/>
<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;create&#xA0;Complex&#xA0;and&#xA0;AD&lt;Complex&gt;&#xA0;versions&#xA0;of&#xA0;AbsGeq<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;static&#xA0;bool&#xA0;AbsGeq(const&#xA0;Complex&#xA0;&amp;x,&#xA0;const&#xA0;Complex&#xA0;&amp;y)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;axsq&#xA0;=&#xA0;x.real()&#xA0;*&#xA0;x.real()&#xA0;+&#xA0;x.imag()&#xA0;*&#xA0;x.imag();<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;aysq&#xA0;=&#xA0;y.real()&#xA0;*&#xA0;y.real()&#xA0;+&#xA0;y.imag()&#xA0;*&#xA0;y.imag();<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;axsq&#xA0;&gt;=&#xA0;aysq;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADCreateBinaryBool(Complex,&#xA0;AbsGeq)<br/>
}<br/>
<br/>
bool&#xA0;BoolFun(void)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;ok&#xA0;=&#xA0;true;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppAD::AD&lt;Complex&gt;&#xA0;x&#xA0;=&#xA0;Complex(1.,&#xA0;&#xA0;0.);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppAD::AD&lt;Complex&gt;&#xA0;y&#xA0;=&#xA0;Complex(1.,&#xA0;&#xA0;1.);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;IsReal(x);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;!&#xA0;AbsGeq(x,&#xA0;y);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;ok;<br/>
}<br/>
<br/>
</span></font></code>
<hr/>Input File: Example\BoolFun.cpp

</body>
</html>
