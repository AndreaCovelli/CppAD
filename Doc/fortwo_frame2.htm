<html><head>
<title>Subset of Second Partial Derivatives: Forward Mode Easy Driver</title>
<meta name="description" content="Subset of Second Partial Derivatives: Forward Mode Easy Driver">
<meta name="keywords" content=" easy second derivative driver "><style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
</head>
<body>
<div align='right'>&nbsp;&nbsp;This:&nbsp;&nbsp;<a href="fortwo.htm" target="_top">section</a>, <a href="fortwo_frame2.htm" target="_top">frame</a></div>

<b><big><a name="Description">Description</a></big></b>
<br>
Given an <a href="adfun.htm" target="_top"><span style='white-space: nowrap'>ADFun&lt;Base&gt;</span></a>
 object 
<code>
<span style='white-space: nowrap'>&nbsp;F&nbsp;:&nbsp;B^n&nbsp;\rightarrow&nbsp;B^m</span></code>
,
this routine computes a subset of
the second order partial derivatives of the form
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\DD{&nbsp;F_i&nbsp;}{&nbsp;x_j&nbsp;}&nbsp;{&nbsp;x_k&nbsp;}&nbsp;(x)<br>
\]&nbsp;</span></code>

where <i>i</i> ranges over all possible values
and specific values are chosen for 
<i>x</i>, <i>j</i> and <i>k</i>. 

<br>
<br>
<b><big><a name="F">F</a></big></b>
<br>
The object <i>F</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ADFun&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;&nbsp;</span></font></code><i><span style='white-space: nowrap'>F</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code><br>
<b><big><a name="VectorBase">VectorBase</a></big></b>
<br>
The type <i>VectorBase</i> must be a <a href="simplevector.htm" target="_top"><span style='white-space: nowrap'>SimpleVector</span></a>
 class with
<a href="simplevector_frame1.htm#Elements of Specified Type" target="frame1"><i><span style='white-space: nowrap'>elements&nbsp;of&nbsp;type&nbsp;Base</span></i></a>
.
The routine <a href="checksimplevector.htm" target="_top"><span style='white-space: nowrap'>CheckSimpleVector</span></a>
 will generate an error message
if this is not the case.

<br>
<br>
<b><big><a name="VectorSize_t">VectorSize_t</a></big></b>
<br>
The type <i>VectorSize_t</i> must have all the operations
specified by 
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>SimpleVector</span></i><code><font color="blue"><span style='white-space: nowrap'>&lt;size_t&gt;<br>
</span></font></code>where <i>SimpleVector</i> is a 
<a href="simplevector.htm" target="_top"><span style='white-space: nowrap'>Simple&nbsp;Vector</span></a>
 template class. 
Note that the type <code><font color="blue">size_t</font></code> must be equal to
<code><font color="blue"></font></code><i><span style='white-space: nowrap'>VectorSize_t</span></i><code><font color="blue"><span style='white-space: nowrap'>::value_type</span></font></code>.

<br>
<br>
<b><big><a name="x">x</a></big></b>
<br>
The vector <i>x</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font></code><i><span style='white-space: nowrap'>VectorBase</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;<br>
</span></font></code>It must have length <i>n</i> and specifies
that point at which to evaluate the partial derivatives.

<br>
<br>
<b><big><a name="J">J</a></big></b>
<br>
The vector <i>J</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font></code><i><span style='white-space: nowrap'>VectorSize_t</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>J</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>We use <code>
<span style='white-space: nowrap'>&nbsp;L</span></code>
 to denote the length of the vector <i>J</i>.
For <code>
<span style='white-space: nowrap'>&nbsp;\ell&nbsp;=&nbsp;0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;L-1</span></code>
, <code>
<span style='white-space: nowrap'>&nbsp;J[&nbsp;\ell&nbsp;]&nbsp;&nbsp;&lt;&nbsp;n</span></code>
.

<br>
<br>
<b><big><a name="K">K</a></big></b>
<br>
The vector <i>K</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font></code><i><span style='white-space: nowrap'>VectorSize_t</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>K</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>It must have length <i>L</i> and 
for <code>
<span style='white-space: nowrap'>&nbsp;\ell&nbsp;=&nbsp;0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;L-1</span></code>
,
<code>
<span style='white-space: nowrap'>&nbsp;K[&nbsp;\ell&nbsp;]&nbsp;&nbsp;&lt;&nbsp;n</span></code>
.

<br>
<br>
<b><big><a name="dF">dF</a></big></b>
<br>
The vector <i>dF</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>VectorBase</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font></code><i><span style='white-space: nowrap'>dF</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;<br>
</span></font></code>It must have length <code><font color="blue"></font></code><i><span style='white-space: nowrap'>m</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;*&nbsp;</span></font></code><i><span style='white-space: nowrap'>L</span></i>.
After the assignment to <i>dF</i>, 
for <code>
<span style='white-space: nowrap'>&nbsp;i&nbsp;=&nbsp;0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;m&nbsp;-&nbsp;1&nbsp;</span></code>
 and <code>
<span style='white-space: nowrap'>&nbsp;\ell&nbsp;=&nbsp;0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;L&nbsp;-&nbsp;1</span></code>

<code>
<span style='white-space: nowrap'>&nbsp;\[.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dF[&nbsp;i&nbsp;*&nbsp;L&nbsp;+&nbsp;&nbsp;\ell&nbsp;&nbsp;]&nbsp;=&nbsp;\DD{&nbsp;F_i&nbsp;}{&nbsp;x_j&nbsp;}{&nbsp;x_k&nbsp;}&nbsp;(&nbsp;x&nbsp;)<br>
\]&nbsp;</span></code>

where <code>
<span style='white-space: nowrap'>&nbsp;j&nbsp;=&nbsp;J[&nbsp;\ell&nbsp;]</span></code>
 and <code>
<span style='white-space: nowrap'>&nbsp;k&nbsp;=&nbsp;K[&nbsp;\ell&nbsp;]</span></code>
.


<br>
<br>
<b><big><a name="Forward">Forward</a></big></b>
<br>
The object <i>F</i> stores information related to previous
calls to <code><font color="blue"></font></code><i><span style='white-space: nowrap'>F</span></i><code><font color="blue"><span style='white-space: nowrap'>.Forward</span></font></code>.
After this operation,
the previous calls to <a href="forward.htm" target="_top"><span style='white-space: nowrap'>Forward</span></a>
 are undefined
with the exception of the zero order call which has the form
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>F</span></i><code><font color="blue"><span style='white-space: nowrap'>.Forward(0,&nbsp;</span></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>.

<br>
<br>
<b><big><a name="Examples">Examples</a></big></b>

<br>
The routine 
<a href="fortwo.h.htm" target="_top"><span style='white-space: nowrap'>ForTwo</span></a>
 is both an example and a test.
It returns <code><font color="blue">true</font></code>, if it succeeds and <code><font color="blue">false</font></code> otherwise.


<hr>Input File: CppAD\local\ForTwo.h

</body>
</html>
