<html><head>
<title>Forward Mode: Example and Test</title>
<meta name="description" content="Forward Mode: Example and Test">
<meta name="keywords" content=" Forward example test "><style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
</head>
<body>
<div align='right'><a href="forward.htm" target="_top">previous</a>
&nbsp;&nbsp;<a href="reverse.htm" target="_top">next</a>
&nbsp;&nbsp;<a href="_contents.htm" target="_top">contents</a>
&nbsp;&nbsp;<a href="_reference.htm" target="_top">reference</a>
&nbsp;&nbsp;<a href="_index.htm" target="_top">index</a>
&nbsp;&nbsp;<a href="_search.htm" target="_top">search</a>
&nbsp;&nbsp;<a href="_external.htm" target="_top">external</a>
&nbsp;&nbsp;This:&nbsp;&nbsp;<a href="forward.h.htm" target="_top">section</a>, <a href="forward.h_frame1.htm" target="_top">frame</a></div>
<hr>


<center><b><big><big>Forward Mode: Example and Test</big></big></b></center>
<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
#&nbsp;include&nbsp;&lt;CppAD/CppAD.h&gt;<br>
<br>
template&nbsp;&lt;typename&nbsp;VectorDouble&gt;&nbsp;//&nbsp;vector&nbsp;class,&nbsp;elements&nbsp;of&nbsp;type&nbsp;double<br>
bool&nbsp;Forward(void)<br>
{&nbsp;&nbsp;&nbsp;&nbsp;bool&nbsp;ok&nbsp;=&nbsp;true;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;using&nbsp;namespace&nbsp;CppAD;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;independent&nbsp;variable&nbsp;vector&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppADvector&lt;&nbsp;AD&lt;double&gt;&nbsp;&gt;&nbsp;X(2);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X[0]&nbsp;=&nbsp;0.;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X[1]&nbsp;=&nbsp;1.;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Independent(X);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;compute&nbsp;product&nbsp;of&nbsp;elements&nbsp;in&nbsp;X<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppADvector&lt;&nbsp;AD&lt;double&gt;&nbsp;&gt;&nbsp;Y(1);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y[0]&nbsp;=&nbsp;X[0]&nbsp;*&nbsp;X[0]&nbsp;*&nbsp;X[1];<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;create&nbsp;function&nbsp;object&nbsp;F&nbsp;:&nbsp;X&nbsp;-&gt;&nbsp;Y<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ADFun&lt;double&gt;&nbsp;F(X,&nbsp;Y);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;use&nbsp;zero&nbsp;order&nbsp;to&nbsp;evaluate&nbsp;F[&nbsp;(3,&nbsp;4)&nbsp;]&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VectorDouble&nbsp;x0(&nbsp;F.Domain()&nbsp;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VectorDouble&nbsp;y0(&nbsp;F.Range()&nbsp;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x0[0]&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;3.;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x0[1]&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;4.;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;F.Forward(0,&nbsp;x0);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;=&nbsp;NearEqual(y0[0]&nbsp;,&nbsp;x0[0]*x0[0]*x0[1],&nbsp;1e-10,&nbsp;1e-10);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;evaluate&nbsp;derivative&nbsp;of&nbsp;F&nbsp;in&nbsp;X[0]&nbsp;direction<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VectorDouble&nbsp;x1(&nbsp;F.Domain()&nbsp;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VectorDouble&nbsp;y1(&nbsp;F.Range()&nbsp;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x1[0]&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;1.;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x1[1]&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;0.;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;F.Forward(1,&nbsp;x1);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;=&nbsp;NearEqual(y1[0]&nbsp;,&nbsp;2.*x0[0]*x0[1],&nbsp;1e-10,&nbsp;1e-10);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;evaluate&nbsp;second&nbsp;derivative&nbsp;of&nbsp;F&nbsp;in&nbsp;X[0]&nbsp;direction<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VectorDouble&nbsp;x2(&nbsp;F.Domain()&nbsp;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VectorDouble&nbsp;y2(&nbsp;F.Range()&nbsp;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x2[0]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;0.;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x2[1]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;0.;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;F.Forward(2,&nbsp;x2);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;F_00&nbsp;=&nbsp;2.&nbsp;*&nbsp;y2[0];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;=&nbsp;NearEqual(F_00,&nbsp;2.*x0[1],&nbsp;1e-10,&nbsp;1e-10);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;evalute&nbsp;derivative&nbsp;of&nbsp;F&nbsp;in&nbsp;X[1]&nbsp;direction<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x1[0]&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;0.;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x1[1]&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;1.;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;F.Forward(1,&nbsp;x1);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;=&nbsp;NearEqual(y1[0]&nbsp;,&nbsp;x0[0]*x0[0],&nbsp;1e-10,&nbsp;1e-10);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;evaluate&nbsp;second&nbsp;derivative&nbsp;of&nbsp;F&nbsp;in&nbsp;X[1]&nbsp;direction<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;F.Forward(2,&nbsp;x2);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;F_11&nbsp;=&nbsp;2.&nbsp;*&nbsp;y2[0];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;=&nbsp;NearEqual(F_11,&nbsp;0.,&nbsp;1e-10,&nbsp;1e-10);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;evalute&nbsp;derivative&nbsp;of&nbsp;F&nbsp;in&nbsp;X[0]&nbsp;+&nbsp;X[1]&nbsp;direction<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x1[0]&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;1.;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x1[1]&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;1.;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;F.Forward(1,&nbsp;x1);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;=&nbsp;NearEqual(y1[0],&nbsp;2.*x0[0]*x0[1]&nbsp;+&nbsp;x0[0]*x0[0],&nbsp;1e-10,&nbsp;1e-10);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;use&nbsp;second&nbsp;derivative&nbsp;of&nbsp;F&nbsp;in&nbsp;X[0]&nbsp;direction&nbsp;to<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;compute&nbsp;second&nbsp;partial&nbsp;of&nbsp;F&nbsp;w.r.t&nbsp;X[1]&nbsp;w.r.t&nbsp;X[2]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;F.Forward(2,&nbsp;x2);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;F_01&nbsp;=&nbsp;y2[0]&nbsp;-&nbsp;F_00&nbsp;/&nbsp;2.&nbsp;-&nbsp;F_11&nbsp;/&nbsp;2.;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;=&nbsp;NearEqual(F_01&nbsp;,&nbsp;2.*x0[0],&nbsp;1e-10,&nbsp;1e-10);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;ok;<br>
}<br>
</span></font></code>
<hr>Input File: Example\Forward.h

</body>
</html>
