<html><head>
<title>Derivative of Vector Valued Function: Example and Test</title>
<meta name="description" content="Derivative of Vector Valued Function: Example and Test">
<meta name="keywords" content=" Jacobian example test "><style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
</head>
<body>
<div align='right'><a href="jacobian.htm" target="_top">previous</a>
&nbsp;&nbsp;<a href="forone.htm" target="_top">next</a>
&nbsp;&nbsp;<a href="_contents.htm" target="_top">contents</a>
&nbsp;&nbsp;<a href="_reference.htm" target="_top">reference</a>
&nbsp;&nbsp;<a href="_index.htm" target="_top">index</a>
&nbsp;&nbsp;<a href="_search.htm" target="_top">search</a>
&nbsp;&nbsp;<a href="_external.htm" target="_top">external</a>
&nbsp;&nbsp;This:&nbsp;&nbsp;<a href="jacobian.h.htm" target="_top">section</a>, <a href="jacobian.h_frame1.htm" target="_top">frame</a></div>
<hr>


<center><b><big><big>Derivative of Vector Valued Function: Example and Test</big></big></b></center>
<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
#&nbsp;include&nbsp;&lt;CppAD/CppAD.h&gt;<br>
#&nbsp;include&nbsp;&quot;NearEqualExt.h&quot;<br>
<br>
<br>
//&nbsp;----------------------------------------------------------------------------<br>
<br>
template&nbsp;&lt;typename&nbsp;VectorDouble&gt;&nbsp;//&nbsp;vector&nbsp;class,&nbsp;elements&nbsp;of&nbsp;type&nbsp;double<br>
bool&nbsp;Jacobian()<br>
{&nbsp;&nbsp;&nbsp;&nbsp;bool&nbsp;ok&nbsp;=&nbsp;true;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;using&nbsp;namespace&nbsp;CppAD;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;using&nbsp;CppAD::exp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;using&nbsp;CppAD::sin;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;using&nbsp;CppAD::cos;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;m&nbsp;=&nbsp;3;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;n&nbsp;=&nbsp;2;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;independent&nbsp;and&nbsp;dependent&nbsp;variable&nbsp;vectors<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppADvector&lt;&nbsp;AD&lt;double&gt;&nbsp;&gt;&nbsp;&nbsp;X(n);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppADvector&lt;&nbsp;AD&lt;double&gt;&nbsp;&gt;&nbsp;&nbsp;Y(m);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;value&nbsp;of&nbsp;the&nbsp;independent&nbsp;variable<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X[0]&nbsp;=&nbsp;1.;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X[1]&nbsp;=&nbsp;2.;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;set&nbsp;the&nbsp;independent&nbsp;variables<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Independent(X);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;comupute&nbsp;the&nbsp;dependent&nbsp;variable&nbsp;values<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AD&lt;double&gt;&nbsp;Square&nbsp;=&nbsp;X[0]&nbsp;*&nbsp;X[0];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y[0]&nbsp;=&nbsp;Square&nbsp;*&nbsp;exp(&nbsp;X[1]&nbsp;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y[1]&nbsp;=&nbsp;Square&nbsp;*&nbsp;sin(&nbsp;X[1]&nbsp;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y[2]&nbsp;=&nbsp;Square&nbsp;*&nbsp;cos(&nbsp;X[1]&nbsp;);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;create&nbsp;the&nbsp;function&nbsp;object&nbsp;F&nbsp;:&nbsp;X&nbsp;-&gt;&nbsp;Y<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ADFun&lt;double&gt;&nbsp;F(X,&nbsp;Y);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;argument&nbsp;value<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VectorDouble&nbsp;x(&nbsp;X.size()&nbsp;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x[0]&nbsp;=&nbsp;2.;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x[1]&nbsp;=&nbsp;1.;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;first&nbsp;derivative&nbsp;of&nbsp;Y&nbsp;w.r.t.&nbsp;X<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VectorDouble&nbsp;J(&nbsp;m&nbsp;*&nbsp;n&nbsp;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;J&nbsp;=&nbsp;F.Jacobian(x);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;J&nbsp;&nbsp;&nbsp;=&nbsp;[&nbsp;2&nbsp;*&nbsp;x[0]&nbsp;*&nbsp;exp(x[1])&nbsp;,&nbsp;&nbsp;x[0]&nbsp;*&nbsp;x[0]&nbsp;*&nbsp;exp(x[1])&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;2&nbsp;*&nbsp;x[0]&nbsp;*&nbsp;sin(x[1])&nbsp;,&nbsp;&nbsp;x[0]&nbsp;*&nbsp;x[0]&nbsp;*&nbsp;cos(x[1])&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;2&nbsp;*&nbsp;x[0]&nbsp;*&nbsp;cos(x[1])&nbsp;,&nbsp;-x[0]&nbsp;*&nbsp;x[0]&nbsp;*&nbsp;sin(x[i])&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;&nbsp;NearEqual(&nbsp;2.*x[0]*exp(x[1]),&nbsp;J[0*n+0],&nbsp;1e-10,&nbsp;1e-10&nbsp;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;&nbsp;NearEqual(&nbsp;2.*x[0]*sin(x[1]),&nbsp;J[1*n+0],&nbsp;1e-10,&nbsp;1e-10&nbsp;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;&nbsp;NearEqual(&nbsp;2.*x[0]*cos(x[1]),&nbsp;J[2*n+0],&nbsp;1e-10,&nbsp;1e-10&nbsp;);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;&nbsp;NearEqual(&nbsp;x[0]&nbsp;*&nbsp;x[0]&nbsp;*exp(x[1]),&nbsp;J[0*n+1],&nbsp;1e-10,&nbsp;1e-10&nbsp;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;&nbsp;NearEqual(&nbsp;x[0]&nbsp;*&nbsp;x[0]&nbsp;*cos(x[1]),&nbsp;J[1*n+1],&nbsp;1e-10,&nbsp;1e-10&nbsp;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;&nbsp;NearEqual(-x[0]&nbsp;*&nbsp;x[0]&nbsp;*sin(x[1]),&nbsp;J[2*n+1],&nbsp;1e-10,&nbsp;1e-10&nbsp;);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;ok;<br>
<br>
}<br>
<br>
</span></font></code>
<hr>Input File: Example\Jacobian.h

</body>
</html>
