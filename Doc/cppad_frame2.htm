<html><head>
<title>A Package for Differentiation of C++ Algorithms: CppAD Version 05-07-05</title>
<meta name="description" content="A Package for Differentiation of C++ Algorithms: CppAD Version 05-07-05">
<meta name="keywords" content=" algorithm differentiation C++ derivative Cppad version introduction require base type include namespace "><style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
</head>
<body>
<div align='right'>&nbsp;&nbsp;This:&nbsp;&nbsp;<a href="cppad.htm" target="_top">section</a>, <a href="cppad_frame2.htm" target="_top">frame</a></div>

<b><big><a name="Introduction">Introduction</a></big></b>

<br>
We refer to the
step by step conversion from an algorithm that computes function values
to an algorithm that computes derivative values
as <i>Algorithmic Differentiation</i>
(often referred to as <i>Automatic Differentiation</i>.) 
Given a C++ algorithm that computes function values,
CppAD generates an algorithm that computes its derivative values.

<ol type="1"><li>
Uses operator overloading to compute derivatives of algorithms defined in C++
(see <a href="whatsnew05.htm" target="_top"><span style='white-space: nowrap'>WhatsNew05</span></a>
 for a list of recent changes).
</li><li>

A Taped sequence of operations are stored as a 
<a href="adfun.htm" target="_top"><span style='white-space: nowrap'>differentiable&nbsp;function&nbsp;object</span></a>
 which
can be evaluated with different argument values.
</li><li>

Valid for multiple base types; for example,
<code><font color="blue">double</font></code>, 
<code><font color="blue">complex</font></code>,
<code><font color="blue">complex&lt;double&gt;</font></code>, and
<code><font color="blue">AD&lt;double&gt;</font></code>
(see <a href="cppad_frame2.htm#Base Type Requirements" target="frame1"><i><span style='white-space: nowrap'>base&nbsp;type&nbsp;requirements</span></i></a>
).
</li><li>

Arbitrary order Forward and Reverse mode calculation of derivatives.
</li><li>

Allows for replacement of it's <a href="cppadvector.htm" target="_top"><span style='white-space: nowrap'>vector</span></a>
 class; for example,
you can use the
<a href="http://www.boost.org/libs/numeric/ublas/doc/index.htm" target="_top"><span style='white-space: nowrap'>uBlas</span></a>
 
vector class.
</li><li>

Includes the templated ODE solvers 
<a href="runge45.htm" target="_top"><span style='white-space: nowrap'>Runge45</span></a>
, <a href="rosen34.htm" target="_top"><span style='white-space: nowrap'>Rosen34</span></a>
, and <a href="odeerrcontrol.htm" target="_top"><span style='white-space: nowrap'>OdeErrControl</span></a>
,
which can be used to 
differentiate solutions of ordinary differential equations. 
</li><li>

Includes a templated <a href="lusolve.htm" target="_top"><span style='white-space: nowrap'>LU</span></a>
 solver that can be used to 
differentiate determinants and solutions of linear equations. 
</li><li>

Derivatives of functions that use other derivatives
can be computed by taping the derivative computation; for example,
see  <a href="multape.htm" target="_top"><span style='white-space: nowrap'>MulTape</span></a>
 for a simple example,
and <a href="odetaylor.cpp.htm" target="_top"><span style='white-space: nowrap'>OdeTaylor.cpp</span></a>
 for a more realistic example.
</li><li>

Taped evaluation of user defined unary 
<a href="discrete.htm" target="_top"><span style='white-space: nowrap'>discrete&nbsp;functions</span></a>
; i.e.,
functions with identically zero derivatives.
</li><li>

Taped evaluation of
<a href="condexp.htm" target="_top"><span style='white-space: nowrap'>conditional&nbsp;expressions</span></a>
.
</li><li>

User defined unary and binary
<a href="boolfun.htm" target="_top"><span style='white-space: nowrap'>boolean&nbsp;valued&nbsp;functions</span></a>

as well as the normal
<a href="compare.htm" target="_top"><span style='white-space: nowrap'>comparison</span></a>
 operators.
</li><li>

Supports both standard compliant C++ and Microsoft C++ compilers.
</li><li>

Distributed under the Gnu public <a href="license.htm" target="_top"><span style='white-space: nowrap'>License</span></a>
 with extensive
user and developer documentation.
</li></ol>


You can find out about other algorithmic differentiation tools
and about algorithmic differentiation in general at the web site
<a href="http://www.autodiff.org" target="_top"><span style='white-space: nowrap'>http://www.autodiff.org</span></a>

or at
<a href="http://www.math.tu-dresden.de/wir/staff/griewank/" target="_top"><span style='white-space: nowrap'>Andreas&nbsp;Griewank's&nbsp;home&nbsp;page</span></a>
.

<br>
<br>
<b><a name="Introduction.Example">Example</a></b>
<br>
The file
<a href="getstarted.cpp.htm" target="_top"><span style='white-space: nowrap'>GetStarted.cpp</span></a>

contains an example and test of using CppAD to compute
the derivative of a polynomial.
There are many other 
<a href="example.htm" target="_top"><span style='white-space: nowrap'>examples</span></a>
.

<br>
<br>
<b><big><a name="Base Type Requirements">Base Type Requirements</a></big></b>



<br>
The currently allowable base types are:
<code><font color="blue">float</font></code>,
<code><font color="blue">double</font></code>,
<code><font color="blue">std::complex&lt;float&gt;</font></code>,
<code><font color="blue">std::complex&lt;double&gt;</font></code>.
In addition, if <i>Base</i> is a valid base type,
<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code> is also an allowable base type.
For example
<code><font color="blue">AD&lt; AD&lt;double&gt; &gt;</font></code> is a valid type.

<br>
<br>
<b><big><a name="Syntax">Syntax</a></big></b>


<br>
<br>
<b><a name="Syntax.include CppAD.h">include CppAD.h</a></b>

<br>
This include directive will define the template class
<code><font color="blue"><span style='white-space: nowrap'>CppAD::AD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code> 
for the rest of the current compilation unit.
All the preprocessor symbols used by CppAD begin with <code><font color="blue">CppAD</font></code>.
For example, 
the preprocessor symbol <code><font color="blue">CppADIncluded</font></code> is used to determine
if <code><font color="blue">CppAD.h</font></code> has already been included.
As another example,  
the preprocessor symbol <a href="cppadvector.htm" target="_top"><span style='white-space: nowrap'>CppADvector</span></a>
 determines which
<a href="simplevector.htm" target="_top"><span style='white-space: nowrap'>SimpleVector</span></a>
 template class is used by CppAD.

<br>
<br>
<b><a name="Syntax.using namespace CppAD">using namespace CppAD</a></b>

<br>
If you use this compiler command,
you will not need to place <code><font color="blue">CppAD::</font></code> in front of
<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code> 
each time you use this template class.
The documentation for this template class is all relative to 
the <code><font color="blue">CppAD</font></code> namespace. 



<br>
<br>
<b><big><a name="Contents">Contents</a></big></b>
<br>
<table>
<tr><td><a href="_contents.htm" target="_top">_contents</a></td><td>Table&nbsp;of&nbsp;Contents</td></tr><tr><td><a href="license.htm" target="_top">License</a></td><td>Your&nbsp;License&nbsp;for&nbsp;the&nbsp;CppAD&nbsp;Software</td></tr><tr><td><a href="faq.htm" target="_top">Faq</a></td><td>Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers</td></tr><tr><td><a href="install.htm" target="_top">Install</a></td><td>Installing&nbsp;and&nbsp;Testing&nbsp;CppAD</td></tr><tr><td><a href="ad.htm" target="_top">AD</a></td><td>Using&nbsp;AD&nbsp;Class&nbsp;Objects</td></tr><tr><td><a href="vectortypes.htm" target="_top">VectorTypes</a></td><td>Different&nbsp;Types&nbsp;of&nbsp;Vectors</td></tr><tr><td><a href="adfun.htm" target="_top">ADFun</a></td><td>Constructing&nbsp;Differentiable&nbsp;Functions&nbsp;From&nbsp;The&nbsp;Tape</td></tr><tr><td><a href="library.htm" target="_top">library</a></td><td>The&nbsp;CppAD&nbsp;General&nbsp;Purpose&nbsp;Library</td></tr><tr><td><a href="cppaderror.htm" target="_top">CppADError</a></td><td>CppAD&nbsp;Error&nbsp;Detection&nbsp;and&nbsp;Reporting</td></tr><tr><td><a href="example.htm" target="_top">Example</a></td><td>General&nbsp;Purpose&nbsp;Examples</td></tr><tr><td><a href="appendix.htm" target="_top">Appendix</a></td><td>Appendix</td></tr><tr><td><a href="_reference.htm" target="_top">_reference</a></td><td>Alphabetic&nbsp;Listing&nbsp;of&nbsp;Cross&nbsp;Reference&nbsp;Tags</td></tr><tr><td><a href="_index.htm" target="_top">_index</a></td><td>Keyword&nbsp;Index</td></tr><tr><td><a href="_search.htm" target="_top">_search</a></td><td>Search&nbsp;This&nbsp;Web&nbsp;Site</td></tr><tr><td><a href="_external.htm" target="_top">_external</a></td><td>External&nbsp;Internet&nbsp;References</td></tr></table><code>
<span style='white-space: nowrap'><br>
%&nbsp;Latex&nbsp;macros&nbsp;used&nbsp;by&nbsp;CppAD&nbsp;documentation:<br>
<br>
\newcommand{\R}{&nbsp;{\bf&nbsp;R}&nbsp;}<br>
\newcommand{\C}{&nbsp;{\bf&nbsp;C}&nbsp;}<br>
\newcommand{\D}[2]{&nbsp;\frac{\partial&nbsp;#1}{\partial&nbsp;#2}&nbsp;}<br>
\newcommand{\DD}[3]{&nbsp;\frac{\partial^2&nbsp;#1}{\partial&nbsp;#2&nbsp;\partial&nbsp;#3}&nbsp;}<br>
\newcommand{\Dpow}[2]{&nbsp;\frac{\partial^{#1}}{\partial&nbsp;{#2}^{#1}}&nbsp;}<br>
<br>
</span></code>

<hr>Input File: Doc.omh

</body>
</html>
