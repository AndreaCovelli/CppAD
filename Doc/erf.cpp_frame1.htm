<html><head>
<title>The Error Function: Example and Test</title>
<meta name="description" content="The Error Function: Example and Test">
<meta name="keywords" content=" erf example test "><style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
</head>
<body>
<div align='right'><a href="erf.htm" target="_top">previous</a>
&nbsp;&nbsp;<a href="exp.htm" target="_top">next</a>
&nbsp;&nbsp;<a href="_contents.htm" target="_top">contents</a>
&nbsp;&nbsp;<a href="_reference.htm" target="_top">reference</a>
&nbsp;&nbsp;<a href="_index.htm" target="_top">index</a>
&nbsp;&nbsp;<a href="_search.htm" target="_top">search</a>
&nbsp;&nbsp;<a href="_external.htm" target="_top">external</a>
&nbsp;&nbsp;This:&nbsp;&nbsp;<a href="erf.cpp.htm" target="_top">section</a>, <a href="erf.cpp_frame1.htm" target="_top">frame</a></div>
<hr>


<center><b><big><big>The Error Function: Example and Test</big></big></b></center>
<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
#&nbsp;include&nbsp;&lt;CppAD/CppAD.h&gt;<br>
#&nbsp;include&nbsp;&lt;cmath&gt;<br>
<br>
bool&nbsp;Erf(void)<br>
{&nbsp;&nbsp;&nbsp;&nbsp;bool&nbsp;ok&nbsp;=&nbsp;true;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;using&nbsp;namespace&nbsp;CppAD;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;using&nbsp;CppAD::atan;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;using&nbsp;CppAD::exp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;using&nbsp;CppAD::sqrt;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Construct&nbsp;function&nbsp;object&nbsp;corresponding&nbsp;to&nbsp;erf<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppADvector&lt;&nbsp;AD&lt;double&gt;&nbsp;&gt;&nbsp;X(1);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppADvector&lt;&nbsp;AD&lt;double&gt;&nbsp;&gt;&nbsp;Y(1);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X[0]&nbsp;=&nbsp;0.;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Independent(X);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y[0]&nbsp;=&nbsp;erf(X[0]);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ADFun&lt;double&gt;&nbsp;Erf(X,&nbsp;Y);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;vectors&nbsp;to&nbsp;use&nbsp;with&nbsp;function&nbsp;object<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppADvector&lt;double&gt;&nbsp;x(1);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppADvector&lt;double&gt;&nbsp;y(1);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppADvector&lt;double&gt;&nbsp;dx(1);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppADvector&lt;double&gt;&nbsp;dy(1);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;check&nbsp;value&nbsp;at&nbsp;zero<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x[0]&nbsp;&nbsp;=&nbsp;0.;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;=&nbsp;Erf.Forward(0,&nbsp;x);&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;NearEqual(0.,&nbsp;y[0],&nbsp;1e-10,&nbsp;1e-10);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;check&nbsp;the&nbsp;derivative&nbsp;of&nbsp;error&nbsp;function<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dx[0]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;1.;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;pi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;4.&nbsp;*&nbsp;atan(1.);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;factor&nbsp;=&nbsp;2.&nbsp;/&nbsp;sqrt(&nbsp;pi&nbsp;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;i;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(i&nbsp;=&nbsp;-30;&nbsp;i&nbsp;&lt;=&nbsp;30;&nbsp;i++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;x[0]&nbsp;=&nbsp;i&nbsp;/&nbsp;4.;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Erf.Forward(0,&nbsp;x);&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;derf&nbsp;=&nbsp;factor&nbsp;*&nbsp;exp(&nbsp;-&nbsp;x[0]&nbsp;*&nbsp;x[0]&nbsp;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dy&nbsp;=&nbsp;Erf.Forward(1,&nbsp;dx);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;NearEqual(derf,&nbsp;dy[0],&nbsp;1e-10,&nbsp;1e-10);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;ok;<br>
}<br>
<br>
</span></font></code>
<hr>Input File: Example\Erf.cpp

</body>
</html>
