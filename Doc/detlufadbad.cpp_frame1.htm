<html><head>
<title>FADBAD &amp; CppAD Gradient of Determinant by Lu Factorization</title>
<meta name="description" content="FADBAD &amp; CppAD Gradient of Determinant by Lu Factorization">
<meta name="keywords" content=" Fadbad speed determinant Lu factor "><style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
</head>
<body>
<div align='right'><a href="detminorfadbad.cpp.htm" target="_top">previous</a>
&nbsp;&nbsp;<a href="glossary.htm" target="_top">next</a>
&nbsp;&nbsp;<a href="_contents.htm" target="_top">contents</a>
&nbsp;&nbsp;<a href="_reference.htm" target="_top">reference</a>
&nbsp;&nbsp;<a href="_index.htm" target="_top">index</a>
&nbsp;&nbsp;<a href="_search.htm" target="_top">search</a>
&nbsp;&nbsp;<a href="_external.htm" target="_top">external</a>
&nbsp;&nbsp;This:&nbsp;&nbsp;<a href="detlufadbad.cpp.htm" target="_top">section</a>, <a href="detlufadbad.cpp_frame1.htm" target="_top">frame</a></div>
<hr><center><b><big><big>FADBAD &amp; CppAD Gradient of Determinant by Lu Factorization</big></big></b></center>
<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
#&nbsp;include&nbsp;&quot;../Example/DetByLu.h&quot;<br>
#&nbsp;include&nbsp;&quot;../Example/NearEqualExt.h&quot;<br>
<br>
#&nbsp;include&nbsp;&lt;iostream.h&gt;<br>
#&nbsp;include&nbsp;&lt;FADBAD++/badiff.h&gt;<br>
<br>
void&nbsp;DetLuCp(size_t&nbsp;size,&nbsp;size_t&nbsp;repeat,&nbsp;CppADvector&lt;double&gt;&nbsp;&amp;u)<br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;using&nbsp;namespace&nbsp;CppAD;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;i;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;j;<br>
<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;-----------------------------------------------------<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Do&nbsp;this&nbsp;set&nbsp;up&nbsp;once&nbsp;so&nbsp;not&nbsp;significant&nbsp;in&nbsp;timing&nbsp;test<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;object&nbsp;for&nbsp;computing&nbsp;determinant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DetByLu&lt;&nbsp;AD&lt;double&gt;&nbsp;&gt;&nbsp;Det(size);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppADvector&lt;&nbsp;AD&lt;double&gt;&nbsp;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;detA(1);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppADvector&lt;&nbsp;AD&lt;double&gt;&nbsp;&gt;&nbsp;&nbsp;&nbsp;A(&nbsp;size&nbsp;*&nbsp;size&nbsp;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;size;&nbsp;i++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;A[&nbsp;i&nbsp;]&nbsp;=&nbsp;1.;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(j&nbsp;=&nbsp;1;&nbsp;j&nbsp;&lt;&nbsp;size;&nbsp;j++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i&nbsp;+&nbsp;j&nbsp;*&nbsp;size]&nbsp;=&nbsp;double(i)&nbsp;*&nbsp;A[&nbsp;i&nbsp;+&nbsp;(j-1)&nbsp;*&nbsp;size&nbsp;];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;vectors&nbsp;for&nbsp;reverse&nbsp;mode&nbsp;input&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppADvector&lt;double&gt;&nbsp;v(1);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[0]&nbsp;=&nbsp;1.;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;------------------------------------------------------<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(repeat--)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;declare&nbsp;independent&nbsp;variables<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Independent(A);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;compute&nbsp;the&nbsp;determinant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;detA[0]&nbsp;=&nbsp;Det(A);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;create&nbsp;function&nbsp;object&nbsp;f&nbsp;:&nbsp;A&nbsp;-&gt;&nbsp;detA<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ADFun&lt;double&gt;&nbsp;f(A,&nbsp;detA);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;evalute&nbsp;and&nbsp;return&nbsp;gradient&nbsp;using&nbsp;reverse&nbsp;mode<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;u&nbsp;=&nbsp;f.Reverse(1,&nbsp;v);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
}<br>
<br>
void&nbsp;DetLuFa(size_t&nbsp;size,&nbsp;size_t&nbsp;repeat,&nbsp;double&nbsp;*u)<br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;i;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;j;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;deta;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;-----------------------------------------------------<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Do&nbsp;this&nbsp;set&nbsp;up&nbsp;once&nbsp;so&nbsp;not&nbsp;significant&nbsp;in&nbsp;timing&nbsp;test<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;object&nbsp;for&nbsp;computing&nbsp;determinant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppAD::DetByLu&lt;&nbsp;B&lt;double&gt;&nbsp;&gt;&nbsp;Det(size);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B&lt;double&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;detA;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppADvector&lt;&nbsp;B&lt;double&gt;&nbsp;&gt;&nbsp;&nbsp;A(&nbsp;size&nbsp;*&nbsp;size&nbsp;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppADvector&lt;double&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a(&nbsp;size&nbsp;*&nbsp;size&nbsp;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;size;&nbsp;i++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;a[&nbsp;i&nbsp;]&nbsp;=&nbsp;1.;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(j&nbsp;=&nbsp;1;&nbsp;j&nbsp;&lt;&nbsp;size;&nbsp;j++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a[i&nbsp;+&nbsp;j&nbsp;*&nbsp;size]&nbsp;=&nbsp;double(i)&nbsp;*&nbsp;a[&nbsp;i&nbsp;+&nbsp;(j-1)&nbsp;*&nbsp;size&nbsp;];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;number&nbsp;of&nbsp;elements&nbsp;in&nbsp;A<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;&nbsp;length&nbsp;=&nbsp;size&nbsp;*&nbsp;size;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;------------------------------------------------------<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(repeat--)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;set&nbsp;independent&nbsp;variable&nbsp;values<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;length;&nbsp;i++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i]&nbsp;=&nbsp;a[i];<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;compute&nbsp;the&nbsp;determinant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;detA&nbsp;=&nbsp;Det(A);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;create&nbsp;function&nbsp;object&nbsp;f&nbsp;:&nbsp;A&nbsp;-&gt;&nbsp;detA<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;detA.diff(0,&nbsp;1);&nbsp;//&nbsp;only&nbsp;one&nbsp;dependent&nbsp;variable&nbsp;(index&nbsp;0)<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;evalute&nbsp;and&nbsp;return&nbsp;gradient&nbsp;using&nbsp;reverse&nbsp;mode<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;length;&nbsp;i++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;u[i]&nbsp;=&nbsp;A[i].d(0);&nbsp;//&nbsp;derivative&nbsp;of&nbsp;detA&nbsp;w.r.t&nbsp;a[i]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
}<br>
<br>
bool&nbsp;DetLu(void)<br>
{&nbsp;&nbsp;&nbsp;&nbsp;bool&nbsp;ok&nbsp;=&nbsp;true;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;size&nbsp;&nbsp;&nbsp;=&nbsp;2;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;repeat&nbsp;=&nbsp;1;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;*uFa&nbsp;=&nbsp;new&nbsp;double[size&nbsp;*&nbsp;size];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppADvector&lt;double&gt;&nbsp;uCp(size&nbsp;*&nbsp;size);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DetLuCp(size,&nbsp;repeat,&nbsp;uCp);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DetLuFa(size,&nbsp;repeat,&nbsp;uFa);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;i;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;size&nbsp;*&nbsp;size;&nbsp;i++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;CppAD::NearEqual(uCp[i],&nbsp;uFa[i],&nbsp;1e-12,&nbsp;1e-12);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delete&nbsp;[]&nbsp;uFa;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;ok;<br>
}<br>
std::string&nbsp;DetLuCp(size_t&nbsp;size,&nbsp;size_t&nbsp;repeat)<br>
{&nbsp;&nbsp;&nbsp;&nbsp;CppADvector&lt;double&gt;&nbsp;u(size&nbsp;*&nbsp;size);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DetLuCp(size,&nbsp;repeat,&nbsp;u);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&quot;CppAD:&nbsp;gradient&nbsp;of&nbsp;Determinant&nbsp;by&nbsp;Lu&nbsp;Factorization&quot;;<br>
}<br>
std::string&nbsp;DetLuFa(size_t&nbsp;size,&nbsp;size_t&nbsp;repeat)<br>
{&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;*u&nbsp;=&nbsp;new&nbsp;double[size&nbsp;*&nbsp;size];<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DetLuFa(size,&nbsp;repeat,&nbsp;u);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delete&nbsp;[]&nbsp;u;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&quot;FADBAD:&nbsp;gradient&nbsp;of&nbsp;Determinant&nbsp;by&nbsp;Lu&nbsp;Factorization&quot;;<br>
}<br>
<br>
</span></font></code>
<hr>Input File: FADBAD\DetLu.cpp

</body>
</html>
