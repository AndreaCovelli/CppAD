<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>CppAD::vector Source Code</title>
<meta name="description" content="CppAD::vector Source Code"/>
<meta name="keywords" content=" source Cppad::vector vector Cppad "/><style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
</head>
<body>
<div align='right'><a href="cppad_vector.cpp.xml" target="_top">previous</a>
&#xA0;&#xA0;<a href="nearequal.xml" target="_top">next</a>
&#xA0;&#xA0;<a href="_contents.xml" target="_top">contents</a>
&#xA0;&#xA0;<a href="_reference.xml" target="_top">reference</a>
&#xA0;&#xA0;<a href="_index.xml" target="_top">index</a>
&#xA0;&#xA0;<a href="_search.xml" target="_top">search</a>
&#xA0;&#xA0;<a href="_external.xml" target="_top">external</a>
&#xA0;&#xA0;This:&#xA0;&#xA0;<a href="cppad_vector.h.xml" target="_top">section</a>, <a href="cppad_vector.h_frame1.xml" target="_top">frame</a></div>
<hr/><center><b><big><big>CppAD::vector Source Code</big></big></b></center>
<code><font color="blue">
<span style='white-space: nowrap'><br/>
<br/>
#&#xA0;include&#xA0;&lt;cstddef&gt;<br/>
#&#xA0;include&#xA0;&lt;iostream&gt;<br/>
#&#xA0;include&#xA0;&lt;CppAD/CppADError.h&gt;<br/>
<br/>
#&#xA0;ifndef&#xA0;CppADNull<br/>
#&#xA0;define&#xA0;CppADNull&#xA0;0<br/>
#&#xA0;endif<br/>
<br/>
namespace&#xA0;CppAD&#xA0;{&#xA0;//&#xA0;&#xA0;BEGIN&#xA0;CppAD&#xA0;namespace<br/>
<br/>
template&#xA0;&lt;class&#xA0;Type&gt;<br/>
class&#xA0;vector&#xA0;{<br/>
private:<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;length;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Type&#xA0;&#xA0;&#xA0;*&#xA0;data;<br/>
public:<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;type&#xA0;of&#xA0;the&#xA0;elements&#xA0;in&#xA0;the&#xA0;vector<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;typedef&#xA0;Type&#xA0;value_type;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;default&#xA0;constructor<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;inline&#xA0;vector(void)&#xA0;:&#xA0;length(0)&#xA0;,&#xA0;data(CppADNull)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;constructor&#xA0;with&#xA0;a&#xA0;specified&#xA0;size<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;inline&#xA0;vector(size_t&#xA0;n)&#xA0;:&#xA0;length(n)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;if(&#xA0;length&#xA0;==&#xA0;0&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;data&#xA0;=&#xA0;CppADNull;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;else&#xA0;data&#xA0;=&#xA0;new&#xA0;Type[length];&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;copy&#xA0;constructor<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;inline&#xA0;vector(const&#xA0;vector&#xA0;&amp;x)&#xA0;:&#xA0;length(x.length)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;i;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if(&#xA0;length&#xA0;==&#xA0;0&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;data&#xA0;=&#xA0;CppADNull;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;else&#xA0;data&#xA0;=&#xA0;new&#xA0;Type[length];&#xA0;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;length;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;data[i]&#xA0;=&#xA0;x.data[i];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;destructor<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;~vector(void)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;delete&#xA0;[]&#xA0;data;&#xA0;}<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;size&#xA0;function<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;inline&#xA0;size_t&#xA0;size(void)&#xA0;const<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;length;&#xA0;}<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;resize&#xA0;function<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;inline&#xA0;void&#xA0;resize(size_t&#xA0;n)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;if(&#xA0;length&#xA0;&gt;&#xA0;0&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;delete&#xA0;[]&#xA0;data;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;length&#xA0;=&#xA0;n;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if(&#xA0;length&#xA0;&gt;&#xA0;0&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;data&#xA0;=&#xA0;new&#xA0;Type[length];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;else&#xA0;data&#xA0;=&#xA0;CppADNull;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;assignment&#xA0;operator<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;inline&#xA0;vector&#xA0;&amp;&#xA0;operator=(const&#xA0;vector&#xA0;&amp;x)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;i;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADUsageError(<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;length&#xA0;==&#xA0;x.length&#xA0;,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&quot;size&#xA0;miss&#xA0;match&#xA0;in&#xA0;assignment&#xA0;operation&quot;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;length;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;data[i]&#xA0;=&#xA0;x.data[i];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;*this;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;non-constant&#xA0;element&#xA0;access<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Type&#xA0;&amp;&#xA0;operator[](size_t&#xA0;i)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;CppADUsageError(<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;i&#xA0;&lt;&#xA0;length,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&quot;vector&#xA0;index&#xA0;greater&#xA0;than&#xA0;or&#xA0;equal&#xA0;vector&#xA0;size&quot;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;data[i];&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;constant&#xA0;element&#xA0;access<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;Type&#xA0;&amp;&#xA0;operator[](size_t&#xA0;i)&#xA0;const<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;CppADUsageError(<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;i&#xA0;&lt;&#xA0;length,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&quot;vector&#xA0;index&#xA0;greater&#xA0;than&#xA0;or&#xA0;equal&#xA0;vector&#xA0;size&quot;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;data[i];&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
};<br/>
//&#xA0;output&#xA0;operator<br/>
template&#xA0;&lt;class&#xA0;Type&gt;<br/>
inline&#xA0;std::ostream&amp;&#xA0;operator&#xA0;&lt;&lt;&#xA0;(<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;std::ostream&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&amp;os&#xA0;&#xA0;,&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;CppAD::vector&lt;Type&gt;&#xA0;&amp;vec&#xA0;)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;i&#xA0;=&#xA0;0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;n&#xA0;=&#xA0;vec.size();<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;os&#xA0;&lt;&lt;&#xA0;&quot;{&#xA0;&quot;;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;while(i&#xA0;&lt;&#xA0;n)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;os&#xA0;&lt;&lt;&#xA0;vec[i++];&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if(&#xA0;i&#xA0;&lt;&#xA0;n&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;os&#xA0;&lt;&lt;&#xA0;&quot;,&#xA0;&quot;;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;os&#xA0;&lt;&lt;&#xA0;&quot;&#xA0;}&quot;;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;os;<br/>
}<br/>
}&#xA0;//&#xA0;END&#xA0;CppAD&#xA0;namespace<br/>
<br/>
</span>
</font></code>

<hr/>Input File: CppAD\CppAD_vector.h

</body>
</html>
