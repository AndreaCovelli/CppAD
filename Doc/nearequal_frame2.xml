<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>Determine if Two Values Are Nearly Equal</title>
<meta name="description" content="Determine if Two Values Are Nearly Equal"/>
<meta name="keywords" content=" Nearequal double and complex equal near difference absolute or relative exercise "/><style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
</head>
<body>
<div align='right'>&#xA0;&#xA0;This:&#xA0;&#xA0;<a href="nearequal.xml" target="_top">section</a>, <a href="nearequal_frame2.xml" target="_top">frame</a></div>

<b><big><a name="Description">Description</a></big></b>
<br/>
The <code><font color="blue">NearEqual</font></code> function returns true,
if <i>x</i> and <i>y</i> are nearly equal.
Otherwise it returns false.

<br/>
<br/>
<b><big><a name="x, y">x, y</a></big></b>
<br/>
The argument <i>x</i> and <i>x</i> have the prototype
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;double&#xA0;&amp;</span></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;&amp;</span></font></code><i><span style='white-space: nowrap'>y</span></i><code><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>or they have the prototype
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;std::complex&lt;</span></font></code><i><span style='white-space: nowrap'>double</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;&#xA0;&amp;</span></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;&amp;</span></font></code><i><span style='white-space: nowrap'>y</span></i><code><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>These are the two values that are being compared to see
if they are nearly equal.

<br/>
<br/>
<b><big><a name="r">r</a></big></b>
<br/>
The relative error criteria <i>r</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;</span></font></code><i><span style='white-space: nowrap'>r</span></i><code><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>It must be greater than or equal to zero.
The relative error condition is defined as:

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mfrac><mrow><mo stretchy="false">|</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>y</mi>
<mo stretchy="false">|</mo>
</mrow>
<mrow><mo stretchy="false">|</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">|</mo>
<mo stretchy="false">+</mo>
<mo stretchy="false">|</mo>
<mi mathvariant='italic'>y</mi>
<mo stretchy="false">|</mo>
</mrow>
</mfrac>
<mo stretchy="false">&#x02264;</mo>
<mi mathvariant='italic'>r</mi>
</mrow></math>

<br/>
<b><big><a name="a">a</a></big></b>
<br/>
The absolute error criteria <i>a</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;</span></font></code><i><span style='white-space: nowrap'>a</span></i><code><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>It must be greater than or equal to zero.
The absolute error condition is defined as:

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mo stretchy="false">|</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>y</mi>
<mo stretchy="false">|</mo>
<mo stretchy="false">&#x02264;</mo>
<mi mathvariant='italic'>a</mi>
</mrow></math>

<br/>
<b><big><a name="b">b</a></big></b>
<br/>
The return value <i>b</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;</span></font></code><i><span style='white-space: nowrap'>b</span></i><code><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>If either <i>x</i> or <i>y</i> is infinite or not a number, 
the return value is false.
Otherwise, if either the relative or absolute error 
condition (defined above) is satisfied, the return value is true.
Otherwise, the return value is false.


<br/>
<br/>
<b><big><a name="Include Files">Include Files</a></big></b>
<br/>
The file <code><font color="blue">CppAD/NearEqual.h</font></code> is included by <code><font color="blue">CppAD/CppAD.h</font></code>
but it can also be included separately with out the rest of 
the <code><font color="blue">CppAD</font></code> routines.

<br/>
<br/>
<b><big><a name="Linkage">Linkage</a></big></b>
<br/>
The CppAD Unix installation
compiles this function and places the object
in the <code><font color="blue">CppAD.a</font></code> library; i.e., you will need the command
line argument <code><font color="blue">-lCppAD</font></code> when you link to this routine under Unix.
If you are using Microsoft visual studio,
you will have to include the file 
<code><font color="blue">lib/NearEqual.cpp</font></code> in your set of project source files.

<br/>
<br/>
<b><big><a name="Example">Example</a></big></b>

<br/>
The file <a href="near_equal.cpp.xml" target="_top"><span style='white-space: nowrap'>Near_Equal.cpp</span></a>
 contains an example
and test of <code><font color="blue">NearEqual</font></code>.
It return true if it succeeds and false otherwise.

<br/>
<br/>
<b><big><a name="Exercise">Exercise</a></big></b>

<br/>
Create and run a program that contains the following code:
<code><font color="blue">
<span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;std::complex;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;std::cout;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;std::endl;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;complex&lt;double&gt;&#xA0;one(1.,&#xA0;0),&#xA0;i(0.,&#xA0;1);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;complex&lt;double&gt;&#xA0;x&#xA0;=&#xA0;one&#xA0;/&#xA0;i;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;complex&lt;double&gt;&#xA0;y&#xA0;=&#xA0;-&#xA0;i;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;r&#xA0;=&#xA0;1e-12;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;a&#xA0;=&#xA0;0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;=&#xA0;CppAD::NearEqual(x,&#xA0;y,&#xA0;r,&#xA0;a);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if(&#xA0;ok&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;cout&#xA0;&lt;&lt;&#xA0;&quot;Ok&quot;&#xA0;&#xA0;&#xA0;&#xA0;&lt;&lt;&#xA0;endl;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;else&#xA0;cout&#xA0;&lt;&lt;&#xA0;&quot;Error&quot;&#xA0;&lt;&lt;&#xA0;endl;<br/>
</span>
</font></code>

<hr/>Input File: lib\NearEqual.cpp

</body>
</html>
