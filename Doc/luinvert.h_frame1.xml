<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>LuInvert Source Code</title>
<meta name="description" content="LuInvert Source Code"/>
<meta name="keywords" content=" Luinvert source matrix "/><style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
</head>
<body>
<div align='right'><a href="luinvert.cpp.xml" target="_top">previous</a>
&#xA0;&#xA0;<a href="runge45.xml" target="_top">next</a>
&#xA0;&#xA0;<a href="_contents.xml" target="_top">contents</a>
&#xA0;&#xA0;<a href="_reference.xml" target="_top">reference</a>
&#xA0;&#xA0;<a href="_index.xml" target="_top">index</a>
&#xA0;&#xA0;<a href="_search.xml" target="_top">search</a>
&#xA0;&#xA0;<a href="_external.xml" target="_top">external</a>
&#xA0;&#xA0;This:&#xA0;&#xA0;<a href="luinvert.h.xml" target="_top">section</a>, <a href="luinvert.h_frame1.xml" target="_top">frame</a></div>
<hr/>


<center><b><big><big>LuInvert Source Code</big></big></b></center>
<code><font color="blue">
<span style='white-space: nowrap'><br/>
<br/>
#&#xA0;include&#xA0;&lt;CppAD/CppADError.h&gt;<br/>
#&#xA0;include&#xA0;&lt;CppAD/CheckSimpleVector.h&gt;<br/>
<br/>
namespace&#xA0;CppAD&#xA0;{&#xA0;//&#xA0;BEGIN&#xA0;CppAD&#xA0;namespace<br/>
<br/>
//&#xA0;LuInvert<br/>
template&#xA0;&lt;typename&#xA0;SizeVector,&#xA0;typename&#xA0;FloatVector&gt;<br/>
void&#xA0;LuInvert(<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;SizeVector&#xA0;&#xA0;&amp;ip,&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;SizeVector&#xA0;&#xA0;&amp;jp,&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;FloatVector&#xA0;&amp;LU,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;FloatVector&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&amp;B&#xA0;)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;k;&#xA0;//&#xA0;column&#xA0;index&#xA0;in&#xA0;X<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;p;&#xA0;//&#xA0;index&#xA0;along&#xA0;diagonal&#xA0;in&#xA0;LU<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;i;&#xA0;//&#xA0;row&#xA0;index&#xA0;in&#xA0;LU&#xA0;and&#xA0;X<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;typedef&#xA0;typename&#xA0;FloatVector::value_type&#xA0;Float;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;check&#xA0;simple&#xA0;vector&#xA0;class&#xA0;specifications<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CheckSimpleVector&lt;Float,&#xA0;FloatVector&gt;();<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CheckSimpleVector&lt;size_t,&#xA0;SizeVector&gt;();<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Float&#xA0;etmp;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;n&#xA0;=&#xA0;ip.size();<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADUsageError(<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;jp.size()&#xA0;==&#xA0;n,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&quot;Error&#xA0;in&#xA0;LuInvert:&#xA0;jp&#xA0;must&#xA0;have&#xA0;size&#xA0;equal&#xA0;to&#xA0;n&#xA0;*&#xA0;n&quot;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADUsageError(<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;LU.size()&#xA0;==&#xA0;n&#xA0;*&#xA0;n,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&quot;Error&#xA0;in&#xA0;LuInvert:&#xA0;Lu&#xA0;must&#xA0;have&#xA0;size&#xA0;equal&#xA0;to&#xA0;n&#xA0;*&#xA0;m&quot;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;m&#xA0;=&#xA0;B.size()&#xA0;/&#xA0;n;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADUsageError(<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;B.size()&#xA0;==&#xA0;n&#xA0;*&#xA0;m,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&quot;Error&#xA0;in&#xA0;LuSolve:&#xA0;B&#xA0;must&#xA0;have&#xA0;size&#xA0;equal&#xA0;to&#xA0;a&#xA0;multiple&#xA0;of&#xA0;n&quot;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;temporary&#xA0;storage&#xA0;for&#xA0;reordered&#xA0;solution<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;FloatVector&#xA0;x(n);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;loop&#xA0;over&#xA0;equations<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(k&#xA0;=&#xA0;0;&#xA0;k&#xA0;&lt;&#xA0;m;&#xA0;k++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;invert&#xA0;the&#xA0;equation&#xA0;c&#xA0;=&#xA0;L&#xA0;*&#xA0;b<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(p&#xA0;=&#xA0;0;&#xA0;p&#xA0;&lt;&#xA0;n;&#xA0;p++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;solve&#xA0;for&#xA0;c[p]<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;etmp&#xA0;=&#xA0;B[&#xA0;ip[p]&#xA0;*&#xA0;m&#xA0;+&#xA0;k&#xA0;]&#xA0;/&#xA0;LU[&#xA0;ip[p]&#xA0;*&#xA0;n&#xA0;+&#xA0;jp[p]&#xA0;];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;B[&#xA0;ip[p]&#xA0;*&#xA0;m&#xA0;+&#xA0;k&#xA0;]&#xA0;=&#xA0;etmp;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;subtract&#xA0;off&#xA0;effect&#xA0;on&#xA0;other&#xA0;variables<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;p+1;&#xA0;i&#xA0;&lt;&#xA0;n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;B[&#xA0;ip[i]&#xA0;*&#xA0;m&#xA0;+&#xA0;k&#xA0;]&#xA0;-=<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;etmp&#xA0;*&#xA0;LU[&#xA0;ip[i]&#xA0;*&#xA0;n&#xA0;+&#xA0;jp[p]&#xA0;];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;invert&#xA0;the&#xA0;equation&#xA0;x&#xA0;=&#xA0;U&#xA0;*&#xA0;c<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;p&#xA0;=&#xA0;n;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;while(&#xA0;p&#xA0;&gt;&#xA0;0&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;--p;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;etmp&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;B[&#xA0;ip[p]&#xA0;*&#xA0;m&#xA0;+&#xA0;k&#xA0;];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x[&#xA0;jp[p]&#xA0;]&#xA0;=&#xA0;etmp;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;p;&#xA0;i++&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;B[&#xA0;ip[i]&#xA0;*&#xA0;m&#xA0;+&#xA0;k&#xA0;]&#xA0;-=&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;etmp&#xA0;*&#xA0;LU[&#xA0;ip[i]&#xA0;*&#xA0;n&#xA0;+&#xA0;jp[p]&#xA0;];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;copy&#xA0;reordered&#xA0;solution&#xA0;into&#xA0;B<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;B[i&#xA0;*&#xA0;m&#xA0;+&#xA0;k]&#xA0;=&#xA0;x[i];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return;<br/>
}<br/>
}&#xA0;//&#xA0;END&#xA0;CppAD&#xA0;namespace&#xA0;<br/>
</span>
</font></code>

<hr/>Input File: CppAD\LuInvert.h

</body>
</html>
