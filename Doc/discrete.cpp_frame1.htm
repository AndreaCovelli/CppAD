<html><head>
<title>User Defined Discrete Functions: Example and Test</title>
<meta name="description" content="User Defined Discrete Functions: Example and Test">
<meta name="keywords" content=" discrete example test "><style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
</head>
<body>
<div align='right'><a href="discrete.htm" target="_top">previous</a>
&nbsp;&nbsp;<a href="boolfun.htm" target="_top">next</a>
&nbsp;&nbsp;<a href="_contents.htm" target="_top">contents</a>
&nbsp;&nbsp;<a href="_reference.htm" target="_top">reference</a>
&nbsp;&nbsp;<a href="_index.htm" target="_top">index</a>
&nbsp;&nbsp;<a href="_search.htm" target="_top">search</a>
&nbsp;&nbsp;<a href="_external.htm" target="_top">external</a>
&nbsp;&nbsp;This:&nbsp;&nbsp;<a href="discrete.cpp.htm" target="_top">section</a>, <a href="discrete.cpp_frame1.htm" target="_top">frame</a></div>
<hr>

<center><b><big><big>User Defined Discrete Functions: Example and Test</big></big></b></center>
<code><font color="blue"><span style='white-space: nowrap'><br>
#&nbsp;include&nbsp;&lt;CppAD/CppAD.h&gt;<br>
<br>
namespace&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;TableOfValues[]&nbsp;=&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5.,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;TableLookup(const&nbsp;double&nbsp;&amp;x)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;i;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(&nbsp;x&nbsp;&lt;&nbsp;0.&nbsp;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;TableOfValues[0];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i&nbsp;=&nbsp;static_cast&lt;size_t&gt;(x);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(&nbsp;i&nbsp;&gt;=&nbsp;5&nbsp;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;TableOfValues[4];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;TableOfValues[i];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
}<br>
CppADCreateDiscrete(double,&nbsp;TableLookup)<br>
<br>
<br>
bool&nbsp;Discrete(void)<br>
{&nbsp;&nbsp;&nbsp;&nbsp;bool&nbsp;ok&nbsp;=&nbsp;true;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;using&nbsp;namespace&nbsp;CppAD;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;x&nbsp;=&nbsp;0;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;y&nbsp;=&nbsp;1;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;independent&nbsp;variable<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppADvector&lt;&nbsp;AD&lt;double&gt;&nbsp;&gt;&nbsp;V(2);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;V[x]&nbsp;=&nbsp;2.;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;V[y]&nbsp;=&nbsp;3.;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Independent(V);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;dependent&nbsp;variable<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppADvector&lt;&nbsp;AD&lt;double&gt;&nbsp;&gt;&nbsp;Z(1);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Z[0]&nbsp;=&nbsp;V[y]&nbsp;*&nbsp;TableLookup(&nbsp;V[x]&nbsp;);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;create&nbsp;f:&nbsp;V&nbsp;-&gt;&nbsp;Z&nbsp;and&nbsp;vector&nbsp;used&nbsp;for&nbsp;derivative&nbsp;calculations<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ADFun&lt;double&gt;&nbsp;f(V,&nbsp;Z);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppADvector&lt;double&gt;&nbsp;v(&nbsp;f.Domain()&nbsp;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppADvector&lt;double&gt;&nbsp;z(&nbsp;f.Range()&nbsp;);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppADvector&lt;double&gt;&nbsp;dv(&nbsp;f.Domain()&nbsp;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppADvector&lt;double&gt;&nbsp;dz(&nbsp;f.Range()&nbsp;);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;check&nbsp;value<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;(Z[0]&nbsp;==&nbsp;3.&nbsp;*&nbsp;TableOfValues[2]&nbsp;);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;evaluate&nbsp;function&nbsp;where&nbsp;x&nbsp;and&nbsp;y&nbsp;have&nbsp;a&nbsp;different&nbsp;value<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[x]&nbsp;=&nbsp;4.;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[y]&nbsp;=&nbsp;5.;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;f.Forward(0,&nbsp;v);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&nbsp;&nbsp;=&nbsp;(z[0]&nbsp;==&nbsp;5.&nbsp;*&nbsp;TableOfValues[4]);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;evaluate&nbsp;derivaitve&nbsp;of&nbsp;z&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dz[0]&nbsp;=&nbsp;1.;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dv&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;f.Reverse(1,&nbsp;dz);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&nbsp;&nbsp;&amp;=&nbsp;(dv[x]&nbsp;==&nbsp;0.);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&nbsp;&nbsp;&amp;=&nbsp;(dv[y]&nbsp;==&nbsp;TableOfValues[4]);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;ok;<br>
}<br>
<br>
</span></font></code>
<hr>Input File: Example\Discrete.cpp

</body>
</html>
