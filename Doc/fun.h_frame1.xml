<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>Differentiable Function Constructor: Example and Test</title>
<meta name="description" content="Differentiable Function Constructor: Example and Test"/>
<meta name="keywords" content=" Adfun example test "/><style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
</head>
<body>
<div align='right'><a href="hestimesdir.cpp.xml" target="_top">previous</a>
&#xA0;&#xA0;<a href="comparechange.cpp.xml" target="_top">next</a>
&#xA0;&#xA0;<a href="_contents.xml" target="_top">contents</a>
&#xA0;&#xA0;<a href="_reference.xml" target="_top">reference</a>
&#xA0;&#xA0;<a href="_index.xml" target="_top">index</a>
&#xA0;&#xA0;<a href="_search.xml" target="_top">search</a>
&#xA0;&#xA0;<a href="_external.xml" target="_top">external</a>
&#xA0;&#xA0;This:&#xA0;&#xA0;<a href="fun.h.xml" target="_top">section</a>, <a href="fun.h_frame1.xml" target="_top">frame</a></div>
<hr/><center><b><big><big>Differentiable Function Constructor: Example and Test</big></big></b></center>
<code><font color="blue"><span style='white-space: nowrap'><br/>
<br/>
#&#xA0;include&#xA0;&lt;CppAD/CppAD.h&gt;<br/>
<br/>
template&#xA0;&lt;typename&#xA0;VectorADdouble&gt;&#xA0;//&#xA0;vector&#xA0;class,&#xA0;elements&#xA0;of&#xA0;type&#xA0;AD&lt;double&gt;<br/>
bool&#xA0;Fun(void)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;ok&#xA0;=&#xA0;true;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;namespace&#xA0;CppAD;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;create&#xA0;independent&#xA0;variable&#xA0;vector&#xA0;with&#xA0;assigned&#xA0;values<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;VectorADdouble&#xA0;X(3);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;X[0]&#xA0;=&#xA0;0.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;X[1]&#xA0;=&#xA0;-1.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;X[2]&#xA0;=&#xA0;2.;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;declare&#xA0;the&#xA0;independent&#xA0;variables&#xA0;and&#xA0;start&#xA0;recording<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Independent(X);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;square&#xA0;root&#xA0;of&#xA0;the&#xA0;discriminant&#xA0;for&#xA0;the&#xA0;quadratic&#xA0;equation<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;0&#xA0;=&#xA0;&#xA0;x[0]&#xA0;+&#xA0;x[1]&#xA0;*&#xA0;y&#xA0;+&#xA0;x[2]&#xA0;*&#xA0;y^2&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;AD&lt;double&gt;&#xA0;RootD&#xA0;=&#xA0;sqrt(&#xA0;X[1]&#xA0;*&#xA0;X[1]&#xA0;-&#xA0;4.&#xA0;*&#xA0;X[2]&#xA0;*&#xA0;X[0]&#xA0;);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;compute&#xA0;the&#xA0;two&#xA0;solutions&#xA0;of&#xA0;the&#xA0;quadratic&#xA0;equation<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;VectorADdouble&#xA0;Y(2);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Y[0]&#xA0;=&#xA0;(-&#xA0;X[1]&#xA0;+&#xA0;RootD&#xA0;)&#xA0;/&#xA0;(2.&#xA0;*&#xA0;X[2]);&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Y[1]&#xA0;=&#xA0;(-&#xA0;X[1]&#xA0;-&#xA0;RootD&#xA0;)&#xA0;/&#xA0;(2.&#xA0;*&#xA0;X[2]);&#xA0;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;stop&#xA0;recording&#xA0;and&#xA0;create&#xA0;function&#xA0;object&#xA0;F&#xA0;:&#xA0;X&#xA0;-&gt;&#xA0;Y<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ADFun&lt;double&gt;&#xA0;F(X,&#xA0;Y);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(F.Order()&#xA0;==&#xA0;0&#xA0;);&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;initial&#xA0;value<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(F.Domain()&#xA0;==&#xA0;X.size());&#xA0;&#xA0;//&#xA0;never&#xA0;changes<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(F.Range()&#xA0;==&#xA0;Y.size());&#xA0;&#xA0;&#xA0;//&#xA0;never&#xA0;changes<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;ok;<br/>
<br/>
}<br/>
</span></font></code>
<hr/>Input File: Example\Fun.h

</body>
</html>
