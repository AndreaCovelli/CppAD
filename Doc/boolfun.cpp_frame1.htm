<html><head>
<title>Defining Boolean Functions with AD Arguments: Example and Test</title>
<meta name="description" content="Defining Boolean Functions with AD Arguments: Example and Test">
<meta name="keywords" content=" Isreal Absgeq complex boolean computed add example test "><style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
</head>
<body>
<div align='right'><a href="boolfun.htm" target="_top">previous</a>
&nbsp;&nbsp;<a href="vectortypes.htm" target="_top">next</a>
&nbsp;&nbsp;<a href="_contents.htm" target="_top">contents</a>
&nbsp;&nbsp;<a href="_reference.htm" target="_top">reference</a>
&nbsp;&nbsp;<a href="_index.htm" target="_top">index</a>
&nbsp;&nbsp;<a href="_search.htm" target="_top">search</a>
&nbsp;&nbsp;<a href="_external.htm" target="_top">external</a>
&nbsp;&nbsp;This:&nbsp;&nbsp;<a href="boolfun.cpp.htm" target="_top">section</a>, <a href="boolfun.cpp_frame1.htm" target="_top">frame</a></div>
<hr>


<center><b><big><big>Defining Boolean Functions with AD Arguments: Example and Test</big></big></b></center>
<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
#&nbsp;include&nbsp;&lt;CppAD/CppAD.h&gt;<br>
#&nbsp;include&nbsp;&lt;complex&gt;<br>
<br>
//&nbsp;define&nbsp;abbreviation&nbsp;for&nbsp;double&nbsp;precision&nbsp;complex&nbsp;<br>
typedef&nbsp;std::complex&lt;double&gt;&nbsp;Complex;<br>
<br>
namespace&nbsp;{&nbsp;//&nbsp;place&nbsp;these&nbsp;functions&nbsp;in&nbsp;the&nbsp;empty&nbsp;namespace<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;create&nbsp;Complex&nbsp;and&nbsp;AD&lt;Complex&gt;&nbsp;versions&nbsp;of&nbsp;IsReal<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;bool&nbsp;IsReal(const&nbsp;Complex&nbsp;&amp;x)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;x.imag()&nbsp;==&nbsp;0.;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppADCreateUnaryBool(Complex,&nbsp;IsReal)<br>
<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;create&nbsp;Complex&nbsp;and&nbsp;AD&lt;Complex&gt;&nbsp;versions&nbsp;of&nbsp;AbsGeq<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;bool&nbsp;AbsGeq(const&nbsp;Complex&nbsp;&amp;x,&nbsp;const&nbsp;Complex&nbsp;&amp;y)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;axsq&nbsp;=&nbsp;x.real()&nbsp;*&nbsp;x.real()&nbsp;+&nbsp;x.imag()&nbsp;*&nbsp;x.imag();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;aysq&nbsp;=&nbsp;y.real()&nbsp;*&nbsp;y.real()&nbsp;+&nbsp;y.imag()&nbsp;*&nbsp;y.imag();<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;axsq&nbsp;&gt;=&nbsp;aysq;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppADCreateBinaryBool(Complex,&nbsp;AbsGeq)<br>
}<br>
<br>
bool&nbsp;BoolFun(void)<br>
{&nbsp;&nbsp;&nbsp;&nbsp;bool&nbsp;ok&nbsp;=&nbsp;true;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppAD::AD&lt;Complex&gt;&nbsp;x&nbsp;=&nbsp;Complex(1.,&nbsp;&nbsp;0.);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppAD::AD&lt;Complex&gt;&nbsp;y&nbsp;=&nbsp;Complex(1.,&nbsp;&nbsp;1.);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;IsReal(x);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;!&nbsp;AbsGeq(x,&nbsp;y);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;ok;<br>
}<br>
<br>
</span></font></code>
<hr>Input File: Example\BoolFun.cpp

</body>
</html>
