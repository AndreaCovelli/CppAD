<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>Alphabetic Listing of Cross Reference Tags</title>
<meta name="description" content="Alphabetic Listing of Cross Reference Tags"/><style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
</head>
<body>
<div align='right'><a href="whatsnew03.xml" target="_top">previous</a>
&#xA0;&#xA0;<a href="_index.xml" target="_top">next</a>
&#xA0;&#xA0;<a href="_contents.xml" target="_top">contents</a>
&#xA0;&#xA0;reference&#xA0;&#xA0;<a href="_index.xml" target="_top">index</a>
&#xA0;&#xA0;<a href="_search.xml" target="_top">search</a>
&#xA0;&#xA0;<a href="_external.xml" target="_top">external</a>
&#xA0;&#xA0;This:&#xA0;&#xA0;<a href="_reference.xml" target="_top">section</a>, <a href="_reference_frame1.xml" target="_top">frame</a></div>
<hr/><center><b><big><big>Alphabetic Listing of Cross Reference Tags</big></big></b></center>
<table>
<tr valign="top"><td>

<b><big><a name="A">A</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="abs.xml" target="_top">Abs</a><br/> </td><td> The Absolute Value Function </td></tr><tr valign="top"><td>
<a href="abs.cpp.xml" target="_top">Abs.cpp</a><br/> </td><td> The Absolute Value Function: Example and Test </td></tr><tr valign="top"><td>
<a href="acos.xml" target="_top">Acos</a><br/> </td><td> The Inverse Cosine Function </td></tr><tr valign="top"><td>
<a href="acos.cpp.xml" target="_top">Acos.cpp</a><br/> </td><td> The Acos Function: Example and Test </td></tr><tr valign="top"><td>
<a href="acosforward.xml" target="_top">AcosForward</a><br/> </td><td> Arccosine Function Forward Taylor Polynomial Theory </td></tr><tr valign="top"><td>
<a href="acosreverse.xml" target="_top">AcosReverse</a><br/> </td><td> Arccosine Function Reverse Mode Theory </td></tr><tr valign="top"><td>
<a href="ad.xml" target="_top">AD</a><br/> </td><td> Using AD Class Objects </td></tr><tr valign="top"><td>
<a href="add.xml" target="_top">Add</a><br/> </td><td> The AD Binary Addition Operator </td></tr><tr valign="top"><td>
<a href="add.cpp.xml" target="_top">Add.cpp</a><br/> </td><td> Binary Addition: Example and Test </td></tr><tr valign="top"><td>
<a href="addeq.xml" target="_top">AddEq</a><br/> </td><td> The AD Addition Computed Assignment Operator </td></tr><tr valign="top"><td>
<a href="addeq.cpp.xml" target="_top">AddEq.cpp</a><br/> </td><td> Addition Computed Assignment: Example and Test </td></tr><tr valign="top"><td>
<a href="adfun.xml" target="_top">ADFun</a><br/> </td><td> Constructing Differentiable Functions From The Tape </td></tr><tr valign="top"><td>
<a href="adolc.xml" target="_top">ADOLC</a><br/> </td><td> Routines for Comparing CppAD with ADOLC </td></tr><tr valign="top"><td>
<a href="appendix.xml" target="_top">Appendix</a><br/> </td><td> Appendix </td></tr><tr valign="top"><td>
<a href="asin.xml" target="_top">Asin</a><br/> </td><td> The Inverse Sine Function </td></tr><tr valign="top"><td>
<a href="asin.cpp.xml" target="_top">Asin.cpp</a><br/> </td><td> The Asin Function: Example and Test </td></tr><tr valign="top"><td>
<a href="asinforward.xml" target="_top">AsinForward</a><br/> </td><td> Arcsine Function Forward Taylor Polynomial Theory </td></tr><tr valign="top"><td>
<a href="asinreverse.xml" target="_top">AsinReverse</a><br/> </td><td> Arcsine Function Reverse Mode Theory </td></tr><tr valign="top"><td>
<a href="atan.xml" target="_top">Atan</a><br/> </td><td> The Inverse Tangent Function </td></tr><tr valign="top"><td>
<a href="atan.cpp.xml" target="_top">Atan.cpp</a><br/> </td><td> The Atan Function: Example and Test </td></tr><tr valign="top"><td>
<a href="atan2.xml" target="_top">Atan2</a><br/> </td><td> The Two Argument Inverse Tangent Function </td></tr><tr valign="top"><td>
<a href="atan2.cpp.xml" target="_top">Atan2.cpp</a><br/> </td><td> The Two Argument Inverse Tangent: Example and Test </td></tr><tr valign="top"><td>
<a href="atanforward.xml" target="_top">AtanForward</a><br/> </td><td> Arctangent Function Forward Taylor Polynomial Theory </td></tr><tr valign="top"><td>
<a href="atanreverse.xml" target="_top">AtanReverse</a><br/> </td><td> Arctangent Function Reverse Mode Theory </td></tr><tr valign="top"><td>

<b><big><a name="B">B</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="bib.xml" target="_top">Bib</a><br/> </td><td> Bibliography </td></tr><tr valign="top"><td>
<a href="binaryop.xml" target="_top">BinaryOp</a><br/> </td><td> Base Type Binary Operators </td></tr><tr valign="top"><td>
<a href="boolfun.xml" target="_top">BoolFun</a><br/> </td><td> Defining Boolean Functions with AD Arguments </td></tr><tr valign="top"><td>
<a href="boolfun.cpp.xml" target="_top">BoolFun.cpp</a><br/> </td><td> Defining Boolean Functions with AD Arguments: Example and Test </td></tr><tr valign="top"><td>

<b><big><a name="C">C</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="checksimplevector.xml" target="_top">CheckSimpleVector</a><br/> </td><td> Check Simple Vector Concept </td></tr><tr valign="top"><td>
<a href="checksimplevector.cpp.xml" target="_top">CheckSimpleVector.cpp</a><br/> </td><td> The CheckSimpleVector Function: Example and Test </td></tr><tr valign="top"><td>
<a href="compare.xml" target="_top">Compare</a><br/> </td><td> The AD Comparison Operators </td></tr><tr valign="top"><td>
<a href="compare.cpp.xml" target="_top">Compare.cpp</a><br/> </td><td> AD Comparison Operators: Example and Test </td></tr><tr valign="top"><td>
<a href="comparechange.cpp.xml" target="_top">CompareChange.cpp</a><br/> </td><td> CompareChange Function: Example and Test </td></tr><tr valign="top"><td>
<a href="compeq.xml" target="_top">CompEq</a><br/> </td><td> Computed Assignment Operators </td></tr><tr valign="top"><td>
<a href="complexpoly.cpp.xml" target="_top">ComplexPoly.cpp</a><br/> </td><td> Complex Polynomial: Example and Test </td></tr><tr valign="top"><td>
<a href="condexp.xml" target="_top">CondExp</a><br/> </td><td> The Conditional Expression Function </td></tr><tr valign="top"><td>
<a href="condexp.cpp.xml" target="_top">CondExp.cpp</a><br/> </td><td> Conditional Expressions: Example and Test </td></tr><tr valign="top"><td>
<a href="copy.xml" target="_top">Copy</a><br/> </td><td> Creating A Copy of an AD Variable </td></tr><tr valign="top"><td>
<a href="copy.cpp.xml" target="_top">Copy.cpp</a><br/> </td><td> AD Copy Constructor: Example and Test </td></tr><tr valign="top"><td>
<a href="cos.xml" target="_top">Cos</a><br/> </td><td> The Cosine Function </td></tr><tr valign="top"><td>
<a href="cos.cpp.xml" target="_top">Cos.cpp</a><br/> </td><td> The Cosine Function: Example and Test </td></tr><tr valign="top"><td>
<a href="cosforward.xml" target="_top">CosForward</a><br/> </td><td> Cosine Function Forward Taylor Polynomial Theory </td></tr><tr valign="top"><td>
<a href="cppad.xml" target="_top">CppAD</a><br/> </td><td> A Package for Differentiation of C++ Algorithms: CppAD Version 05-07-05 </td></tr><tr valign="top"><td>
<a href="cppad_vector.xml" target="_top">CppAD_vector</a><br/> </td><td> The CppAD::vector Template Class </td></tr><tr valign="top"><td>
<a href="cppad_vector.cpp.xml" target="_top">CppAD_vector.cpp</a><br/> </td><td> CppAD::vector Template Class: Example and Test </td></tr><tr valign="top"><td>
<a href="cppad_vector.h.xml" target="_top">CppAD_vector.h</a><br/> </td><td> CppAD::vector Source Code </td></tr><tr valign="top"><td>
<a href="cppaderror.xml" target="_top">CppADError</a><br/> </td><td> CppAD Error Detection and Reporting </td></tr><tr valign="top"><td>
<a href="cppadvector.xml" target="_top">CppADvector</a><br/> </td><td> Choosing The CppADvector Template Class </td></tr><tr valign="top"><td>

<b><big><a name="D">D</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="default.xml" target="_top">Default</a><br/> </td><td> The Default AD Constructor </td></tr><tr valign="top"><td>
<a href="default.cpp.xml" target="_top">Default.cpp</a><br/> </td><td> Default AD Constructor: Example and Test </td></tr><tr valign="top"><td>
<a href="detbylu.xml" target="_top">DetByLu</a><br/> </td><td> Determinant Using Lu Factorization </td></tr><tr valign="top"><td>
<a href="detbylu.cpp.xml" target="_top">DetByLu.cpp</a><br/> </td><td> Determinant Using Lu Factorization: Example and Test </td></tr><tr valign="top"><td>
<a href="detbylu.h.xml" target="_top">DetByLu.h</a><br/> </td><td> Determinant using Lu Factorization: Source Code </td></tr><tr valign="top"><td>
<a href="detbyminor.xml" target="_top">DetByMinor</a><br/> </td><td> Determinant Using Expansion by Minors </td></tr><tr valign="top"><td>
<a href="detbyminor.cpp.xml" target="_top">DetByMinor.cpp</a><br/> </td><td> Determinant Using Expansion by Minors: Example and Test </td></tr><tr valign="top"><td>
<a href="detbyminor.h.xml" target="_top">DetByMinor.h</a><br/> </td><td> Determinant using Expansion by Minors: Source Code </td></tr><tr valign="top"><td>
<a href="detluadolc.cpp.xml" target="_top">DetLuADOLC.cpp</a><br/> </td><td> ADOLC &amp; CppAD Gradient of Determinant by Lu Factorization </td></tr><tr valign="top"><td>
<a href="detlufadbad.cpp.xml" target="_top">DetLuFADBAD.cpp</a><br/> </td><td> FADBAD &amp; CppAD Gradient of Determinant by Lu Factorization </td></tr><tr valign="top"><td>
<a href="detluspeed.cpp.xml" target="_top">DetLuSpeed.cpp</a><br/> </td><td> Determinant by Lu Factor and Solve: Speed Test </td></tr><tr valign="top"><td>
<a href="detminoradolc.cpp.xml" target="_top">DetMinorADOLC.cpp</a><br/> </td><td> ADOLC &amp; CppAD Gradient of Determinant by Minors </td></tr><tr valign="top"><td>
<a href="detminorfadbad.cpp.xml" target="_top">DetMinorFADBAD.cpp</a><br/> </td><td> FADBAD &amp; CppAD Gradient of Determinant by Minors </td></tr><tr valign="top"><td>
<a href="detminorspeed.cpp.xml" target="_top">DetMinorSpeed.cpp</a><br/> </td><td> Determinant Using Expansion by Minors: Speed Test </td></tr><tr valign="top"><td>
<a href="detofminor.xml" target="_top">DetOfMinor</a><br/> </td><td> Compute the Determinant of a Minor </td></tr><tr valign="top"><td>
<a href="detofminor.cpp.xml" target="_top">DetOfMinor.cpp</a><br/> </td><td> Determinant of a Minor: Example and Test </td></tr><tr valign="top"><td>
<a href="detofminor.h.xml" target="_top">DetOfMinor.h</a><br/> </td><td> Compute the Determinant of a Minor: Source Code </td></tr><tr valign="top"><td>
<a href="discrete.xml" target="_top">Discrete</a><br/> </td><td> User Defined Discrete Functions </td></tr><tr valign="top"><td>
<a href="discrete.cpp.xml" target="_top">Discrete.cpp</a><br/> </td><td> User Defined Discrete Functions: Example and Test </td></tr><tr valign="top"><td>
<a href="div.xml" target="_top">Div</a><br/> </td><td> The AD Binary Division Operator </td></tr><tr valign="top"><td>
<a href="div.cpp.xml" target="_top">Div.cpp</a><br/> </td><td> Binary Division: Example and Test </td></tr><tr valign="top"><td>
<a href="diveq.xml" target="_top">DivEq</a><br/> </td><td> The AD Division Computed Assignment Operator </td></tr><tr valign="top"><td>
<a href="diveq.cpp.xml" target="_top">DivEq.cpp</a><br/> </td><td> Division Computed Assignment: Example and Test </td></tr><tr valign="top"><td>
<a href="drivers.xml" target="_top">Drivers</a><br/> </td><td> First and Second Derivatives: Easy Drivers </td></tr><tr valign="top"><td>

<b><big><a name="E">E</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="eq.xml" target="_top">Eq</a><br/> </td><td> The AD Assignment Operator </td></tr><tr valign="top"><td>
<a href="eq.cpp.xml" target="_top">Eq.cpp</a><br/> </td><td> AD Assignment Operator: Example and Test </td></tr><tr valign="top"><td>
<a href="erf.xml" target="_top">erf</a><br/> </td><td> Error Function </td></tr><tr valign="top"><td>
<a href="erf.cpp.xml" target="_top">Erf.cpp</a><br/> </td><td> The Error Function: Example and Test </td></tr><tr valign="top"><td>
<a href="example.xml" target="_top">Example</a><br/> </td><td> General Purpose Examples </td></tr><tr valign="top"><td>
<a href="example.cpp.xml" target="_top">Example.cpp</a><br/> </td><td> Program That Runs the CppAD Example Suite </td></tr><tr valign="top"><td>
<a href="exampleadolc.cpp.xml" target="_top">ExampleADOLC.cpp</a><br/> </td><td> Compare ADOLC and CppAD Results </td></tr><tr valign="top"><td>
<a href="examplefadbad.cpp.xml" target="_top">ExampleFADBAD.cpp</a><br/> </td><td> Compare FADBAD and CppAD Results </td></tr><tr valign="top"><td>
<a href="exampleutility.xml" target="_top">ExampleUtility</a><br/> </td><td> Utility Routines used by CppAD Examples </td></tr><tr valign="top"><td>
<a href="exp.xml" target="_top">Exp</a><br/> </td><td> The Exponential Function </td></tr><tr valign="top"><td>
<a href="exp.cpp.xml" target="_top">Exp.cpp</a><br/> </td><td> The Exponential Function: Example and Test </td></tr><tr valign="top"><td>
<a href="expforward.xml" target="_top">ExpForward</a><br/> </td><td> Exponential Function Forward Taylor Polynomial Theory </td></tr><tr valign="top"><td>
<a href="expreverse.xml" target="_top">ExpReverse</a><br/> </td><td> Exponential Function Reverse Mode Theory </td></tr><tr valign="top"><td>

<b><big><a name="F">F</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="fadbad.xml" target="_top">FADBAD</a><br/> </td><td> Routines for Comparing CppAD with FADBAD </td></tr><tr valign="top"><td>
<a href="faq.xml" target="_top">Faq</a><br/> </td><td> Frequently Asked Questions and Answers </td></tr><tr valign="top"><td>
<a href="forone.xml" target="_top">ForOne</a><br/> </td><td> Partial w.r.t One Domain Component: Forward Mode Easy Driver </td></tr><tr valign="top"><td>
<a href="forone.h.xml" target="_top">ForOne.h</a><br/> </td><td> Partial w.r.t One Domain Component: Example and Test </td></tr><tr valign="top"><td>
<a href="fortwo.xml" target="_top">ForTwo</a><br/> </td><td> Subset of Second Partial Derivatives: Forward Mode Easy Driver </td></tr><tr valign="top"><td>
<a href="fortwo.h.xml" target="_top">ForTwo.h</a><br/> </td><td> Subset of Second Order Partials: Example and Test </td></tr><tr valign="top"><td>
<a href="forward.xml" target="_top">Forward</a><br/> </td><td> Forward Mode </td></tr><tr valign="top"><td>
<a href="forward.h.xml" target="_top">Forward.h</a><br/> </td><td> Forward Mode: Example and Test </td></tr><tr valign="top"><td>
<a href="forwardtheory.xml" target="_top">ForwardTheory</a><br/> </td><td> The Theory of Forward Mode </td></tr><tr valign="top"><td>
<a href="frombase.xml" target="_top">FromBase</a><br/> </td><td> Construct An AD Object From its Base Type </td></tr><tr valign="top"><td>
<a href="frombase.cpp.xml" target="_top">FromBase.cpp</a><br/> </td><td> AD Constructor From Base Type: Example and Test </td></tr><tr valign="top"><td>
<a href="fun.h.xml" target="_top">Fun.h</a><br/> </td><td> Differentiable Function Constructor: Example and Test </td></tr><tr valign="top"><td>

<b><big><a name="G">G</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="getstarted.cpp.xml" target="_top">GetStarted.cpp</a><br/> </td><td> Getting Started Using CppAD With A Polynomial Example </td></tr><tr valign="top"><td>
<a href="glossary.xml" target="_top">glossary</a><br/> </td><td> Glossary </td></tr><tr valign="top"><td>

<b><big><a name="H">H</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="hesludet.cpp.xml" target="_top">HesLuDet.cpp</a><br/> </td><td> Gradient of Determinant Using LU Factorization: Example and Test </td></tr><tr valign="top"><td>
<a href="hesminordet.cpp.xml" target="_top">HesMinorDet.cpp</a><br/> </td><td> Gradient of Determinant Using Expansion by Minors: Example and Test </td></tr><tr valign="top"><td>
<a href="hessian.xml" target="_top">Hessian</a><br/> </td><td> Hessian of One Component: Easy Driver </td></tr><tr valign="top"><td>
<a href="hessian.h.xml" target="_top">Hessian.h</a><br/> </td><td> Hessian of Scalar Valued Function: Example and Test </td></tr><tr valign="top"><td>
<a href="hestimesdir.cpp.xml" target="_top">HesTimesDir.cpp</a><br/> </td><td> Hessian Times Direction: Example and Test </td></tr><tr valign="top"><td>

<b><big><a name="I">I</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="independent.xml" target="_top">Independent</a><br/> </td><td> Declare Independent Variables and Start Recording </td></tr><tr valign="top"><td>
<a href="install.xml" target="_top">Install</a><br/> </td><td> Installing and Testing CppAD </td></tr><tr valign="top"><td>
<a href="installunix.xml" target="_top">InstallUnix</a><br/> </td><td> Unix Installation and Testing </td></tr><tr valign="top"><td>
<a href="installwindows.xml" target="_top">InstallWindows</a><br/> </td><td> Windows Installation and Testing </td></tr><tr valign="top"><td>

<b><big><a name="J">J</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="jacludet.cpp.xml" target="_top">JacLuDet.cpp</a><br/> </td><td> Gradient of Determinant Using Lu Factorization: Example and Test </td></tr><tr valign="top"><td>
<a href="jacminordet.cpp.xml" target="_top">JacMinorDet.cpp</a><br/> </td><td> Gradient of Determinant Using Expansion by Minors: Example and Test </td></tr><tr valign="top"><td>
<a href="jacobian.xml" target="_top">Jacobian</a><br/> </td><td> Jacobian: Easy Driver </td></tr><tr valign="top"><td>
<a href="jacobian.h.xml" target="_top">Jacobian.h</a><br/> </td><td> Derivative of Vector Valued Function: Example and Test </td></tr><tr valign="top"><td>

<b><big><a name="L">L</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="library.xml" target="_top">library</a><br/> </td><td> The CppAD General Purpose Library </td></tr><tr valign="top"><td>
<a href="license.xml" target="_top">License</a><br/> </td><td> Your License for the CppAD Software </td></tr><tr valign="top"><td>
<a href="listallexamples.xml" target="_top">ListAllExamples</a><br/> </td><td> List of All the CppAD Examples </td></tr><tr valign="top"><td>
<a href="log.xml" target="_top">Log</a><br/> </td><td> The Logarithm Function </td></tr><tr valign="top"><td>
<a href="log.cpp.xml" target="_top">Log.cpp</a><br/> </td><td> The Logarithm Function: Example and Test </td></tr><tr valign="top"><td>
<a href="log10.xml" target="_top">Log10</a><br/> </td><td> The Log Base 10 Function </td></tr><tr valign="top"><td>
<a href="log10.cpp.xml" target="_top">Log10.cpp</a><br/> </td><td> The Base 10 Logarithm Function: Example and Test </td></tr><tr valign="top"><td>
<a href="logforward.xml" target="_top">LogForward</a><br/> </td><td> Logarithm Function Forward Taylor Polynomial Theory </td></tr><tr valign="top"><td>
<a href="logreverse.xml" target="_top">LogReverse</a><br/> </td><td> Logarithm Function Reverse Mode Theory </td></tr><tr valign="top"><td>
<a href="ludetandsolve.xml" target="_top">LuDetAndSolve</a><br/> </td><td> Compute Determinants and Solve Equations by LU Factorization </td></tr><tr valign="top"><td>
<a href="lufactor.xml" target="_top">LuFactor</a><br/> </td><td> LU Factorization of A Square Matrix </td></tr><tr valign="top"><td>
<a href="lufactor.cpp.xml" target="_top">LuFactor.cpp</a><br/> </td><td> LuFactor: Example and Test </td></tr><tr valign="top"><td>
<a href="lufactor.h.xml" target="_top">LuFactor.h</a><br/> </td><td> LuFactor Source Code </td></tr><tr valign="top"><td>
<a href="luinvert.xml" target="_top">LuInvert</a><br/> </td><td> Invert an LU Factored Equation </td></tr><tr valign="top"><td>
<a href="luinvert.cpp.xml" target="_top">LuInvert.cpp</a><br/> </td><td> LuInvert: Example and Test </td></tr><tr valign="top"><td>
<a href="luinvert.h.xml" target="_top">LuInvert.h</a><br/> </td><td> LuInvert Source Code </td></tr><tr valign="top"><td>
<a href="lusolve.xml" target="_top">LuSolve</a><br/> </td><td> Compute Determinant and Solve Linear Equations </td></tr><tr valign="top"><td>
<a href="lusolve.cpp.xml" target="_top">LuSolve.cpp</a><br/> </td><td> LuSolve With Complex Arguments: Example and Test </td></tr><tr valign="top"><td>
<a href="lusolve.h.xml" target="_top">LuSolve.h</a><br/> </td><td> LuSolve Source Code </td></tr><tr valign="top"><td>
<a href="lusolvespeed.cpp.xml" target="_top">LuSolveSpeed.cpp</a><br/> </td><td> Speed Test Lu Factor and Solve: Example and Test </td></tr><tr valign="top"><td>
<a href="luvecad.xml" target="_top">LuVecAD</a><br/> </td><td> Lu Factor and Solve with Recorded Pivoting </td></tr><tr valign="top"><td>
<a href="luvecadok.cpp.xml" target="_top">LuVecADOk.cpp</a><br/> </td><td> Lu Factor and Solve With Recorded Pivoting: Example and Test </td></tr><tr valign="top"><td>

<b><big><a name="M">M</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="mul.xml" target="_top">Mul</a><br/> </td><td> The AD Binary Multiplication Operator </td></tr><tr valign="top"><td>
<a href="mul.cpp.xml" target="_top">Mul.cpp</a><br/> </td><td> Binary Multiplication: Example and Test </td></tr><tr valign="top"><td>
<a href="muleq.xml" target="_top">MulEq</a><br/> </td><td> The AD Multiplication Computed Assignment Operator </td></tr><tr valign="top"><td>
<a href="muleq.cpp.xml" target="_top">MulEq.cpp</a><br/> </td><td> Multiplication Computed Assignment: Example and Test </td></tr><tr valign="top"><td>
<a href="multape.xml" target="_top">MulTape</a><br/> </td><td> Using Multiple Tapes </td></tr><tr valign="top"><td>
<a href="multape.cpp.xml" target="_top">MulTape.cpp</a><br/> </td><td> Multiple Tapes: Example and Test </td></tr><tr valign="top"><td>

<b><big><a name="N">N</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="near_equal.cpp.xml" target="_top">Near_Equal.cpp</a><br/> </td><td> NearEqual Function: Example and Test </td></tr><tr valign="top"><td>
<a href="nearequal.xml" target="_top">NearEqual</a><br/> </td><td> Determine if Two Values Are Nearly Equal </td></tr><tr valign="top"><td>
<a href="nearequalext.xml" target="_top">NearEqualExt</a><br/> </td><td> Near Equal Extended to AD Types </td></tr><tr valign="top"><td>
<a href="neg.xml" target="_top">Neg</a><br/> </td><td> Negation: The Unary Minus Operator </td></tr><tr valign="top"><td>
<a href="neg.cpp.xml" target="_top">Neg.cpp</a><br/> </td><td> Negative Operator: Example and Test </td></tr><tr valign="top"><td>

<b><big><a name="O">O</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="odeerrcontrol.xml" target="_top">OdeErrControl</a><br/> </td><td> An Error Controller for ODE Solvers </td></tr><tr valign="top"><td>
<a href="odeerrcontrol.cpp.xml" target="_top">OdeErrControl.cpp</a><br/> </td><td> OdeErrControl: Example and Test </td></tr><tr valign="top"><td>
<a href="odespeed.cpp.xml" target="_top">OdeSpeed.cpp</a><br/> </td><td> ODE Solver: Speed Test </td></tr><tr valign="top"><td>
<a href="odetaylor.cpp.xml" target="_top">OdeTaylor.cpp</a><br/> </td><td> Taylor's Method Ode Solver: An Example and Test </td></tr><tr valign="top"><td>
<a href="output.xml" target="_top">Output</a><br/> </td><td> Writing an AD Value on a Output Stream </td></tr><tr valign="top"><td>
<a href="output.cpp.xml" target="_top">Output.cpp</a><br/> </td><td> The Output Operator for AD Objects: Example and Test </td></tr><tr valign="top"><td>

<b><big><a name="P">P</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="parameter.xml" target="_top">Parameter</a><br/> </td><td> Is This AD Object a Parameter </td></tr><tr valign="top"><td>
<a href="poly.xml" target="_top">Poly</a><br/> </td><td> Evaluate a Polynomial or its Derivative </td></tr><tr valign="top"><td>
<a href="poly.cpp.xml" target="_top">Poly.cpp</a><br/> </td><td> Polynomial Evaluation: Example and Test </td></tr><tr valign="top"><td>
<a href="poly.h.xml" target="_top">Poly.h</a><br/> </td><td> Poly Source Code </td></tr><tr valign="top"><td>
<a href="polynomial.xml" target="_top">Polynomial</a><br/> </td><td> Polynomials and Their Derivatives </td></tr><tr valign="top"><td>
<a href="pow.xml" target="_top">Pow</a><br/> </td><td> The Power Function </td></tr><tr valign="top"><td>
<a href="pow.cpp.xml" target="_top">Pow.cpp</a><br/> </td><td> The Power Function: Example and Test </td></tr><tr valign="top"><td>
<a href="powint.cpp.xml" target="_top">PowInt.cpp</a><br/> </td><td> Integer Powers: Example and Test </td></tr><tr valign="top"><td>
<a href="printfor.xml" target="_top">PrintFor</a><br/> </td><td> Printing Values During Forward Mode Calculations </td></tr><tr valign="top"><td>
<a href="printfor.cpp.xml" target="_top">PrintFor.cpp</a><br/> </td><td> Printing During Forward Mode: Example and Test </td></tr><tr valign="top"><td>

<b><big><a name="R">R</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="realistic.xml" target="_top">Realistic</a><br/> </td><td> Examples Using CppAD in a Realistic Application </td></tr><tr valign="top"><td>
<a href="reverse.xml" target="_top">Reverse</a><br/> </td><td> Reverse Mode </td></tr><tr valign="top"><td>
<a href="reverse.h.xml" target="_top">Reverse.h</a><br/> </td><td> Reverse Mode: Example and Test </td></tr><tr valign="top"><td>
<a href="reverseidentity.xml" target="_top">ReverseIdentity</a><br/> </td><td> An Important Reverse Mode Identity </td></tr><tr valign="top"><td>
<a href="reversetheory.xml" target="_top">ReverseTheory</a><br/> </td><td> The Theory of Reverse Mode </td></tr><tr valign="top"><td>
<a href="revone.xml" target="_top">RevOne</a><br/> </td><td> Derivative of One Range Component: Reverse Mode Easy Driver </td></tr><tr valign="top"><td>
<a href="revone.h.xml" target="_top">RevOne.h</a><br/> </td><td> Derivative of One Range Component: Example and Test </td></tr><tr valign="top"><td>
<a href="revtwo.xml" target="_top">RevTwo</a><br/> </td><td> Subset of Second Partial Derivatives: Reverse Mode Easy Driver </td></tr><tr valign="top"><td>
<a href="revtwo.h.xml" target="_top">RevTwo.h</a><br/> </td><td> Second Partials Reverse Driver: Example and Test </td></tr><tr valign="top"><td>
<a href="rosen34.xml" target="_top">Rosen34</a><br/> </td><td> A 3rd and 4th Order Rosenbrock ODE Solver </td></tr><tr valign="top"><td>
<a href="rosen34.cpp.xml" target="_top">Rosen34.cpp</a><br/> </td><td> Rosen34: Example and Test </td></tr><tr valign="top"><td>
<a href="runge45.xml" target="_top">Runge45</a><br/> </td><td> An Embedded 4th and 5th Order Runge-Kutta ODE Solver </td></tr><tr valign="top"><td>
<a href="runge45.cpp.xml" target="_top">Runge45.cpp</a><br/> </td><td> Runge45: Example and Test </td></tr><tr valign="top"><td>

<b><big><a name="S">S</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="simplevector.xml" target="_top">SimpleVector</a><br/> </td><td> Definition of a Simple Vector </td></tr><tr valign="top"><td>
<a href="simplevector.cpp.xml" target="_top">SimpleVector.cpp</a><br/> </td><td> Simple Vector Template Class: Example and Test </td></tr><tr valign="top"><td>
<a href="sin.xml" target="_top">Sin</a><br/> </td><td> The Sine Function </td></tr><tr valign="top"><td>
<a href="sin.cpp.xml" target="_top">Sin.cpp</a><br/> </td><td> The Sine Function: Example and Test </td></tr><tr valign="top"><td>
<a href="sincosreverse.xml" target="_top">SinCosReverse</a><br/> </td><td> Sine and Cosine Functions Reverse Mode Theory </td></tr><tr valign="top"><td>
<a href="sinforward.xml" target="_top">SinForward</a><br/> </td><td> Sine Function Forward Taylor Polynomial Theory </td></tr><tr valign="top"><td>
<a href="speed.xml" target="_top">Speed</a><br/> </td><td> Routines That Speed Test CppAD </td></tr><tr valign="top"><td>
<a href="speed.cpp.xml" target="_top">Speed.cpp</a><br/> </td><td> Run All The Speed Tests </td></tr><tr valign="top"><td>
<a href="speedadolc.cpp.xml" target="_top">SpeedADOLC.cpp</a><br/> </td><td> Run All The ADOLC Speed Comparison Tests </td></tr><tr valign="top"><td>
<a href="speedfadbad.cpp.xml" target="_top">SpeedFADBAD.cpp</a><br/> </td><td> Run All The FADBAD Speed Comparison Tests </td></tr><tr valign="top"><td>
<a href="speedtest.xml" target="_top">SpeedTest</a><br/> </td><td> Run One Speed Test </td></tr><tr valign="top"><td>
<a href="speedtestexample.xml" target="_top">SpeedTestExample</a><br/> </td><td> Example Use of SpeedTest </td></tr><tr valign="top"><td>
<a href="sqrt.xml" target="_top">Sqrt</a><br/> </td><td> The Square Root Function </td></tr><tr valign="top"><td>
<a href="sqrt.cpp.xml" target="_top">Sqrt.cpp</a><br/> </td><td> The Square Root Function: Example and Test </td></tr><tr valign="top"><td>
<a href="sqrtforward.xml" target="_top">SqrtForward</a><br/> </td><td> Square Root Function Forward Taylor Polynomial Theory </td></tr><tr valign="top"><td>
<a href="sqrtreverse.xml" target="_top">SqrtReverse</a><br/> </td><td> Square Root Function Reverse Mode Theory </td></tr><tr valign="top"><td>
<a href="stdmathlib.xml" target="_top">StdMathLib</a><br/> </td><td> The Standard Library Unary Math Functions </td></tr><tr valign="top"><td>
<a href="sub.xml" target="_top">Sub</a><br/> </td><td> The AD Binary Subtraction Operator </td></tr><tr valign="top"><td>
<a href="sub.cpp.xml" target="_top">Sub.cpp</a><br/> </td><td> Binary Subtraction: Example and Test </td></tr><tr valign="top"><td>
<a href="subeq.xml" target="_top">SubEq</a><br/> </td><td> The AD Subtraction Computed Assignment Operator </td></tr><tr valign="top"><td>
<a href="subeq.cpp.xml" target="_top">SubEq.cpp</a><br/> </td><td> Subtraction Computed Assignment: Example and Test </td></tr><tr valign="top"><td>

<b><big><a name="T">T</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="theory.xml" target="_top">Theory</a><br/> </td><td> The Theory of Derivative Calculations </td></tr><tr valign="top"><td>
<a href="theoryexam.xml" target="_top">TheoryExam</a><br/> </td><td> A Demonstration of Forward and Reverse Mode </td></tr><tr valign="top"><td>
<a href="theoryexambinary.xml" target="_top">TheoryExamBinary</a><br/> </td><td> A Binary Representation of the Procedure </td></tr><tr valign="top"><td>
<a href="theoryexameval.xml" target="_top">TheoryExamEval</a><br/> </td><td> An Evaluation of the Binary Representation </td></tr><tr valign="top"><td>
<a href="theoryexamfor.xml" target="_top">TheoryExamFor</a><br/> </td><td> A Forward Mode Evaluation </td></tr><tr valign="top"><td>
<a href="theoryexamfun.xml" target="_top">TheoryExamFun</a><br/> </td><td> An Example Function </td></tr><tr valign="top"><td>
<a href="theoryexamproc.xml" target="_top">TheoryExamProc</a><br/> </td><td> A Procedural Representation of the Example Function </td></tr><tr valign="top"><td>
<a href="theoryexamrev.xml" target="_top">TheoryExamRev</a><br/> </td><td> A Reverse Mode Evaluation </td></tr><tr valign="top"><td>
<a href="theoryrevnotation.xml" target="_top">TheoryRevNotation</a><br/> </td><td> Function Definitions for Understanding Reverse Mode Evaluation </td></tr><tr valign="top"><td>

<b><big><a name="V">V</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="value.xml" target="_top">Value</a><br/> </td><td> Base Type Value </td></tr><tr valign="top"><td>
<a href="value.cpp.xml" target="_top">Value.cpp</a><br/> </td><td> Conversion to Base Type: Example and Test </td></tr><tr valign="top"><td>
<a href="vec.cpp.xml" target="_top">Vec.cpp</a><br/> </td><td> Recording Vector Indexing Operations: Example and Test </td></tr><tr valign="top"><td>
<a href="vecad.xml" target="_top">VecAD</a><br/> </td><td> Vectors That Record Indexing Operations </td></tr><tr valign="top"><td>
<a href="vectortempclass.xml" target="_top">VectorTempClass</a><br/> </td><td> The CppAD vector template class </td></tr><tr valign="top"><td>
<a href="vectortypes.xml" target="_top">VectorTypes</a><br/> </td><td> Different Types of Vectors </td></tr><tr valign="top"><td>

<b><big><a name="W">W</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="whatsnew03.xml" target="_top">WhatsNew03</a><br/> </td><td> Changes and Additions to CppAD During 2003 </td></tr><tr valign="top"><td>
<a href="whatsnew04.xml" target="_top">WhatsNew04</a><br/> </td><td> Changes and Additions to CppAD During 2004 </td></tr><tr valign="top"><td>
<a href="whatsnew05.xml" target="_top">WhatsNew05</a><br/> </td><td> Changes and Additions to CppAD During 2005 </td></tr><tr valign="top"><td>
</td></tr></table>

</body>
</html>
