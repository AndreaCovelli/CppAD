<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>Complex Polynomial: Example and Test</title>
<meta name="description" content="Complex Polynomial: Example and Test"/>
<meta name="keywords" content=" complex polynomial example test "/><style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
</head>
<body>
<div align='right'><a href="realistic.xml" target="_top">previous</a>
&#xA0;&#xA0;<a href="jacminordet.cpp.xml" target="_top">next</a>
&#xA0;&#xA0;<a href="_contents.xml" target="_top">contents</a>
&#xA0;&#xA0;<a href="_reference.xml" target="_top">reference</a>
&#xA0;&#xA0;<a href="_index.xml" target="_top">index</a>
&#xA0;&#xA0;<a href="_search.xml" target="_top">search</a>
&#xA0;&#xA0;<a href="_external.xml" target="_top">external</a>
&#xA0;&#xA0;This:&#xA0;&#xA0;<a href="complexpoly.cpp.xml" target="_top">section</a>, <a href="complexpoly.cpp_frame1.xml" target="_top">frame</a></div>
<hr/><center><b><big><big>Complex Polynomial: Example and Test</big></big></b></center>
Select this link to view specifications for <a href="poly.xml" target="_top"><span style='white-space: nowrap'>Poly</span></a>
:

 
<code><font color="blue">
<span style='white-space: nowrap'><br/>
<br/>
#&#xA0;include&#xA0;&lt;CppAD/CppAD.h&gt;<br/>
#&#xA0;include&#xA0;&lt;complex&gt;<br/>
<br/>
//&#xA0;define&#xA0;abbreviation&#xA0;for&#xA0;doubler&#xA0;precision&#xA0;complex<br/>
typedef&#xA0;std::complex&lt;double&gt;&#xA0;Complex;&#xA0;<br/>
<br/>
bool&#xA0;ComplexPoly(void)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;ok&#xA0;=&#xA0;true;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;namespace&#xA0;CppAD;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;deg&#xA0;=&#xA0;4;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;polynomial&#xA0;coefficients<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;&#xA0;Complex&#xA0;&gt;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;a&#xA0;&#xA0;&#xA0;(deg&#xA0;+&#xA0;1);&#xA0;//&#xA0;coefficients&#xA0;for&#xA0;p(z)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;&#xA0;AD&lt;Complex&gt;&#xA0;&gt;&#xA0;A&#xA0;&#xA0;&#xA0;(deg&#xA0;+&#xA0;1);&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;i;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;=&#xA0;deg;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;A[i]&#xA0;=&#xA0;a[i]&#xA0;=&#xA0;Complex(i,&#xA0;i);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;independent&#xA0;variable&#xA0;vector,&#xA0;indices,&#xA0;values,&#xA0;and&#xA0;declaration<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;&#xA0;AD&lt;Complex&gt;&#xA0;&gt;&#xA0;Z(1);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;z&#xA0;=&#xA0;0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Z[z]&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;Complex(1.,&#xA0;1.);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Independent(Z);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;dependent&#xA0;variable&#xA0;vector&#xA0;and&#xA0;indices<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;&#xA0;AD&lt;Complex&gt;&#xA0;&gt;&#xA0;P(1);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;p&#xA0;=&#xA0;0;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;dependent&#xA0;variable&#xA0;values<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;P[p]&#xA0;=&#xA0;Poly(0,&#xA0;A,&#xA0;Z[z]);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;create&#xA0;f:&#xA0;Z&#xA0;-&gt;&#xA0;P&#xA0;and&#xA0;vectors&#xA0;used&#xA0;for&#xA0;derivative&#xA0;calculations<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ADFun&lt;Complex&gt;&#xA0;f(Z,&#xA0;P);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;Complex&gt;&#xA0;v(&#xA0;f.Domain()&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;Complex&gt;&#xA0;w(&#xA0;f.Range()&#xA0;);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;check&#xA0;first&#xA0;derivative&#xA0;w.r.t&#xA0;z<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;v[z]&#xA0;=&#xA0;1.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;w&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;f.Forward(1,&#xA0;v);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(&#xA0;w[p]&#xA0;&#xA0;==&#xA0;Poly(1,&#xA0;a,&#xA0;Value(Z[z])&#xA0;)&#xA0;);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;second&#xA0;derivative&#xA0;w.r.t&#xA0;z&#xA0;is&#xA0;2&#xA0;times&#xA0;its&#xA0;second&#xA0;order&#xA0;Taylor&#xA0;coeff<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;v[z]&#xA0;=&#xA0;0.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;w&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;f.Forward(2,&#xA0;v);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(&#xA0;2.&#xA0;*&#xA0;w[p]&#xA0;&#xA0;==&#xA0;Poly(2,&#xA0;a,&#xA0;Value(Z[z])&#xA0;)&#xA0;);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;ok;<br/>
}<br/>
<br/>
</span></font></code>
<hr/>Input File: Example\ComplexPoly.cpp

</body>
</html>
