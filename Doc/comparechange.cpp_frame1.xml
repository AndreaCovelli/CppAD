<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>CompareChange Function: Example and Test</title>
<meta name="description" content="CompareChange Function: Example and Test"/>
<meta name="keywords" content=" compare change example Comparechange test "/><style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
</head>
<body>
<div align='right'><a href="fun.h.xml" target="_top">previous</a>
&#xA0;&#xA0;<a href="multape.xml" target="_top">next</a>
&#xA0;&#xA0;<a href="_contents.xml" target="_top">contents</a>
&#xA0;&#xA0;<a href="_reference.xml" target="_top">reference</a>
&#xA0;&#xA0;<a href="_index.xml" target="_top">index</a>
&#xA0;&#xA0;<a href="_search.xml" target="_top">search</a>
&#xA0;&#xA0;<a href="_external.xml" target="_top">external</a>
&#xA0;&#xA0;This:&#xA0;&#xA0;<a href="comparechange.cpp.xml" target="_top">section</a>, <a href="comparechange.cpp_frame1.xml" target="_top">frame</a></div>
<hr/><center><b><big><big>CompareChange Function: Example and Test</big></big></b></center>
<code><font color="blue"><span style='white-space: nowrap'><br/>
<br/>
#&#xA0;include&#xA0;&lt;CppAD/CppAD.h&gt;<br/>
<br/>
namespace&#xA0;{&#xA0;//&#xA0;put&#xA0;this&#xA0;function&#xA0;in&#xA0;the&#xA0;empty&#xA0;namespace<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;template&#xA0;&lt;typename&#xA0;Type&gt;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Type&#xA0;Minimum(const&#xA0;Type&#xA0;&amp;x,&#xA0;const&#xA0;Type&#xA0;&amp;y)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Use&#xA0;a&#xA0;comparision&#xA0;to&#xA0;compute&#xA0;the&#xA0;min(x,&#xA0;y)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;(Note&#xA0;that&#xA0;CondExp&#xA0;would&#xA0;never&#xA0;require&#xA0;retaping).&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if(&#xA0;x&#xA0;&lt;&#xA0;y&#xA0;)&#xA0;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;x;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;y;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
}<br/>
<br/>
bool&#xA0;CompareChange(void)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;ok&#xA0;=&#xA0;true;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;namespace&#xA0;CppAD;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;create&#xA0;independent&#xA0;variables<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;&#xA0;AD&lt;double&gt;&#xA0;&gt;&#xA0;X(2);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;X[0]&#xA0;=&#xA0;3.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;X[1]&#xA0;=&#xA0;4.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Independent(X);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;create&#xA0;dependent&#xA0;variables<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;&#xA0;AD&lt;double&gt;&#xA0;&gt;&#xA0;Y(1);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Y[0]&#xA0;=&#xA0;Minimum(X[0],&#xA0;X[1]);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;F&#xA0;:&#xA0;X&#xA0;-&gt;&#xA0;Y&#xA0;(use&#xA0;pointer&#xA0;so&#xA0;can&#xA0;delete&#xA0;and&#xA0;retape)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ADFun&lt;double&gt;&#xA0;*F;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;F&#xA0;=&#xA0;new&#xA0;ADFun&lt;double&gt;(X,&#xA0;Y);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;new&#xA0;function&#xA0;argument&#xA0;where&#xA0;conditional&#xA0;has&#xA0;the&#xA0;same&#xA0;result<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;double&gt;&#xA0;x(2);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x[0]&#xA0;=&#xA0;3.5;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x[1]&#xA0;=&#xA0;4.;&#xA0;&#xA0;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;evaluate&#xA0;the&#xA0;function&#xA0;at&#xA0;new&#xA0;argument<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;double&gt;&#xA0;y(1);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;y&#xA0;=&#xA0;F-&gt;Forward(0,&#xA0;x);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Note&#xA0;that&#xA0;the&#xA0;result&#xA0;of&#xA0;the&#xA0;comparision&#xA0;has&#xA0;not&#xA0;changed.<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Also&#xA0;note&#xA0;that&#xA0;F-&gt;CompareChange&#xA0;is&#xA0;not&#xA0;defined&#xA0;when&#xA0;NDEBUG&#xA0;is&#xA0;true<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(y[0]&#xA0;==&#xA0;x[0]);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(F-&gt;CompareChange()&#xA0;==&#xA0;0);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;evaluate&#xA0;the&#xA0;function&#xA0;at&#xA0;new&#xA0;argument<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;where&#xA0;conditional&#xA0;has&#xA0;a&#xA0;different&#xA0;result<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x[0]&#xA0;=&#xA0;4.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x[1]&#xA0;=&#xA0;3.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;y&#xA0;=&#xA0;F-&gt;Forward(0,&#xA0;x);<br/>
&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Note&#xA0;that&#xA0;y[0]&#xA0;is&#xA0;no&#xA0;longer&#xA0;the&#xA0;minimum&#xA0;element&#xA0;in&#xA0;x&#xA0;(the&#xA0;result<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;of&#xA0;the&#xA0;comparision&#xA0;has&#xA0;changed).&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(y[0]&#xA0;==&#xA0;x[0]);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(F-&gt;CompareChange()&#xA0;==&#xA0;1);&#xA0;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;retape&#xA0;the&#xA0;same&#xA0;calculation&#xA0;at&#xA0;new&#xA0;argument&#xA0;values<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;X[0]&#xA0;=&#xA0;4.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;X[1]&#xA0;=&#xA0;3.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Independent(X);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Y[0]&#xA0;=&#xA0;Minimum(X[0],&#xA0;X[1]);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;delete&#xA0;F;&#xA0;//&#xA0;free&#xA0;memory&#xA0;corresponding&#xA0;to&#xA0;previous&#xA0;new<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;F&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;new&#xA0;ADFun&lt;double&gt;(X,&#xA0;Y);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;evaluate&#xA0;the&#xA0;function&#xA0;at&#xA0;new&#xA0;argument&#xA0;values<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x[0]&#xA0;=&#xA0;4.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x[1]&#xA0;=&#xA0;3.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;y&#xA0;=&#xA0;F-&gt;Forward(0,&#xA0;x);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(y[0]&#xA0;==&#xA0;x[1]);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(F-&gt;CompareChange()&#xA0;==&#xA0;0);&#xA0;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;delete&#xA0;F;&#xA0;//&#xA0;free&#xA0;memory&#xA0;corresponding&#xA0;to&#xA0;previous&#xA0;new<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;ok;<br/>
}<br/>
<br/>
<br/>
</span></font></code>
<hr/>Input File: Example\CompareChange.cpp

</body>
</html>
