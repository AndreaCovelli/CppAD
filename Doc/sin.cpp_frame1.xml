<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>The Sine Function: Example and Test</title>
<meta name="description" content="The Sine Function: Example and Test"/>
<meta name="keywords" content=" sin example test "/><style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
</head>
<body>
<div align='right'><a href="sin.xml" target="_top">previous</a>
&#xA0;&#xA0;<a href="sqrt.xml" target="_top">next</a>
&#xA0;&#xA0;<a href="_contents.xml" target="_top">contents</a>
&#xA0;&#xA0;<a href="_reference.xml" target="_top">reference</a>
&#xA0;&#xA0;<a href="_index.xml" target="_top">index</a>
&#xA0;&#xA0;<a href="_search.xml" target="_top">search</a>
&#xA0;&#xA0;<a href="_external.xml" target="_top">external</a>
&#xA0;&#xA0;This:&#xA0;&#xA0;<a href="sin.cpp.xml" target="_top">section</a>, <a href="sin.cpp_frame1.xml" target="_top">frame</a></div>
<hr/>


<center><b><big><big>The Sine Function: Example and Test</big></big></b></center>
<code><font color="blue"><span style='white-space: nowrap'><br/>
<br/>
#&#xA0;include&#xA0;&lt;CppAD/CppAD.h&gt;<br/>
#&#xA0;include&#xA0;&quot;NearEqualExt.h&quot;<br/>
#&#xA0;include&#xA0;&lt;cmath&gt;<br/>
<br/>
bool&#xA0;Sin(void)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;ok&#xA0;=&#xA0;true;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;CppAD::sin;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;CppAD::cos;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;namespace&#xA0;CppAD;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;independent&#xA0;variable&#xA0;vector<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;&#xA0;AD&lt;double&gt;&#xA0;&gt;&#xA0;U(1);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;U[0]&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;1.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Independent(U);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;dependent&#xA0;variable&#xA0;vector&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;&#xA0;AD&lt;double&gt;&#xA0;&gt;&#xA0;Z(1);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Z[0]&#xA0;=&#xA0;sin(U[0]);&#xA0;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;create&#xA0;f:&#xA0;U&#xA0;-&gt;&#xA0;Z&#xA0;and&#xA0;vectors&#xA0;used&#xA0;for&#xA0;derivative&#xA0;calculations<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ADFun&lt;double&gt;&#xA0;f(U,&#xA0;Z);&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;double&gt;&#xA0;v(1);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;double&gt;&#xA0;w(1);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;check&#xA0;value&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;sin_u&#xA0;=&#xA0;sin(&#xA0;Value(U[0])&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;cos_u&#xA0;=&#xA0;cos(&#xA0;Value(U[0])&#xA0;);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;NearEqual(sin_u,&#xA0;Value(Z[0]),&#xA0;&#xA0;1e-10&#xA0;,&#xA0;1e-10);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;forward&#xA0;computation&#xA0;of&#xA0;partials&#xA0;w.r.t.&#xA0;u<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;j;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;p&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;5;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;jfac&#xA0;&#xA0;=&#xA0;1.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;v[0]&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;1.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(j&#xA0;=&#xA0;1;&#xA0;j&#xA0;&lt;&#xA0;p;&#xA0;j++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;w&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;f.Forward(j,&#xA0;v);&#xA0;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;value;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if(&#xA0;j&#xA0;%&#xA0;4&#xA0;==&#xA0;1&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;value&#xA0;=&#xA0;cos_u;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;else&#xA0;if(&#xA0;j&#xA0;%&#xA0;4&#xA0;==&#xA0;2&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;value&#xA0;=&#xA0;-sin_u;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;else&#xA0;if(&#xA0;j&#xA0;%&#xA0;4&#xA0;==&#xA0;3&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;value&#xA0;=&#xA0;-cos_u;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;else&#xA0;value&#xA0;=&#xA0;sin_u;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;jfac&#xA0;*=&#xA0;j;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;NearEqual(jfac*w[0],&#xA0;value,&#xA0;1e-10&#xA0;,&#xA0;1e-10);&#xA0;//&#xA0;d^jz/du^j<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;v[0]&#xA0;&#xA0;=&#xA0;0.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;reverse&#xA0;computation&#xA0;of&#xA0;partials&#xA0;of&#xA0;Taylor&#xA0;coefficients<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;double&gt;&#xA0;r(p);&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;w[0]&#xA0;&#xA0;=&#xA0;1.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;r&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;f.Reverse(p,&#xA0;w);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;jfac&#xA0;&#xA0;=&#xA0;1.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(j&#xA0;=&#xA0;0;&#xA0;j&#xA0;&lt;&#xA0;p;&#xA0;j++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;value;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if(&#xA0;j&#xA0;%&#xA0;4&#xA0;==&#xA0;0&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;value&#xA0;=&#xA0;cos_u;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;else&#xA0;if(&#xA0;j&#xA0;%&#xA0;4&#xA0;==&#xA0;1&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;value&#xA0;=&#xA0;-sin_u;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;else&#xA0;if(&#xA0;j&#xA0;%&#xA0;4&#xA0;==&#xA0;2&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;value&#xA0;=&#xA0;-cos_u;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;else&#xA0;value&#xA0;=&#xA0;sin_u;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;NearEqual(jfac*r[j],&#xA0;value,&#xA0;1e-10&#xA0;,&#xA0;1e-10);&#xA0;//&#xA0;d^jz/du^j<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;jfac&#xA0;*=&#xA0;(j&#xA0;+&#xA0;1);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;ok;<br/>
}<br/>
<br/>
</span></font></code>
<hr/>Input File: Example\Sin.cpp

</body>
</html>
