<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>Gradient of Determinant Using Lu Factorization: Example and Test</title>
<meta name="description" content="Gradient of Determinant Using Lu Factorization: Example and Test"/>
<meta name="keywords" content=" gradient Lu example test "/><style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
</head>
<body>
<div align='right'><a href="jacminordet.cpp.xml" target="_top">previous</a>
&#xA0;&#xA0;<a href="hesminordet.cpp.xml" target="_top">next</a>
&#xA0;&#xA0;<a href="_contents.xml" target="_top">contents</a>
&#xA0;&#xA0;<a href="_reference.xml" target="_top">reference</a>
&#xA0;&#xA0;<a href="_index.xml" target="_top">index</a>
&#xA0;&#xA0;<a href="_search.xml" target="_top">search</a>
&#xA0;&#xA0;<a href="_external.xml" target="_top">external</a>
&#xA0;&#xA0;This:&#xA0;&#xA0;<a href="jacludet.cpp.xml" target="_top">section</a>, <a href="jacludet.cpp_frame1.xml" target="_top">frame</a></div>
<hr/><center><b><big><big>Gradient of Determinant Using Lu Factorization: Example and Test</big></big></b></center>
<code><font color="blue"><span style='white-space: nowrap'><br/>
<br/>
#&#xA0;include&#xA0;&lt;CppAD/CppAD.h&gt;<br/>
#&#xA0;include&#xA0;&quot;NearEqualExt.h&quot;<br/>
#&#xA0;include&#xA0;&quot;DetByLu.h&quot;<br/>
<br/>
bool&#xA0;JacLuDet()<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;ok&#xA0;=&#xA0;true;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;namespace&#xA0;CppAD;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;n&#xA0;=&#xA0;2;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;object&#xA0;for&#xA0;computing&#xA0;determinants<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;DetByLu&lt;ADComplex&gt;&#xA0;Det(n);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;independent&#xA0;and&#xA0;dependent&#xA0;variable&#xA0;vectors<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;ADComplex&gt;&#xA0;&#xA0;X(n&#xA0;*&#xA0;n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;ADComplex&gt;&#xA0;&#xA0;D(1);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;value&#xA0;of&#xA0;the&#xA0;independent&#xA0;variable<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;i;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n&#xA0;*&#xA0;n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;X[i]&#xA0;=&#xA0;Complex(int(i),&#xA0;-int(i));<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;set&#xA0;the&#xA0;independent&#xA0;variables<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Independent(X);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;compute&#xA0;the&#xA0;determinant<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;D[0]&#xA0;&#xA0;=&#xA0;Det(X);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;create&#xA0;the&#xA0;function&#xA0;object<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ADFun&lt;Complex&gt;&#xA0;f(X,&#xA0;D);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;argument&#xA0;value<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;Complex&gt;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x(&#xA0;n&#xA0;*&#xA0;n&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n&#xA0;*&#xA0;n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x[i]&#xA0;=&#xA0;Complex(2&#xA0;*&#xA0;i,&#xA0;i);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;first&#xA0;derivative&#xA0;of&#xA0;the&#xA0;determinant<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;Complex&gt;&#xA0;J(&#xA0;n&#xA0;*&#xA0;n&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;J&#xA0;=&#xA0;f.Jacobian(x);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;/*<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;f(x)&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;x[0]&#xA0;*&#xA0;x[3]&#xA0;-&#xA0;x[1]&#xA0;*&#xA0;x[2]<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;*/<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Complex&#xA0;Jtrue[]&#xA0;&#xA0;=&#xA0;{&#xA0;x[3],&#xA0;-x[2],&#xA0;-x[1],&#xA0;x[0]&#xA0;};<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(&#xA0;i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n*n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;NearEqual(&#xA0;Jtrue[i],&#xA0;J[i],&#xA0;1e-10&#xA0;,&#xA0;1e-10&#xA0;);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;ok;<br/>
}<br/>
<br/>
</span></font></code>
<hr/>Input File: Example\JacLuDet.cpp

</body>
</html>
