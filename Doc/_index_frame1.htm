<html><head>
<title>Keyword Index</title>
<meta name="description" content="Keyword Index"><style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
</head>
<body>
<div align='right'><a href="_reference.htm" target="_top">previous</a>
&nbsp;&nbsp;<a href="_search.htm" target="_top">next</a>
&nbsp;&nbsp;<a href="_contents.htm" target="_top">contents</a>
&nbsp;&nbsp;<a href="_reference.htm" target="_top">reference</a>
&nbsp;&nbsp;index&nbsp;&nbsp;<a href="_search.htm" target="_top">search</a>
&nbsp;&nbsp;<a href="_external.htm" target="_top">external</a>
&nbsp;&nbsp;This:&nbsp;&nbsp;<a href="_index.htm" target="_top">section</a>, <a href="_index_frame1.htm" target="_top">frame</a></div>
<hr><center><b><big><big>Keyword Index</big></big></b></center>
<b>!=</b>&#160;<a href="compare.htm" target="_top">The&nbsp;AD&nbsp;Comparison&nbsp;Operators</a><br>
<b>*</b><br>
&#160;&#160;&#160;&#160;&#160;binary&#160;<a href="mul.htm" target="_top">The&nbsp;AD&nbsp;Binary&nbsp;Multiplication&nbsp;Operator</a><br>
<b>*=</b>&#160;<a href="muleq.htm" target="_top">The&nbsp;AD&nbsp;Multiplication&nbsp;Computed&nbsp;Assignment&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="muleq.cpp.htm" target="_top">Multiplication&nbsp;Computed&nbsp;Assignment:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
<b>+</b><br>
&#160;&#160;&#160;&#160;&#160;binary&#160;<a href="add.htm" target="_top">The&nbsp;AD&nbsp;Binary&nbsp;Addition&nbsp;Operator</a><br>
<b>+=</b>&#160;<a href="addeq.htm" target="_top">The&nbsp;AD&nbsp;Addition&nbsp;Computed&nbsp;Assignment&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="addeq.cpp.htm" target="_top">Addition&nbsp;Computed&nbsp;Assignment:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
<b>-</b>&#160;<a href="neg.htm" target="_top">Negation:&nbsp;The&nbsp;Unary&nbsp;Minus&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;binary&#160;<a href="div.htm" target="_top">The&nbsp;AD&nbsp;Binary&nbsp;Division&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;binary&#160;<a href="sub.htm" target="_top">The&nbsp;AD&nbsp;Binary&nbsp;Subtraction&nbsp;Operator</a><br>
<b>-=</b>&#160;<a href="subeq.htm" target="_top">The&nbsp;AD&nbsp;Subtraction&nbsp;Computed&nbsp;Assignment&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="subeq.cpp.htm" target="_top">Subtraction&nbsp;Computed&nbsp;Assignment:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
<b>/</b><br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="div.cpp.htm" target="_top">Binary&nbsp;Division:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
<b>/=</b>&#160;<a href="diveq.htm" target="_top">The&nbsp;AD&nbsp;Division&nbsp;Computed&nbsp;Assignment&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="diveq.cpp.htm" target="_top">Division&nbsp;Computed&nbsp;Assignment:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
<b>&lt;</b>&#160;<a href="compare.htm" target="_top">The&nbsp;AD&nbsp;Comparison&nbsp;Operators</a><br>
<b>&lt;=</b>&#160;<a href="compare.htm" target="_top">The&nbsp;AD&nbsp;Comparison&nbsp;Operators</a><br>
<b>=</b>&#160;<a href="eq.htm" target="_top">The&nbsp;AD&nbsp;Assignment&nbsp;Operator</a><br>
<b>==</b>&#160;<a href="compare.htm" target="_top">The&nbsp;AD&nbsp;Comparison&nbsp;Operators</a><br>
<b>&gt;</b>&#160;<a href="compare.htm" target="_top">The&nbsp;AD&nbsp;Comparison&nbsp;Operators</a><br>
<b>&gt;=</b>&#160;<a href="compare.htm" target="_top">The&nbsp;AD&nbsp;Comparison&nbsp;Operators</a><br>
<b>[]</b><br>
&#160;&#160;&#160;&#160;&#160;vector&#160;<a href="cppad_vector_frame2.htm#Element Access" target="frame1"><i>The&nbsp;CppAD::vector&nbsp;Template&nbsp;Class:&#160;Element&nbsp;Access</i></a><br>
&#160;&#160;&#160;&#160;&#160;vector&#160;<a href="simplevector_frame1.htm#Element Access" target="frame1"><i>Definition&nbsp;of&nbsp;a&nbsp;Simple&nbsp;Vector:&#160;Element&nbsp;Access</i></a><br>

<b><big><a name="A">A</a></big></b>
<br>
AbsGeq&#160;<a href="boolfun.cpp.htm" target="_top">Defining&nbsp;Boolean&nbsp;Functions&nbsp;with&nbsp;AD&nbsp;Arguments:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
AD&#160;<a href="copy.htm" target="_top">Creating&nbsp;A&nbsp;Copy&nbsp;of&nbsp;an&nbsp;AD&nbsp;Variable</a><br>
&#160;&#160;&#160;&#160;&#160;NearEqual&#160;<a href="nearequalext.htm" target="_top">Near&nbsp;Equal&nbsp;Extended&nbsp;to&nbsp;AD&nbsp;Types</a><br>
&#160;&#160;&#160;&#160;&#160;stream<b>&nbsp;</b>output&#160;<a href="output.htm" target="_top">Writing&nbsp;an&nbsp;AD&nbsp;Value&nbsp;on&nbsp;a&nbsp;Output&nbsp;Stream</a><br>
ADFun&#160;<a href="fun.h.htm" target="_top">Differentiable&nbsp;Function&nbsp;Constructor:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
ADOLC&#160;<a href="speedadolc.cpp.htm" target="_top">Run&nbsp;All&nbsp;The&nbsp;ADOLC&nbsp;Speed&nbsp;Comparison&nbsp;Tests</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;<a href="adolc.htm" target="_top">Routines&nbsp;for&nbsp;Comparing&nbsp;CppAD&nbsp;with&nbsp;ADOLC</a><br>
&#160;&#160;&#160;&#160;&#160;compare&#160;<a href="exampleadolc.cpp.htm" target="_top">Compare&nbsp;ADOLC&nbsp;and&nbsp;CppAD&nbsp;Results</a><br>
&#160;&#160;&#160;&#160;&#160;determinant&#160;<a href="detluadolc.cpp.htm" target="_top">ADOLC&nbsp;&amp;&nbsp;CppAD&nbsp;Gradient&nbsp;of&nbsp;Determinant&nbsp;by&nbsp;Lu&nbsp;Factorization</a><br>
&#160;&#160;&#160;&#160;&#160;determinant&#160;<a href="detminoradolc.cpp.htm" target="_top">ADOLC&nbsp;&amp;&nbsp;CppAD&nbsp;Gradient&nbsp;of&nbsp;Determinant&nbsp;by&nbsp;Minors</a><br>
&#160;&#160;&#160;&#160;&#160;Lu<b>&nbsp;</b>factor&#160;<a href="detluadolc.cpp.htm" target="_top">ADOLC&nbsp;&amp;&nbsp;CppAD&nbsp;Gradient&nbsp;of&nbsp;Determinant&nbsp;by&nbsp;Lu&nbsp;Factorization</a><br>
&#160;&#160;&#160;&#160;&#160;Minor<b>&nbsp;</b>expand&#160;<a href="detminoradolc.cpp.htm" target="_top">ADOLC&nbsp;&amp;&nbsp;CppAD&nbsp;Gradient&nbsp;of&nbsp;Determinant&nbsp;by&nbsp;Minors</a><br>
&#160;&#160;&#160;&#160;&#160;speed&#160;<a href="detluadolc.cpp.htm" target="_top">ADOLC&nbsp;&amp;&nbsp;CppAD&nbsp;Gradient&nbsp;of&nbsp;Determinant&nbsp;by&nbsp;Lu&nbsp;Factorization</a><br>
&#160;&#160;&#160;&#160;&#160;speed&#160;<a href="detminoradolc.cpp.htm" target="_top">ADOLC&nbsp;&amp;&nbsp;CppAD&nbsp;Gradient&nbsp;of&nbsp;Determinant&nbsp;by&nbsp;Minors</a><br>
abs&#160;<a href="abs.cpp.htm" target="_top">The&nbsp;Absolute&nbsp;Value&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;<a href="abs.htm" target="_top">The&nbsp;Absolute&nbsp;Value&nbsp;Function</a><br>
absolute<br>
&#160;&#160;&#160;&#160;&#160;difference&#160;<a href="nearequal.htm" target="_top">Determine&nbsp;if&nbsp;Two&nbsp;Values&nbsp;Are&nbsp;Nearly&nbsp;Equal</a><br>
&#160;&#160;&#160;&#160;&#160;value&#160;<a href="abs.htm" target="_top">The&nbsp;Absolute&nbsp;Value&nbsp;Function</a><br>
acos&#160;<a href="acos.htm" target="_top">The&nbsp;Inverse&nbsp;Cosine&nbsp;Function</a><br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="acos.cpp.htm" target="_top">The&nbsp;Acos&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;forward<b>&nbsp;</b>theory&#160;<a href="acosforward.htm" target="_top">Arccosine&nbsp;Function&nbsp;Forward&nbsp;Taylor&nbsp;Polynomial&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;reverse<b>&nbsp;</b>theory&#160;<a href="acosreverse.htm" target="_top">Arccosine&nbsp;Function&nbsp;Reverse&nbsp;Mode&nbsp;Theory</a><br>
add<br>
&#160;&#160;&#160;&#160;&#160;<b>+=</b>&#160;<a href="addeq.htm" target="_top">The&nbsp;AD&nbsp;Addition&nbsp;Computed&nbsp;Assignment&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;<b>+=&nbsp;</b>example&#160;<a href="addeq.cpp.htm" target="_top">Addition&nbsp;Computed&nbsp;Assignment:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;binary&#160;<a href="add.htm" target="_top">The&nbsp;AD&nbsp;Binary&nbsp;Addition&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="add.cpp.htm" target="_top">Binary&nbsp;Addition:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
algorithm<br>
&#160;&#160;&#160;&#160;&#160;differentiation&#160;<a href="cppad.htm" target="_top">A&nbsp;Package&nbsp;for&nbsp;Differentiation&nbsp;of&nbsp;C++&nbsp;Algorithms:&nbsp;CppAD&nbsp;Version&nbsp;05-07-05</a><br>
all&#160;<a href="speedfadbad.cpp.htm" target="_top">Run&nbsp;All&nbsp;The&nbsp;FADBAD&nbsp;Speed&nbsp;Comparison&nbsp;Tests</a><br>
&#160;&#160;&#160;&#160;<a href="speedadolc.cpp.htm" target="_top">Run&nbsp;All&nbsp;The&nbsp;ADOLC&nbsp;Speed&nbsp;Comparison&nbsp;Tests</a><br>
&#160;&#160;&#160;&#160;<a href="speed.cpp.htm" target="_top">Run&nbsp;All&nbsp;The&nbsp;Speed&nbsp;Tests</a><br>
&#160;&#160;&#160;&#160;<a href="example.cpp.htm" target="_top">Program&nbsp;That&nbsp;Runs&nbsp;the&nbsp;CppAD&nbsp;Example&nbsp;Suite</a><br>
and&#160;<a href="faq_frame1.htm#Assignment and Independent" target="frame1"><i>Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Assignment&nbsp;and&nbsp;Independent</i></a><br>
answers&#160;<a href="faq.htm" target="_top">Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers</a><br>
application&#160;<a href="realistic.htm" target="_top">Examples&nbsp;Using&nbsp;CppAD&nbsp;in&nbsp;a&nbsp;Realistic&nbsp;Application</a><br>
asin&#160;<a href="asin.htm" target="_top">The&nbsp;Inverse&nbsp;Sine&nbsp;Function</a><br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="asin.cpp.htm" target="_top">The&nbsp;Asin&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;forward<b>&nbsp;</b>theory&#160;<a href="asinforward.htm" target="_top">Arcsine&nbsp;Function&nbsp;Forward&nbsp;Taylor&nbsp;Polynomial&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;reverse<b>&nbsp;</b>theory&#160;<a href="asinreverse.htm" target="_top">Arcsine&nbsp;Function&nbsp;Reverse&nbsp;Mode&nbsp;Theory</a><br>
asked&#160;<a href="faq.htm" target="_top">Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers</a><br>
assert<br>
&#160;&#160;&#160;&#160;&#160;error<b>&nbsp;</b>macro&#160;<a href="cppaderror.htm" target="_top">CppAD&nbsp;Error&nbsp;Detection&nbsp;and&nbsp;Reporting</a><br>
assign&#160;<a href="eq.cpp.htm" target="_top">AD&nbsp;Assignment&nbsp;Operator:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;<b>*=</b>&#160;<a href="muleq.htm" target="_top">The&nbsp;AD&nbsp;Multiplication&nbsp;Computed&nbsp;Assignment&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;<b>*=&nbsp;</b>example&#160;<a href="muleq.cpp.htm" target="_top">Multiplication&nbsp;Computed&nbsp;Assignment:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;<b>+=</b>&#160;<a href="addeq.htm" target="_top">The&nbsp;AD&nbsp;Addition&nbsp;Computed&nbsp;Assignment&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;<b>+=&nbsp;</b>example&#160;<a href="addeq.cpp.htm" target="_top">Addition&nbsp;Computed&nbsp;Assignment:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;<b>-=</b>&#160;<a href="subeq.htm" target="_top">The&nbsp;AD&nbsp;Subtraction&nbsp;Computed&nbsp;Assignment&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;<b>-=&nbsp;</b>example&#160;<a href="subeq.cpp.htm" target="_top">Subtraction&nbsp;Computed&nbsp;Assignment:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;<b>/=</b>&#160;<a href="diveq.htm" target="_top">The&nbsp;AD&nbsp;Division&nbsp;Computed&nbsp;Assignment&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;<b>/=&nbsp;</b>example&#160;<a href="diveq.cpp.htm" target="_top">Division&nbsp;Computed&nbsp;Assignment:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;conditional&#160;<a href="discrete_frame2.htm#Conditional Assignment" target="frame1"><i>User&nbsp;Defined&nbsp;Discrete&nbsp;Functions:&#160;Conditional&nbsp;Assignment</i></a><br>
&#160;&#160;&#160;&#160;&#160;conditional&#160;<a href="condexp.htm" target="_top">The&nbsp;Conditional&nbsp;Expression&nbsp;Function</a><br>
assignment&#160;<a href="eq.htm" target="_top">The&nbsp;AD&nbsp;Assignment&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="compeq.htm" target="_top">Computed&nbsp;Assignment&nbsp;Operators</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="faq_frame1.htm#Assignment and Independent" target="frame1"><i>Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Assignment&nbsp;and&nbsp;Independent</i></a><br>
&#160;&#160;&#160;&#160;&#160;vector&#160;<a href="cppad_vector_frame2.htm#Assignment" target="frame1"><i>The&nbsp;CppAD::vector&nbsp;Template&nbsp;Class:&#160;Assignment</i></a><br>
&#160;&#160;&#160;&#160;&#160;vector&#160;<a href="simplevector_frame1.htm#Assignment" target="frame1"><i>Definition&nbsp;of&nbsp;a&nbsp;Simple&nbsp;Vector:&#160;Assignment</i></a><br>
atan&#160;<a href="atan.htm" target="_top">The&nbsp;Inverse&nbsp;Tangent&nbsp;Function</a><br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="atan.cpp.htm" target="_top">The&nbsp;Atan&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;forward<b>&nbsp;</b>theory&#160;<a href="atanforward.htm" target="_top">Arctangent&nbsp;Function&nbsp;Forward&nbsp;Taylor&nbsp;Polynomial&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;reverse<b>&nbsp;</b>theory&#160;<a href="atanreverse.htm" target="_top">Arctangent&nbsp;Function&nbsp;Reverse&nbsp;Mode&nbsp;Theory</a><br>
atan2&#160;<a href="atan2.cpp.htm" target="_top">The&nbsp;Two&nbsp;Argument&nbsp;Inverse&nbsp;Tangent:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;<a href="atan2.htm" target="_top">The&nbsp;Two&nbsp;Argument&nbsp;Inverse&nbsp;Tangent&nbsp;Function</a><br>

<b><big><a name="B">B</a></big></b>
<br>
Base<b>&nbsp;</b>Value&#160;<a href="value.cpp.htm" target="_top">Conversion&nbsp;to&nbsp;Base&nbsp;Type:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
base&#160;<a href="glossary_frame1.htm#Base Type" target="frame1"><i>Glossary:&#160;Base&nbsp;Type</i></a><br>
&#160;&#160;&#160;&#160;&#160;<a href="glossary_frame1.htm#Base Function" target="frame1"><i>Glossary:&#160;Base&nbsp;Function</i></a><br>
&#160;&#160;&#160;&#160;&#160;<a href="binaryop.htm" target="_top">Base&nbsp;Type&nbsp;Binary&nbsp;Operators</a><br>
&#160;&#160;&#160;&#160;&#160;<a href="value.htm" target="_top">Base&nbsp;Type&nbsp;Value</a><br>
&#160;&#160;&#160;&#160;&#160;construct<b>&nbsp;</b>AD<b>&nbsp;</b>from&#160;<a href="frombase.htm" target="_top">Construct&nbsp;An&nbsp;AD&nbsp;Object&nbsp;From&nbsp;its&nbsp;Base&nbsp;Type</a><br>
&#160;&#160;&#160;&#160;&#160;convert<b>&nbsp;</b>to<b>&nbsp;</b>AD&#160;<a href="frombase.cpp.htm" target="_top">AD&nbsp;Constructor&nbsp;From&nbsp;Base&nbsp;Type:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;type<b>&nbsp;</b>require&#160;<a href="cppad_frame2.htm#Base Type Requirements" target="frame1"><i>A&nbsp;Package&nbsp;for&nbsp;Differentiation&nbsp;of&nbsp;C++&nbsp;Algorithms:&nbsp;CppAD&nbsp;Version&nbsp;05-07-05:&#160;Base&nbsp;Type&nbsp;Requirements</i></a><br>
base<b>&nbsp;</b>10<br>
&#160;&#160;&#160;&#160;&#160;log&#160;<a href="log10.htm" target="_top">The&nbsp;Log&nbsp;Base&nbsp;10&nbsp;Function</a><br>
binary&#160;<a href="theoryexambinary.htm" target="_top">A&nbsp;Binary&nbsp;Representation&nbsp;of&nbsp;the&nbsp;Procedure</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="binaryop.htm" target="_top">Base&nbsp;Type&nbsp;Binary&nbsp;Operators</a><br>
&#160;&#160;&#160;&#160;&#160;<b>*</b>&#160;<a href="mul.htm" target="_top">The&nbsp;AD&nbsp;Binary&nbsp;Multiplication&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;<b>+</b>&#160;<a href="add.htm" target="_top">The&nbsp;AD&nbsp;Binary&nbsp;Addition&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;<b>-</b>&#160;<a href="div.htm" target="_top">The&nbsp;AD&nbsp;Binary&nbsp;Division&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;<b>-</b>&#160;<a href="sub.htm" target="_top">The&nbsp;AD&nbsp;Binary&nbsp;Subtraction&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;division&#160;<a href="div.htm" target="_top">The&nbsp;AD&nbsp;Binary&nbsp;Division&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;multiply&#160;<a href="mul.htm" target="_top">The&nbsp;AD&nbsp;Binary&nbsp;Multiplication&nbsp;Operator</a><br>
bool&#160;<a href="boolfun.htm" target="_top">Defining&nbsp;Boolean&nbsp;Functions&nbsp;with&nbsp;AD&nbsp;Arguments</a><br>
bugs&#160;<a href="faq_frame1.htm#Bugs" target="frame1"><i>Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Bugs</i></a><br>

<b><big><a name="C">C</a></big></b>
<br>
C<b>++</b><br>
&#160;&#160;&#160;&#160;&#160;algorithm<b>&nbsp;</b>derivative&#160;<a href="cppad.htm" target="_top">A&nbsp;Package&nbsp;for&nbsp;Differentiation&nbsp;of&nbsp;C++&nbsp;Algorithms:&nbsp;CppAD&nbsp;Version&nbsp;05-07-05</a><br>
CheckSimpleVector&#160;<a href="checksimplevector.cpp.htm" target="_top">The&nbsp;CheckSimpleVector&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
Compare<br>
&#160;&#160;&#160;&#160;&#160;tape<b>&nbsp;</b>operator&#160;<a href="adfun_frame2.htm#CompareChange" target="frame1"><i>Constructing&nbsp;Differentiable&nbsp;Functions&nbsp;From&nbsp;The&nbsp;Tape:&#160;CompareChange</i></a><br>
CondExp&#160;<a href="condexp.cpp.htm" target="_top">Conditional&nbsp;Expressions:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
CppAD<br>
&#160;&#160;&#160;&#160;&#160;CppAD<b>&nbsp;</b>namespace&#160;<a href="cppad_frame2.htm#Syntax.using namespace CppAD" target="frame1"><i>A&nbsp;Package&nbsp;for&nbsp;Differentiation&nbsp;of&nbsp;C++&nbsp;Algorithms:&nbsp;CppAD&nbsp;Version&nbsp;05-07-05:&#160;Syntax.using&nbsp;namespace&nbsp;CppAD</i></a><br>
&#160;&#160;&#160;&#160;&#160;include<b>&nbsp;</b>CppAD&#160;<a href="cppad_frame2.htm#Syntax.include CppAD.h" target="frame1"><i>A&nbsp;Package&nbsp;for&nbsp;Differentiation&nbsp;of&nbsp;C++&nbsp;Algorithms:&nbsp;CppAD&nbsp;Version&nbsp;05-07-05:&#160;Syntax.include&nbsp;CppAD.h</i></a><br>
&#160;&#160;&#160;&#160;&#160;install<b>&nbsp;</b>windows&#160;<a href="installwindows.htm" target="_top">Windows&nbsp;Installation&nbsp;and&nbsp;Testing</a><br>
&#160;&#160;&#160;&#160;&#160;unix<b>&nbsp;</b>install&#160;<a href="installunix.htm" target="_top">Unix&nbsp;Installation&nbsp;and&nbsp;Testing</a><br>
&#160;&#160;&#160;&#160;&#160;version&#160;<a href="cppad.htm" target="_top">A&nbsp;Package&nbsp;for&nbsp;Differentiation&nbsp;of&nbsp;C++&nbsp;Algorithms:&nbsp;CppAD&nbsp;Version&nbsp;05-07-05</a><br>
CppAD<b>::</b>vector<br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="cppad_vector.cpp.htm" target="_top">CppAD::vector&nbsp;Template&nbsp;Class:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;source&#160;<a href="cppad_vector.h.htm" target="_top">CppAD::vector&nbsp;Source&nbsp;Code</a><br>
CppADError&#160;<a href="cppaderror.htm" target="_top">CppAD&nbsp;Error&nbsp;Detection&nbsp;and&nbsp;Reporting</a><br>
CppADvector&#160;<a href="cppadvector.htm" target="_top">Choosing&nbsp;The&nbsp;CppADvector&nbsp;Template&nbsp;Class</a><br>
check<br>
&#160;&#160;&#160;&#160;&#160;simple<b>&nbsp;</b>vector&#160;<a href="checksimplevector.htm" target="_top">Check&nbsp;Simple&nbsp;Vector&nbsp;Concept</a><br>
class<br>
&#160;&#160;&#160;&#160;&#160;simple<b>&nbsp;</b>vector&#160;<a href="simplevector.htm" target="_top">Definition&nbsp;of&nbsp;a&nbsp;Simple&nbsp;Vector</a><br>
&#160;&#160;&#160;&#160;&#160;template<b>&nbsp;</b>vector&#160;<a href="cppad_vector.htm" target="_top">The&nbsp;CppAD::vector&nbsp;Template&nbsp;Class</a><br>
coefficient&#160;<a href="glossary_frame1.htm#Taylor Coefficient" target="frame1"><i>Glossary:&#160;Taylor&nbsp;Coefficient</i></a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="reverse.htm" target="_top">Reverse&nbsp;Mode</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="forward.htm" target="_top">Forward&nbsp;Mode</a><br>
compare&#160;<a href="fadbad.htm" target="_top">Routines&nbsp;for&nbsp;Comparing&nbsp;CppAD&nbsp;with&nbsp;FADBAD</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="adolc.htm" target="_top">Routines&nbsp;for&nbsp;Comparing&nbsp;CppAD&nbsp;with&nbsp;ADOLC</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="compare.cpp.htm" target="_top">AD&nbsp;Comparison&nbsp;Operators:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;change&#160;<a href="comparechange.cpp.htm" target="_top">CompareChange&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
comparechange&#160;<a href="faq_frame1.htm#CompareChange" target="frame1"><i>Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;CompareChange</i></a><br>
comparison&#160;<a href="compare.htm" target="_top">The&nbsp;AD&nbsp;Comparison&nbsp;Operators</a><br>
complex&#160;<a href="complexpoly.cpp.htm" target="_top">Complex&nbsp;Polynomial:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;boolean&#160;<a href="boolfun.cpp.htm" target="_top">Defining&nbsp;Boolean&nbsp;Functions&nbsp;with&nbsp;AD&nbsp;Arguments:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Lu<b>&nbsp;</b>factor&#160;<a href="detbylu.h.htm" target="_top">Determinant&nbsp;using&nbsp;Lu&nbsp;Factorization:&nbsp;Source&nbsp;Code</a><br>
&#160;&#160;&#160;&#160;&#160;LuSolve&#160;<a href="lusolve.cpp.htm" target="_top">LuSolve&nbsp;With&nbsp;Complex&nbsp;Arguments:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
compute&#160;<a href="compeq.htm" target="_top">Computed&nbsp;Assignment&nbsp;Operators</a><br>
computed<br>
&#160;&#160;&#160;&#160;&#160;<b>*=</b>&#160;<a href="muleq.htm" target="_top">The&nbsp;AD&nbsp;Multiplication&nbsp;Computed&nbsp;Assignment&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;<b>*=&nbsp;</b>example&#160;<a href="muleq.cpp.htm" target="_top">Multiplication&nbsp;Computed&nbsp;Assignment:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;<b>+=</b>&#160;<a href="addeq.htm" target="_top">The&nbsp;AD&nbsp;Addition&nbsp;Computed&nbsp;Assignment&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;<b>+=&nbsp;</b>example&#160;<a href="addeq.cpp.htm" target="_top">Addition&nbsp;Computed&nbsp;Assignment:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;<b>-=</b>&#160;<a href="subeq.htm" target="_top">The&nbsp;AD&nbsp;Subtraction&nbsp;Computed&nbsp;Assignment&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;<b>-=&nbsp;</b>example&#160;<a href="subeq.cpp.htm" target="_top">Subtraction&nbsp;Computed&nbsp;Assignment:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;<b>/=</b>&#160;<a href="diveq.htm" target="_top">The&nbsp;AD&nbsp;Division&nbsp;Computed&nbsp;Assignment&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;<b>/=&nbsp;</b>example&#160;<a href="diveq.cpp.htm" target="_top">Division&nbsp;Computed&nbsp;Assignment:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;add&#160;<a href="boolfun.cpp.htm" target="_top">Defining&nbsp;Boolean&nbsp;Functions&nbsp;with&nbsp;AD&nbsp;Arguments:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
concept<br>
&#160;&#160;&#160;&#160;&#160;check<b>&nbsp;</b>simple<b>&nbsp;</b>vector&#160;<a href="checksimplevector.htm" target="_top">Check&nbsp;Simple&nbsp;Vector&nbsp;Concept</a><br>
conditional<br>
&#160;&#160;&#160;&#160;&#160;expression&#160;<a href="condexp.htm" target="_top">The&nbsp;Conditional&nbsp;Expression&nbsp;Function</a><br>
conditional<b>&nbsp;</b>assign&#160;<a href="discrete_frame2.htm#Conditional Assignment" target="frame1"><i>User&nbsp;Defined&nbsp;Discrete&nbsp;Functions:&#160;Conditional&nbsp;Assignment</i></a><br>
construct&#160;<a href="adfun.htm" target="_top">Constructing&nbsp;Differentiable&nbsp;Functions&nbsp;From&nbsp;The&nbsp;Tape</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="vecad_frame2.htm#Constructor" target="frame1"><i>Vectors&nbsp;That&nbsp;Record&nbsp;Indexing&nbsp;Operations:&#160;Constructor</i></a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="copy.htm" target="_top">Creating&nbsp;A&nbsp;Copy&nbsp;of&nbsp;an&nbsp;AD&nbsp;Variable</a><br>
&#160;&#160;&#160;&#160;&#160;default&#160;<a href="default.cpp.htm" target="_top">Default&nbsp;AD&nbsp;Constructor:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;default&#160;<a href="default.htm" target="_top">The&nbsp;Default&nbsp;AD&nbsp;Constructor</a><br>
&#160;&#160;&#160;&#160;&#160;from<b>&nbsp;</b>base<b>&nbsp;</b>type&#160;<a href="frombase.cpp.htm" target="_top">AD&nbsp;Constructor&nbsp;From&nbsp;Base&nbsp;Type:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;from<b>&nbsp;</b>base<b>&nbsp;</b>type&#160;<a href="frombase.htm" target="_top">Construct&nbsp;An&nbsp;AD&nbsp;Object&nbsp;From&nbsp;its&nbsp;Base&nbsp;Type</a><br>
constructor<br>
&#160;&#160;&#160;&#160;&#160;copy<b>&nbsp;</b>vector&#160;<a href="simplevector_frame1.htm#Copy Constructor" target="frame1"><i>Definition&nbsp;of&nbsp;a&nbsp;Simple&nbsp;Vector:&#160;Copy&nbsp;Constructor</i></a><br>
&#160;&#160;&#160;&#160;&#160;element&#160;<a href="simplevector_frame1.htm#Element Constructor and Destructor" target="frame1"><i>Definition&nbsp;of&nbsp;a&nbsp;Simple&nbsp;Vector:&#160;Element&nbsp;Constructor&nbsp;and&nbsp;Destructor</i></a><br>
&#160;&#160;&#160;&#160;&#160;size<b>&nbsp;</b>vector&#160;<a href="simplevector_frame1.htm#Sizing Constructor" target="frame1"><i>Definition&nbsp;of&nbsp;a&nbsp;Simple&nbsp;Vector:&#160;Sizing&nbsp;Constructor</i></a><br>
&#160;&#160;&#160;&#160;&#160;vector<b>&nbsp;</b>default&#160;<a href="simplevector_frame1.htm#Default Constructor" target="frame1"><i>Definition&nbsp;of&nbsp;a&nbsp;Simple&nbsp;Vector:&#160;Default&nbsp;Constructor</i></a><br>
control<br>
&#160;&#160;&#160;&#160;&#160;ODE<b>&nbsp;</b>error&#160;<a href="odeerrcontrol.htm" target="_top">An&nbsp;Error&nbsp;Controller&nbsp;for&nbsp;ODE&nbsp;Solvers</a><br>
convert<br>
&#160;&#160;&#160;&#160;&#160;from<b>&nbsp;</b>base<b>&nbsp;</b>to<b>&nbsp;</b>AD<b>&nbsp;</b>type&#160;<a href="frombase.htm" target="_top">Construct&nbsp;An&nbsp;AD&nbsp;Object&nbsp;From&nbsp;its&nbsp;Base&nbsp;Type</a><br>
copy&#160;<a href="copy.cpp.htm" target="_top">AD&nbsp;Copy&nbsp;Constructor:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;<a href="copy.htm" target="_top">Creating&nbsp;A&nbsp;Copy&nbsp;of&nbsp;an&nbsp;AD&nbsp;Variable</a><br>
&#160;&#160;&#160;&#160;&#160;vector<b>&nbsp;</b>constructor&#160;<a href="simplevector_frame1.htm#Copy Constructor" target="frame1"><i>Definition&nbsp;of&nbsp;a&nbsp;Simple&nbsp;Vector:&#160;Copy&nbsp;Constructor</i></a><br>
cos&#160;<a href="cos.cpp.htm" target="_top">The&nbsp;Cosine&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;<a href="cos.htm" target="_top">The&nbsp;Cosine&nbsp;Function</a><br>
&#160;&#160;&#160;&#160;&#160;forward<b>&nbsp;</b>theory&#160;<a href="cosforward.htm" target="_top">Cosine&nbsp;Function&nbsp;Forward&nbsp;Taylor&nbsp;Polynomial&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;inverse&#160;<a href="acos.htm" target="_top">The&nbsp;Inverse&nbsp;Cosine&nbsp;Function</a><br>
&#160;&#160;&#160;&#160;&#160;reverse<b>&nbsp;</b>theory&#160;<a href="sincosreverse.htm" target="_top">Sine&nbsp;and&nbsp;Cosine&nbsp;Functions&nbsp;Reverse&nbsp;Mode&nbsp;Theory</a><br>
cppadvector&#160;<a href="faq_frame1.htm#Namespace.CppADvector" target="frame1"><i>Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Namespace.CppADvector</i></a><br>

<b><big><a name="D">D</a></big></b>
<br>
DetByLu&#160;<a href="detbylu.h.htm" target="_top">Determinant&nbsp;using&nbsp;Lu&nbsp;Factorization:&nbsp;Source&nbsp;Code</a><br>
DetByMinor&#160;<a href="detbyminor.h.htm" target="_top">Determinant&nbsp;using&nbsp;Expansion&nbsp;by&nbsp;Minors:&nbsp;Source&nbsp;Code</a><br>
DetOfMinor&#160;<a href="detofminor.h.htm" target="_top">Compute&nbsp;the&nbsp;Determinant&nbsp;of&nbsp;a&nbsp;Minor:&nbsp;Source&nbsp;Code</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="detofminor.htm" target="_top">Compute&nbsp;the&nbsp;Determinant&nbsp;of&nbsp;a&nbsp;Minor</a><br>
Domain<br>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="adfun_frame2.htm#Domain" target="frame1"><i>Constructing&nbsp;Differentiable&nbsp;Functions&nbsp;From&nbsp;The&nbsp;Tape:&#160;Domain</i></a><br>
default<br>
&#160;&#160;&#160;&#160;&#160;construct&#160;<a href="default.cpp.htm" target="_top">Default&nbsp;AD&nbsp;Constructor:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;construct&#160;<a href="default.htm" target="_top">The&nbsp;Default&nbsp;AD&nbsp;Constructor</a><br>
&#160;&#160;&#160;&#160;&#160;vector<b>&nbsp;</b>constructor&#160;<a href="simplevector_frame1.htm#Default Constructor" target="frame1"><i>Definition&nbsp;of&nbsp;a&nbsp;Simple&nbsp;Vector:&#160;Default&nbsp;Constructor</i></a><br>
dependent&#160;<a href="glossary_frame1.htm#Dependent Variable" target="frame1"><i>Glossary:&#160;Dependent&nbsp;Variable</i></a><br>
derivative&#160;<a href="reverse.htm" target="_top">Reverse&nbsp;Mode</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="forward.htm" target="_top">Forward&nbsp;Mode</a><br>
&#160;&#160;&#160;&#160;&#160;easy&#160;<a href="revone.htm" target="_top">Derivative&nbsp;of&nbsp;One&nbsp;Range&nbsp;Component:&nbsp;Reverse&nbsp;Mode&nbsp;Easy&nbsp;Driver</a><br>
&#160;&#160;&#160;&#160;&#160;first<b>&nbsp;</b>easy&#160;<a href="jacobian.htm" target="_top">Jacobian:&nbsp;Easy&nbsp;Driver</a><br>
&#160;&#160;&#160;&#160;&#160;one<b>&nbsp;</b>component&#160;<a href="revone.h.htm" target="_top">Derivative&nbsp;of&nbsp;One&nbsp;Range&nbsp;Component:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;one<b>&nbsp;</b>component&#160;<a href="forone.h.htm" target="_top">Partial&nbsp;w.r.t&nbsp;One&nbsp;Domain&nbsp;Component:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;polynomial&#160;<a href="polynomial.htm" target="_top">Polynomials&nbsp;and&nbsp;Their&nbsp;Derivatives</a><br>
&#160;&#160;&#160;&#160;&#160;polynomial<b>&nbsp;</b>template&#160;<a href="poly.htm" target="_top">Evaluate&nbsp;a&nbsp;Polynomial&nbsp;or&nbsp;its&nbsp;Derivative</a><br>
&#160;&#160;&#160;&#160;&#160;second<b>&nbsp;</b>easy&#160;<a href="revtwo.htm" target="_top">Subset&nbsp;of&nbsp;Second&nbsp;Partial&nbsp;Derivatives:&nbsp;Reverse&nbsp;Mode&nbsp;Easy&nbsp;Driver</a><br>
&#160;&#160;&#160;&#160;&#160;second<b>&nbsp;</b>easy&#160;<a href="fortwo.htm" target="_top">Subset&nbsp;of&nbsp;Second&nbsp;Partial&nbsp;Derivatives:&nbsp;Forward&nbsp;Mode&nbsp;Easy&nbsp;Driver</a><br>
&#160;&#160;&#160;&#160;&#160;tape<b>&nbsp;</b>calculation&#160;<a href="multape.htm" target="_top">Using&nbsp;Multiple&nbsp;Tapes</a><br>
destructor<br>
&#160;&#160;&#160;&#160;&#160;element&#160;<a href="simplevector_frame1.htm#Element Constructor and Destructor" target="frame1"><i>Definition&nbsp;of&nbsp;a&nbsp;Simple&nbsp;Vector:&#160;Element&nbsp;Constructor&nbsp;and&nbsp;Destructor</i></a><br>
determinant&#160;<a href="detbyminor.h.htm" target="_top">Determinant&nbsp;using&nbsp;Expansion&nbsp;by&nbsp;Minors:&nbsp;Source&nbsp;Code</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="detofminor.h.htm" target="_top">Compute&nbsp;the&nbsp;Determinant&nbsp;of&nbsp;a&nbsp;Minor:&nbsp;Source&nbsp;Code</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="detofminor.htm" target="_top">Compute&nbsp;the&nbsp;Determinant&nbsp;of&nbsp;a&nbsp;Minor</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="lufactor_frame2.htm#LU.Determinant" target="frame1"><i>LU&nbsp;Factorization&nbsp;of&nbsp;A&nbsp;Square&nbsp;Matrix:&#160;LU.Determinant</i></a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="ludetandsolve.htm" target="_top">Compute&nbsp;Determinants&nbsp;and&nbsp;Solve&nbsp;Equations&nbsp;by&nbsp;LU&nbsp;Factorization</a><br>
&#160;&#160;&#160;&#160;&#160;ADOLC&#160;<a href="detluadolc.cpp.htm" target="_top">ADOLC&nbsp;&amp;&nbsp;CppAD&nbsp;Gradient&nbsp;of&nbsp;Determinant&nbsp;by&nbsp;Lu&nbsp;Factorization</a><br>
&#160;&#160;&#160;&#160;&#160;ADOLC&#160;<a href="detminoradolc.cpp.htm" target="_top">ADOLC&nbsp;&amp;&nbsp;CppAD&nbsp;Gradient&nbsp;of&nbsp;Determinant&nbsp;by&nbsp;Minors</a><br>
&#160;&#160;&#160;&#160;&#160;by<b>&nbsp;</b>minors&#160;<a href="detbylu.cpp.htm" target="_top">Determinant&nbsp;Using&nbsp;Lu&nbsp;Factorization:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;by<b>&nbsp;</b>minors&#160;<a href="detbyminor.cpp.htm" target="_top">Determinant&nbsp;Using&nbsp;Expansion&nbsp;by&nbsp;Minors:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;by<b>&nbsp;</b>minors&#160;<a href="detofminor.cpp.htm" target="_top">Determinant&nbsp;of&nbsp;a&nbsp;Minor:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;FADBAD&#160;<a href="detlufadbad.cpp.htm" target="_top">FADBAD&nbsp;&amp;&nbsp;CppAD&nbsp;Gradient&nbsp;of&nbsp;Determinant&nbsp;by&nbsp;Lu&nbsp;Factorization</a><br>
&#160;&#160;&#160;&#160;&#160;FADBAD&#160;<a href="detminorfadbad.cpp.htm" target="_top">FADBAD&nbsp;&amp;&nbsp;CppAD&nbsp;Gradient&nbsp;of&nbsp;Determinant&nbsp;by&nbsp;Minors</a><br>
&#160;&#160;&#160;&#160;&#160;Lu&#160;<a href="luvecad.htm" target="_top">Lu&nbsp;Factor&nbsp;and&nbsp;Solve&nbsp;with&nbsp;Recorded&nbsp;Pivoting</a><br>
&#160;&#160;&#160;&#160;&#160;Lu&#160;<a href="lusolve.htm" target="_top">Compute&nbsp;Determinant&nbsp;and&nbsp;Solve&nbsp;Linear&nbsp;Equations</a><br>
&#160;&#160;&#160;&#160;&#160;Lu<b>&nbsp;</b>factor&#160;<a href="detbylu.htm" target="_top">Determinant&nbsp;Using&nbsp;Lu&nbsp;Factorization</a><br>
&#160;&#160;&#160;&#160;&#160;Lu<b>&nbsp;</b>factor&#160;<a href="lufactor.htm" target="_top">LU&nbsp;Factorization&nbsp;of&nbsp;A&nbsp;Square&nbsp;Matrix</a><br>
&#160;&#160;&#160;&#160;&#160;Lu<b>&nbsp;</b>speed&#160;<a href="detluspeed.cpp.htm" target="_top">Determinant&nbsp;by&nbsp;Lu&nbsp;Factor&nbsp;and&nbsp;Solve:&nbsp;Speed&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;minors<b>&nbsp;</b>speed&#160;<a href="detminorspeed.cpp.htm" target="_top">Determinant&nbsp;Using&nbsp;Expansion&nbsp;by&nbsp;Minors:&nbsp;Speed&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;source<b>&nbsp;</b>code&#160;<a href="lusolve.h.htm" target="_top">LuSolve&nbsp;Source&nbsp;Code</a><br>
difference<br>
&#160;&#160;&#160;&#160;&#160;absolute<b>&nbsp;</b>or<b>&nbsp;</b>relative&#160;<a href="nearequal.htm" target="_top">Determine&nbsp;if&nbsp;Two&nbsp;Values&nbsp;Are&nbsp;Nearly&nbsp;Equal</a><br>
differentiable&#160;<a href="adfun.htm" target="_top">Constructing&nbsp;Differentiable&nbsp;Functions&nbsp;From&nbsp;The&nbsp;Tape</a><br>
differential&#160;<a href="odespeed.cpp.htm" target="_top">ODE&nbsp;Solver:&nbsp;Speed&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;equation&#160;<a href="rosen34.htm" target="_top">A&nbsp;3rd&nbsp;and&nbsp;4th&nbsp;Order&nbsp;Rosenbrock&nbsp;ODE&nbsp;Solver</a><br>
&#160;&#160;&#160;&#160;&#160;equation&#160;<a href="runge45.htm" target="_top">An&nbsp;Embedded&nbsp;4th&nbsp;and&nbsp;5th&nbsp;Order&nbsp;Runge-Kutta&nbsp;ODE&nbsp;Solver</a><br>
&#160;&#160;&#160;&#160;&#160;ODE<b>&nbsp;</b>error<b>&nbsp;</b>control&#160;<a href="odeerrcontrol.htm" target="_top">An&nbsp;Error&nbsp;Controller&nbsp;for&nbsp;ODE&nbsp;Solvers</a><br>
differentiation<br>
&#160;&#160;&#160;&#160;&#160;algorithm&#160;<a href="cppad.htm" target="_top">A&nbsp;Package&nbsp;for&nbsp;Differentiation&nbsp;of&nbsp;C++&nbsp;Algorithms:&nbsp;CppAD&nbsp;Version&nbsp;05-07-05</a><br>
direction<br>
&#160;&#160;&#160;&#160;&#160;times<b>&nbsp;</b>Hessian&#160;<a href="hestimesdir.cpp.htm" target="_top">Hessian&nbsp;Times&nbsp;Direction:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
discrete&#160;<a href="discrete.cpp.htm" target="_top">User&nbsp;Defined&nbsp;Discrete&nbsp;Functions:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
disk&#160;<a href="faq_frame1.htm#Tape Storage: Disk or Memory" target="frame1"><i>Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Tape&nbsp;Storage:&nbsp;Disk&nbsp;or&nbsp;Memory</i></a><br>
divide<br>
&#160;&#160;&#160;&#160;&#160;<b>/=</b>&#160;<a href="diveq.htm" target="_top">The&nbsp;AD&nbsp;Division&nbsp;Computed&nbsp;Assignment&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;<b>/=&nbsp;</b>example&#160;<a href="diveq.cpp.htm" target="_top">Division&nbsp;Computed&nbsp;Assignment:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
division<br>
&#160;&#160;&#160;&#160;&#160;binary&#160;<a href="div.htm" target="_top">The&nbsp;AD&nbsp;Binary&nbsp;Division&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="div.cpp.htm" target="_top">Binary&nbsp;Division:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
driver<br>
&#160;&#160;&#160;&#160;&#160;easy&#160;<a href="drivers.htm" target="_top">First&nbsp;and&nbsp;Second&nbsp;Derivatives:&nbsp;Easy&nbsp;Drivers</a><br>
&#160;&#160;&#160;&#160;&#160;easy<b>&nbsp;</b>derivative&#160;<a href="revone.htm" target="_top">Derivative&nbsp;of&nbsp;One&nbsp;Range&nbsp;Component:&nbsp;Reverse&nbsp;Mode&nbsp;Easy&nbsp;Driver</a><br>
&#160;&#160;&#160;&#160;&#160;easy<b>&nbsp;</b>first<b>&nbsp;</b>derivative&#160;<a href="jacobian.htm" target="_top">Jacobian:&nbsp;Easy&nbsp;Driver</a><br>
&#160;&#160;&#160;&#160;&#160;easy<b>&nbsp;</b>partial&#160;<a href="forone.htm" target="_top">Partial&nbsp;w.r.t&nbsp;One&nbsp;Domain&nbsp;Component:&nbsp;Forward&nbsp;Mode&nbsp;Easy&nbsp;Driver</a><br>
&#160;&#160;&#160;&#160;&#160;easy<b>&nbsp;</b>second<b>&nbsp;</b>derivative&#160;<a href="revtwo.htm" target="_top">Subset&nbsp;of&nbsp;Second&nbsp;Partial&nbsp;Derivatives:&nbsp;Reverse&nbsp;Mode&nbsp;Easy&nbsp;Driver</a><br>
&#160;&#160;&#160;&#160;&#160;easy<b>&nbsp;</b>second<b>&nbsp;</b>derivative&#160;<a href="fortwo.htm" target="_top">Subset&nbsp;of&nbsp;Second&nbsp;Partial&nbsp;Derivatives:&nbsp;Forward&nbsp;Mode&nbsp;Easy&nbsp;Driver</a><br>
&#160;&#160;&#160;&#160;&#160;Hessian&#160;<a href="hessian.htm" target="_top">Hessian&nbsp;of&nbsp;One&nbsp;Component:&nbsp;Easy&nbsp;Driver</a><br>

<b><big><a name="E">E</a></big></b>
<br>
easy<br>
&#160;&#160;&#160;&#160;&#160;derivative&#160;<a href="revone.htm" target="_top">Derivative&nbsp;of&nbsp;One&nbsp;Range&nbsp;Component:&nbsp;Reverse&nbsp;Mode&nbsp;Easy&nbsp;Driver</a><br>
&#160;&#160;&#160;&#160;&#160;driver&#160;<a href="drivers.htm" target="_top">First&nbsp;and&nbsp;Second&nbsp;Derivatives:&nbsp;Easy&nbsp;Drivers</a><br>
&#160;&#160;&#160;&#160;&#160;first<b>&nbsp;</b>derivative<b>&nbsp;</b>driver&#160;<a href="jacobian.htm" target="_top">Jacobian:&nbsp;Easy&nbsp;Driver</a><br>
&#160;&#160;&#160;&#160;&#160;Hessian&#160;<a href="hessian.htm" target="_top">Hessian&nbsp;of&nbsp;One&nbsp;Component:&nbsp;Easy&nbsp;Driver</a><br>
&#160;&#160;&#160;&#160;&#160;partial&#160;<a href="forone.htm" target="_top">Partial&nbsp;w.r.t&nbsp;One&nbsp;Domain&nbsp;Component:&nbsp;Forward&nbsp;Mode&nbsp;Easy&nbsp;Driver</a><br>
&#160;&#160;&#160;&#160;&#160;second<b>&nbsp;</b>derivative&#160;<a href="revtwo.htm" target="_top">Subset&nbsp;of&nbsp;Second&nbsp;Partial&nbsp;Derivatives:&nbsp;Reverse&nbsp;Mode&nbsp;Easy&nbsp;Driver</a><br>
&#160;&#160;&#160;&#160;&#160;second<b>&nbsp;</b>derivative&#160;<a href="fortwo.htm" target="_top">Subset&nbsp;of&nbsp;Second&nbsp;Partial&nbsp;Derivatives:&nbsp;Forward&nbsp;Mode&nbsp;Easy&nbsp;Driver</a><br>
elementary&#160;<a href="glossary_frame1.htm#Elementary Vector" target="frame1"><i>Glossary:&#160;Elementary&nbsp;Vector</i></a><br>
empty&#160;<a href="glossary_frame1.htm#Tape State.Empty" target="frame1"><i>Glossary:&#160;Tape&nbsp;State.Empty</i></a><br>
equal<br>
&#160;&#160;&#160;&#160;&#160;near&#160;<a href="nearequal.htm" target="_top">Determine&nbsp;if&nbsp;Two&nbsp;Values&nbsp;Are&nbsp;Nearly&nbsp;Equal</a><br>
equation&#160;<a href="odespeed.cpp.htm" target="_top">ODE&nbsp;Solver:&nbsp;Speed&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;differential&#160;<a href="rosen34.htm" target="_top">A&nbsp;3rd&nbsp;and&nbsp;4th&nbsp;Order&nbsp;Rosenbrock&nbsp;ODE&nbsp;Solver</a><br>
&#160;&#160;&#160;&#160;&#160;differential&#160;<a href="runge45.htm" target="_top">An&nbsp;Embedded&nbsp;4th&nbsp;and&nbsp;5th&nbsp;Order&nbsp;Runge-Kutta&nbsp;ODE&nbsp;Solver</a><br>
&#160;&#160;&#160;&#160;&#160;Lu<b>&nbsp;</b>factor&#160;<a href="lufactor.htm" target="_top">LU&nbsp;Factorization&nbsp;of&nbsp;A&nbsp;Square&nbsp;Matrix</a><br>
&#160;&#160;&#160;&#160;&#160;Lu<b>&nbsp;</b>invert&#160;<a href="luinvert.htm" target="_top">Invert&nbsp;an&nbsp;LU&nbsp;Factored&nbsp;Equation</a><br>
&#160;&#160;&#160;&#160;&#160;linear&#160;<a href="lusolve.htm" target="_top">Compute&nbsp;Determinant&nbsp;and&nbsp;Solve&nbsp;Linear&nbsp;Equations</a><br>
&#160;&#160;&#160;&#160;&#160;linear&#160;<a href="ludetandsolve.htm" target="_top">Compute&nbsp;Determinants&nbsp;and&nbsp;Solve&nbsp;Equations&nbsp;by&nbsp;LU&nbsp;Factorization</a><br>
&#160;&#160;&#160;&#160;&#160;ODE<b>&nbsp;</b>error<b>&nbsp;</b>control&#160;<a href="odeerrcontrol.htm" target="_top">An&nbsp;Error&nbsp;Controller&nbsp;for&nbsp;ODE&nbsp;Solvers</a><br>
&#160;&#160;&#160;&#160;&#160;solve<b>&nbsp;</b>linear&#160;<a href="luvecad.htm" target="_top">Lu&nbsp;Factor&nbsp;and&nbsp;Solve&nbsp;with&nbsp;Recorded&nbsp;Pivoting</a><br>
erf&#160;<a href="erf.cpp.htm" target="_top">The&nbsp;Error&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
error<br>
&#160;&#160;&#160;&#160;&#160;assert<b>&nbsp;</b>macro&#160;<a href="cppaderror.htm" target="_top">CppAD&nbsp;Error&nbsp;Detection&nbsp;and&nbsp;Reporting</a><br>
&#160;&#160;&#160;&#160;&#160;control<b>&nbsp;</b>ODE&#160;<a href="odeerrcontrol.htm" target="_top">An&nbsp;Error&nbsp;Controller&nbsp;for&nbsp;ODE&nbsp;Solvers</a><br>
evaluation&#160;<a href="theoryexameval.htm" target="_top">An&nbsp;Evaluation&nbsp;of&nbsp;the&nbsp;Binary&nbsp;Representation</a><br>
example&#160;<a href="theoryexamrev.htm" target="_top">A&nbsp;Reverse&nbsp;Mode&nbsp;Evaluation</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="theoryrevnotation.htm" target="_top">Function&nbsp;Definitions&nbsp;for&nbsp;Understanding&nbsp;Reverse&nbsp;Mode&nbsp;Evaluation</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="theoryexamfor.htm" target="_top">A&nbsp;Forward&nbsp;Mode&nbsp;Evaluation</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="theoryexameval.htm" target="_top">An&nbsp;Evaluation&nbsp;of&nbsp;the&nbsp;Binary&nbsp;Representation</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="theoryexambinary.htm" target="_top">A&nbsp;Binary&nbsp;Representation&nbsp;of&nbsp;the&nbsp;Procedure</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="theoryexamproc.htm" target="_top">A&nbsp;Procedural&nbsp;Representation&nbsp;of&nbsp;the&nbsp;Example&nbsp;Function</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="theoryexamfun.htm" target="_top">An&nbsp;Example&nbsp;Function</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="example.cpp.htm" target="_top">Program&nbsp;That&nbsp;Runs&nbsp;the&nbsp;CppAD&nbsp;Example&nbsp;Suite</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="realistic.htm" target="_top">Examples&nbsp;Using&nbsp;CppAD&nbsp;in&nbsp;a&nbsp;Realistic&nbsp;Application</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="output.cpp.htm" target="_top">The&nbsp;Output&nbsp;Operator&nbsp;for&nbsp;AD&nbsp;Objects:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;<b>*=</b>&#160;<a href="muleq.cpp.htm" target="_top">Multiplication&nbsp;Computed&nbsp;Assignment:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;<b>+=</b>&#160;<a href="addeq.cpp.htm" target="_top">Addition&nbsp;Computed&nbsp;Assignment:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;<b>-=</b>&#160;<a href="subeq.cpp.htm" target="_top">Subtraction&nbsp;Computed&nbsp;Assignment:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;<b>/</b>&#160;<a href="div.cpp.htm" target="_top">Binary&nbsp;Division:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;<b>/=</b>&#160;<a href="diveq.cpp.htm" target="_top">Division&nbsp;Computed&nbsp;Assignment:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="fun.h.htm" target="_top">Differentiable&nbsp;Function&nbsp;Constructor:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;abs&#160;<a href="abs.cpp.htm" target="_top">The&nbsp;Absolute&nbsp;Value&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;acos&#160;<a href="acos.cpp.htm" target="_top">The&nbsp;Acos&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;add&#160;<a href="add.cpp.htm" target="_top">Binary&nbsp;Addition:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;asin&#160;<a href="asin.cpp.htm" target="_top">The&nbsp;Asin&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;assign&#160;<a href="eq.cpp.htm" target="_top">AD&nbsp;Assignment&nbsp;Operator:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;atan&#160;<a href="atan.cpp.htm" target="_top">The&nbsp;Atan&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;atan2&#160;<a href="atan2.cpp.htm" target="_top">The&nbsp;Two&nbsp;Argument&nbsp;Inverse&nbsp;Tangent:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;boolean&#160;<a href="boolfun.cpp.htm" target="_top">Defining&nbsp;Boolean&nbsp;Functions&nbsp;with&nbsp;AD&nbsp;Arguments:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;CompareChange&#160;<a href="comparechange.cpp.htm" target="_top">CompareChange&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;CondExp&#160;<a href="condexp.cpp.htm" target="_top">Conditional&nbsp;Expressions:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;CppAD<b>::</b>vector&#160;<a href="cppad_vector.cpp.htm" target="_top">CppAD::vector&nbsp;Template&nbsp;Class:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;check<b>&nbsp;</b>SimpleVector&#160;<a href="checksimplevector.cpp.htm" target="_top">The&nbsp;CheckSimpleVector&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;compare&#160;<a href="compare.cpp.htm" target="_top">AD&nbsp;Comparison&nbsp;Operators:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;complex&#160;<a href="lusolve.cpp.htm" target="_top">LuSolve&nbsp;With&nbsp;Complex&nbsp;Arguments:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;complex<b>&nbsp;</b>polynomial&#160;<a href="complexpoly.cpp.htm" target="_top">Complex&nbsp;Polynomial:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;construct<b>&nbsp;</b>from<b>&nbsp;</b>base&#160;<a href="frombase.cpp.htm" target="_top">AD&nbsp;Constructor&nbsp;From&nbsp;Base&nbsp;Type:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;copy&#160;<a href="copy.cpp.htm" target="_top">AD&nbsp;Copy&nbsp;Constructor:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;cos&#160;<a href="cos.cpp.htm" target="_top">The&nbsp;Cosine&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;default<b>&nbsp;</b>constructor&#160;<a href="default.cpp.htm" target="_top">Default&nbsp;AD&nbsp;Constructor:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;derivative&#160;<a href="revone.h.htm" target="_top">Derivative&nbsp;of&nbsp;One&nbsp;Range&nbsp;Component:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;determinant<b>&nbsp;</b>by<b>&nbsp;</b>minors&#160;<a href="detbylu.cpp.htm" target="_top">Determinant&nbsp;Using&nbsp;Lu&nbsp;Factorization:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;determinant<b>&nbsp;</b>by<b>&nbsp;</b>minors&#160;<a href="detbyminor.cpp.htm" target="_top">Determinant&nbsp;Using&nbsp;Expansion&nbsp;by&nbsp;Minors:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;determinant<b>&nbsp;</b>by<b>&nbsp;</b>minors&#160;<a href="detofminor.cpp.htm" target="_top">Determinant&nbsp;of&nbsp;a&nbsp;Minor:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;discrete&#160;<a href="discrete.cpp.htm" target="_top">User&nbsp;Defined&nbsp;Discrete&nbsp;Functions:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;division&#160;<a href="div.cpp.htm" target="_top">Binary&nbsp;Division:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;erf&#160;<a href="erf.cpp.htm" target="_top">The&nbsp;Error&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Forward&#160;<a href="forward.h.htm" target="_top">Forward&nbsp;Mode:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;forward<b>&nbsp;</b>print&#160;<a href="printfor.cpp.htm" target="_top">Printing&nbsp;During&nbsp;Forward&nbsp;Mode:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;gradient&#160;<a href="hesludet.cpp.htm" target="_top">Gradient&nbsp;of&nbsp;Determinant&nbsp;Using&nbsp;LU&nbsp;Factorization:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;gradient&#160;<a href="hesminordet.cpp.htm" target="_top">Gradient&nbsp;of&nbsp;Determinant&nbsp;Using&nbsp;Expansion&nbsp;by&nbsp;Minors:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;gradient&#160;<a href="jacludet.cpp.htm" target="_top">Gradient&nbsp;of&nbsp;Determinant&nbsp;Using&nbsp;Lu&nbsp;Factorization:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;gradient&#160;<a href="jacminordet.cpp.htm" target="_top">Gradient&nbsp;of&nbsp;Determinant&nbsp;Using&nbsp;Expansion&nbsp;by&nbsp;Minors:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Hessian&#160;<a href="hessian.h.htm" target="_top">Hessian&nbsp;of&nbsp;Scalar&nbsp;Valued&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Jacobian&#160;<a href="jacobian.h.htm" target="_top">Derivative&nbsp;of&nbsp;Vector&nbsp;Valued&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;LU&#160;<a href="hesludet.cpp.htm" target="_top">Gradient&nbsp;of&nbsp;Determinant&nbsp;Using&nbsp;LU&nbsp;Factorization:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Lu&#160;<a href="jacludet.cpp.htm" target="_top">Gradient&nbsp;of&nbsp;Determinant&nbsp;Using&nbsp;Lu&nbsp;Factorization:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Lu<b>&nbsp;</b>record<b>&nbsp;</b>pivot&#160;<a href="luvecadok.cpp.htm" target="_top">Lu&nbsp;Factor&nbsp;and&nbsp;Solve&nbsp;With&nbsp;Recorded&nbsp;Pivoting:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;LuFactor&#160;<a href="lufactor.cpp.htm" target="_top">LuFactor:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;LuInvert&#160;<a href="luinvert.cpp.htm" target="_top">LuInvert:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;LuSolve&#160;<a href="lusolve.cpp.htm" target="_top">LuSolve&nbsp;With&nbsp;Complex&nbsp;Arguments:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;log&#160;<a href="log10.cpp.htm" target="_top">The&nbsp;Base&nbsp;10&nbsp;Logarithm&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;log&#160;<a href="log.cpp.htm" target="_top">The&nbsp;Logarithm&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;minors<b>&nbsp;</b>expansion&#160;<a href="hesminordet.cpp.htm" target="_top">Gradient&nbsp;of&nbsp;Determinant&nbsp;Using&nbsp;Expansion&nbsp;by&nbsp;Minors:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;minors<b>&nbsp;</b>expansion&#160;<a href="jacminordet.cpp.htm" target="_top">Gradient&nbsp;of&nbsp;Determinant&nbsp;Using&nbsp;Expansion&nbsp;by&nbsp;Minors:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;minus&#160;<a href="sub.cpp.htm" target="_top">Binary&nbsp;Subtraction:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;multiply&#160;<a href="mul.cpp.htm" target="_top">Binary&nbsp;Multiplication:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;NearEqual&#160;<a href="near_equal.cpp.htm" target="_top">NearEqual&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;negative&#160;<a href="neg.cpp.htm" target="_top">Negative&nbsp;Operator:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;ODE&#160;<a href="odetaylor.cpp.htm" target="_top">Taylor's&nbsp;Method&nbsp;Ode&nbsp;Solver:&nbsp;An&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;OdeErrControl&#160;<a href="odeerrcontrol.cpp.htm" target="_top">OdeErrControl:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;output&#160;<a href="output.cpp.htm" target="_top">The&nbsp;Output&nbsp;Operator&nbsp;for&nbsp;AD&nbsp;Objects:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;partial&#160;<a href="forone.h.htm" target="_top">Partial&nbsp;w.r.t&nbsp;One&nbsp;Domain&nbsp;Component:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;plus&#160;<a href="add.cpp.htm" target="_top">Binary&nbsp;Addition:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;polynomial&#160;<a href="poly.cpp.htm" target="_top">Polynomial&nbsp;Evaluation:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;pow&#160;<a href="pow.cpp.htm" target="_top">The&nbsp;Power&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;pow&#160;<a href="powint.cpp.htm" target="_top">Integer&nbsp;Powers:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Reverse&#160;<a href="reverse.h.htm" target="_top">Reverse&nbsp;Mode:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Rosen34&#160;<a href="rosen34.cpp.htm" target="_top">Rosen34:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Runge45&#160;<a href="runge45.cpp.htm" target="_top">Runge45:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;SpeedTest&#160;<a href="speedtestexample.htm" target="_top">Example&nbsp;Use&nbsp;of&nbsp;SpeedTest</a><br>
&#160;&#160;&#160;&#160;&#160;second<b>&nbsp;</b>partial&#160;<a href="revtwo.h.htm" target="_top">Second&nbsp;Partials&nbsp;Reverse&nbsp;Driver:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;second<b>&nbsp;</b>partial&#160;<a href="fortwo.h.htm" target="_top">Subset&nbsp;of&nbsp;Second&nbsp;Order&nbsp;Partials:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;simple<b>&nbsp;</b>vector&#160;<a href="simplevector.cpp.htm" target="_top">Simple&nbsp;Vector&nbsp;Template&nbsp;Class:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;sin&#160;<a href="sin.cpp.htm" target="_top">The&nbsp;Sine&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;sin&#160;<a href="exp.cpp.htm" target="_top">The&nbsp;Exponential&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;sqrt&#160;<a href="sqrt.cpp.htm" target="_top">The&nbsp;Square&nbsp;Root&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;subtract&#160;<a href="sub.cpp.htm" target="_top">Binary&nbsp;Subtraction:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;times&#160;<a href="mul.cpp.htm" target="_top">Binary&nbsp;Multiplication:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Value&#160;<a href="value.cpp.htm" target="_top">Conversion&nbsp;to&nbsp;Base&nbsp;Type:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;VecAD&#160;<a href="vec.cpp.htm" target="_top">Recording&nbsp;Vector&nbsp;Indexing&nbsp;Operations:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
exceptions&#160;<a href="faq_frame1.htm#Exceptions" target="frame1"><i>Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Exceptions</i></a><br>
exercise<br>
&#160;&#160;&#160;&#160;&#160;CppAD<b>::</b>vector&#160;<a href="cppad_vector_frame2.htm#Exercise" target="frame1"><i>The&nbsp;CppAD::vector&nbsp;Template&nbsp;Class:&#160;Exercise</i></a><br>
&#160;&#160;&#160;&#160;&#160;NearEqual&#160;<a href="nearequal_frame2.htm#Exercise" target="frame1"><i>Determine&nbsp;if&nbsp;Two&nbsp;Values&nbsp;Are&nbsp;Nearly&nbsp;Equal:&#160;Exercise</i></a><br>
&#160;&#160;&#160;&#160;&#160;simple<b>&nbsp;</b>vector&#160;<a href="simplevector_frame1.htm#Exercise" target="frame1"><i>Definition&nbsp;of&nbsp;a&nbsp;Simple&nbsp;Vector:&#160;Exercise</i></a><br>
exp&#160;<a href="exp.htm" target="_top">The&nbsp;Exponential&nbsp;Function</a><br>
&#160;&#160;&#160;&#160;&#160;forward<b>&nbsp;</b>theory&#160;<a href="expforward.htm" target="_top">Exponential&nbsp;Function&nbsp;Forward&nbsp;Taylor&nbsp;Polynomial&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;inverse&#160;<a href="log.htm" target="_top">The&nbsp;Logarithm&nbsp;Function</a><br>
&#160;&#160;&#160;&#160;&#160;reverse<b>&nbsp;</b>theory&#160;<a href="expreverse.htm" target="_top">Exponential&nbsp;Function&nbsp;Reverse&nbsp;Mode&nbsp;Theory</a><br>
expansion&#160;<a href="hesminordet.cpp.htm" target="_top">Gradient&nbsp;of&nbsp;Determinant&nbsp;Using&nbsp;Expansion&nbsp;by&nbsp;Minors:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="jacminordet.cpp.htm" target="_top">Gradient&nbsp;of&nbsp;Determinant&nbsp;Using&nbsp;Expansion&nbsp;by&nbsp;Minors:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
exponent&#160;<a href="pow.htm" target="_top">The&nbsp;Power&nbsp;Function</a><br>
expression<br>
&#160;&#160;&#160;&#160;&#160;conditional&#160;<a href="condexp.htm" target="_top">The&nbsp;Conditional&nbsp;Expression&nbsp;Function</a><br>
extend<br>
&#160;&#160;&#160;&#160;&#160;NearEqual&#160;<a href="nearequalext.htm" target="_top">Near&nbsp;Equal&nbsp;Extended&nbsp;to&nbsp;AD&nbsp;Types</a><br>

<b><big><a name="F">F</a></big></b>
<br>
FADBAD&#160;<a href="speedfadbad.cpp.htm" target="_top">Run&nbsp;All&nbsp;The&nbsp;FADBAD&nbsp;Speed&nbsp;Comparison&nbsp;Tests</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="fadbad.htm" target="_top">Routines&nbsp;for&nbsp;Comparing&nbsp;CppAD&nbsp;with&nbsp;FADBAD</a><br>
&#160;&#160;&#160;&#160;&#160;compare<b>&nbsp;</b>results&#160;<a href="examplefadbad.cpp.htm" target="_top">Compare&nbsp;FADBAD&nbsp;and&nbsp;CppAD&nbsp;Results</a><br>
&#160;&#160;&#160;&#160;&#160;determinant&#160;<a href="detlufadbad.cpp.htm" target="_top">FADBAD&nbsp;&amp;&nbsp;CppAD&nbsp;Gradient&nbsp;of&nbsp;Determinant&nbsp;by&nbsp;Lu&nbsp;Factorization</a><br>
&#160;&#160;&#160;&#160;&#160;determinant&#160;<a href="detminorfadbad.cpp.htm" target="_top">FADBAD&nbsp;&amp;&nbsp;CppAD&nbsp;Gradient&nbsp;of&nbsp;Determinant&nbsp;by&nbsp;Minors</a><br>
&#160;&#160;&#160;&#160;&#160;Lu<b>&nbsp;</b>factor&#160;<a href="detlufadbad.cpp.htm" target="_top">FADBAD&nbsp;&amp;&nbsp;CppAD&nbsp;Gradient&nbsp;of&nbsp;Determinant&nbsp;by&nbsp;Lu&nbsp;Factorization</a><br>
&#160;&#160;&#160;&#160;&#160;Minor<b>&nbsp;</b>expand&#160;<a href="detminorfadbad.cpp.htm" target="_top">FADBAD&nbsp;&amp;&nbsp;CppAD&nbsp;Gradient&nbsp;of&nbsp;Determinant&nbsp;by&nbsp;Minors</a><br>
&#160;&#160;&#160;&#160;&#160;speed&#160;<a href="detlufadbad.cpp.htm" target="_top">FADBAD&nbsp;&amp;&nbsp;CppAD&nbsp;Gradient&nbsp;of&nbsp;Determinant&nbsp;by&nbsp;Lu&nbsp;Factorization</a><br>
&#160;&#160;&#160;&#160;&#160;speed&#160;<a href="detminorfadbad.cpp.htm" target="_top">FADBAD&nbsp;&amp;&nbsp;CppAD&nbsp;Gradient&nbsp;of&nbsp;Determinant&nbsp;by&nbsp;Minors</a><br>
Forward&#160;<a href="forward.h.htm" target="_top">Forward&nbsp;Mode:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
factor<br>
&#160;&#160;&#160;&#160;&#160;Lu<b>&nbsp;</b>complex&#160;<a href="detbylu.h.htm" target="_top">Determinant&nbsp;using&nbsp;Lu&nbsp;Factorization:&nbsp;Source&nbsp;Code</a><br>
&#160;&#160;&#160;&#160;&#160;Lu<b>&nbsp;</b>determinant&#160;<a href="detbylu.htm" target="_top">Determinant&nbsp;Using&nbsp;Lu&nbsp;Factorization</a><br>
&#160;&#160;&#160;&#160;&#160;matrix&#160;<a href="ludetandsolve.htm" target="_top">Compute&nbsp;Determinants&nbsp;and&nbsp;Solve&nbsp;Equations&nbsp;by&nbsp;LU&nbsp;Factorization</a><br>
first<br>
&#160;&#160;&#160;&#160;&#160;derivative<b>&nbsp;</b>easy<b>&nbsp;</b>driver&#160;<a href="jacobian.htm" target="_top">Jacobian:&nbsp;Easy&nbsp;Driver</a><br>
forward&#160;<a href="theoryexamfor.htm" target="_top">A&nbsp;Forward&nbsp;Mode&nbsp;Evaluation</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="forward.htm" target="_top">Forward&nbsp;Mode</a><br>
&#160;&#160;&#160;&#160;&#160;acos<b>&nbsp;</b>theory&#160;<a href="acosforward.htm" target="_top">Arccosine&nbsp;Function&nbsp;Forward&nbsp;Taylor&nbsp;Polynomial&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;asin<b>&nbsp;</b>theory&#160;<a href="asinforward.htm" target="_top">Arcsine&nbsp;Function&nbsp;Forward&nbsp;Taylor&nbsp;Polynomial&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;atan<b>&nbsp;</b>theory&#160;<a href="atanforward.htm" target="_top">Arctangent&nbsp;Function&nbsp;Forward&nbsp;Taylor&nbsp;Polynomial&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;cos<b>&nbsp;</b>theory&#160;<a href="cosforward.htm" target="_top">Cosine&nbsp;Function&nbsp;Forward&nbsp;Taylor&nbsp;Polynomial&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;easy<b>&nbsp;</b>driver&#160;<a href="drivers.htm" target="_top">First&nbsp;and&nbsp;Second&nbsp;Derivatives:&nbsp;Easy&nbsp;Drivers</a><br>
&#160;&#160;&#160;&#160;&#160;example<b>&nbsp;</b>print&#160;<a href="printfor.cpp.htm" target="_top">Printing&nbsp;During&nbsp;Forward&nbsp;Mode:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;exp<b>&nbsp;</b>theory&#160;<a href="expforward.htm" target="_top">Exponential&nbsp;Function&nbsp;Forward&nbsp;Taylor&nbsp;Polynomial&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;log<b>&nbsp;</b>theory&#160;<a href="logforward.htm" target="_top">Logarithm&nbsp;Function&nbsp;Forward&nbsp;Taylor&nbsp;Polynomial&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;print&#160;<a href="printfor.htm" target="_top">Printing&nbsp;Values&nbsp;During&nbsp;Forward&nbsp;Mode&nbsp;Calculations</a><br>
&#160;&#160;&#160;&#160;&#160;sin<b>&nbsp;</b>theory&#160;<a href="sinforward.htm" target="_top">Sine&nbsp;Function&nbsp;Forward&nbsp;Taylor&nbsp;Polynomial&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;sqrt<b>&nbsp;</b>theory&#160;<a href="sqrtforward.htm" target="_top">Square&nbsp;Root&nbsp;Function&nbsp;Forward&nbsp;Taylor&nbsp;Polynomial&nbsp;Theory</a><br>
free<br>
&#160;&#160;&#160;&#160;&#160;install<b>&nbsp;</b>CppAD&#160;<a href="installwindows.htm" target="_top">Windows&nbsp;Installation&nbsp;and&nbsp;Testing</a><br>
&#160;&#160;&#160;&#160;&#160;unix<b>&nbsp;</b>install&#160;<a href="installunix.htm" target="_top">Unix&nbsp;Installation&nbsp;and&nbsp;Testing</a><br>
frequently&#160;<a href="faq.htm" target="_top">Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers</a><br>
function&#160;<a href="glossary_frame1.htm#Base Function" target="frame1"><i>Glossary:&#160;Base&nbsp;Function</i></a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="theoryexamfun.htm" target="_top">An&nbsp;Example&nbsp;Function</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="adfun.htm" target="_top">Constructing&nbsp;Differentiable&nbsp;Functions&nbsp;From&nbsp;The&nbsp;Tape</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="boolfun.htm" target="_top">Defining&nbsp;Boolean&nbsp;Functions&nbsp;with&nbsp;AD&nbsp;Arguments</a><br>
functions&#160;<a href="faq_frame1.htm#Intrinsic Functions" target="frame1"><i>Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Intrinsic&nbsp;Functions</i></a><br>

<b><big><a name="G">G</a></big></b>
<br>
getstarted<br>
&#160;&#160;&#160;&#160;&#160;polynomial&#160;<a href="getstarted.cpp.htm" target="_top">Getting&nbsp;Started&nbsp;Using&nbsp;CppAD&nbsp;With&nbsp;A&nbsp;Polynomial&nbsp;Example</a><br>
gradient&#160;<a href="hesludet.cpp.htm" target="_top">Gradient&nbsp;of&nbsp;Determinant&nbsp;Using&nbsp;LU&nbsp;Factorization:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="hesminordet.cpp.htm" target="_top">Gradient&nbsp;of&nbsp;Determinant&nbsp;Using&nbsp;Expansion&nbsp;by&nbsp;Minors:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="jacludet.cpp.htm" target="_top">Gradient&nbsp;of&nbsp;Determinant&nbsp;Using&nbsp;Lu&nbsp;Factorization:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="jacminordet.cpp.htm" target="_top">Gradient&nbsp;of&nbsp;Determinant&nbsp;Using&nbsp;Expansion&nbsp;by&nbsp;Minors:&nbsp;Example&nbsp;and&nbsp;Test</a><br>

<b><big><a name="H">H</a></big></b>
<br>
Hessian&#160;<a href="hessian.h.htm" target="_top">Hessian&nbsp;of&nbsp;Scalar&nbsp;Valued&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="hessian.htm" target="_top">Hessian&nbsp;of&nbsp;One&nbsp;Component:&nbsp;Easy&nbsp;Driver</a><br>
&#160;&#160;&#160;&#160;&#160;times<b>&nbsp;</b>direction&#160;<a href="hestimesdir.cpp.htm" target="_top">Hessian&nbsp;Times&nbsp;Direction:&nbsp;Example&nbsp;and&nbsp;Test</a><br>

<b><big><a name="I">I</a></big></b>
<br>
Independent&#160;<a href="independent.htm" target="_top">Declare&nbsp;Independent&nbsp;Variables&nbsp;and&nbsp;Start&nbsp;Recording</a><br>
IsReal&#160;<a href="boolfun.cpp.htm" target="_top">Defining&nbsp;Boolean&nbsp;Functions&nbsp;with&nbsp;AD&nbsp;Arguments:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
include<br>
&#160;&#160;&#160;&#160;&#160;include<b>&nbsp;</b>CppAD&#160;<a href="cppad_frame2.htm#Syntax.include CppAD.h" target="frame1"><i>A&nbsp;Package&nbsp;for&nbsp;Differentiation&nbsp;of&nbsp;C++&nbsp;Algorithms:&nbsp;CppAD&nbsp;Version&nbsp;05-07-05:&#160;Syntax.include&nbsp;CppAD.h</i></a><br>
independent&#160;<a href="glossary_frame1.htm#Independent Variable" target="frame1"><i>Glossary:&#160;Independent&nbsp;Variable</i></a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="faq_frame1.htm#Independent Variables" target="frame1"><i>Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Independent&nbsp;Variables</i></a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="faq_frame1.htm#Assignment and Independent" target="frame1"><i>Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Assignment&nbsp;and&nbsp;Independent</i></a><br>
index<br>
&#160;&#160;&#160;&#160;&#160;record&#160;<a href="vec.cpp.htm" target="_top">Recording&nbsp;Vector&nbsp;Indexing&nbsp;Operations:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;record&#160;<a href="vecad.htm" target="_top">Vectors&nbsp;That&nbsp;Record&nbsp;Indexing&nbsp;Operations</a><br>
install&#160;<a href="install.htm" target="_top">Installing&nbsp;and&nbsp;Testing&nbsp;CppAD</a><br>
&#160;&#160;&#160;&#160;&#160;unix<b>&nbsp;</b>CppAD&#160;<a href="installunix.htm" target="_top">Unix&nbsp;Installation&nbsp;and&nbsp;Testing</a><br>
&#160;&#160;&#160;&#160;&#160;windows<b>&nbsp;</b>CppAD&#160;<a href="installwindows.htm" target="_top">Windows&nbsp;Installation&nbsp;and&nbsp;Testing</a><br>
intrinsic&#160;<a href="faq_frame1.htm#Intrinsic Functions" target="frame1"><i>Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Intrinsic&nbsp;Functions</i></a><br>
introduction&#160;<a href="cppad_frame2.htm#Introduction" target="frame1"><i>A&nbsp;Package&nbsp;for&nbsp;Differentiation&nbsp;of&nbsp;C++&nbsp;Algorithms:&nbsp;CppAD&nbsp;Version&nbsp;05-07-05:&#160;Introduction</i></a><br>
inverse&#160;<a href="faq_frame1.htm#Matrix Inverse" target="frame1"><i>Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Matrix&nbsp;Inverse</i></a><br>
&#160;&#160;&#160;&#160;&#160;cos&#160;<a href="acos.htm" target="_top">The&nbsp;Inverse&nbsp;Cosine&nbsp;Function</a><br>
&#160;&#160;&#160;&#160;&#160;exp&#160;<a href="log.htm" target="_top">The&nbsp;Logarithm&nbsp;Function</a><br>
&#160;&#160;&#160;&#160;&#160;log&#160;<a href="exp.htm" target="_top">The&nbsp;Exponential&nbsp;Function</a><br>
&#160;&#160;&#160;&#160;&#160;sin&#160;<a href="asin.htm" target="_top">The&nbsp;Inverse&nbsp;Sine&nbsp;Function</a><br>
&#160;&#160;&#160;&#160;&#160;tan&#160;<a href="atan2.htm" target="_top">The&nbsp;Two&nbsp;Argument&nbsp;Inverse&nbsp;Tangent&nbsp;Function</a><br>
&#160;&#160;&#160;&#160;&#160;tan&#160;<a href="atan.htm" target="_top">The&nbsp;Inverse&nbsp;Tangent&nbsp;Function</a><br>

<b><big><a name="J">J</a></big></b>
<br>
Jacobian&#160;<a href="jacobian.h.htm" target="_top">Derivative&nbsp;of&nbsp;Vector&nbsp;Valued&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="jacobian.htm" target="_top">Jacobian:&nbsp;Easy&nbsp;Driver</a><br>

<b><big><a name="K">K</a></big></b>
<br>
Kutta<br>
&#160;&#160;&#160;&#160;&#160;ODE&#160;<a href="runge45.htm" target="_top">An&nbsp;Embedded&nbsp;4th&nbsp;and&nbsp;5th&nbsp;Order&nbsp;Runge-Kutta&nbsp;ODE&nbsp;Solver</a><br>

<b><big><a name="L">L</a></big></b>
<br>
LU&#160;<a href="hesludet.cpp.htm" target="_top">Gradient&nbsp;of&nbsp;Determinant&nbsp;Using&nbsp;LU&nbsp;Factorization:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
Lu&#160;<a href="jacludet.cpp.htm" target="_top">Gradient&nbsp;of&nbsp;Determinant&nbsp;Using&nbsp;Lu&nbsp;Factorization:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;determinant<b>&nbsp;</b>speed&#160;<a href="detluspeed.cpp.htm" target="_top">Determinant&nbsp;by&nbsp;Lu&nbsp;Factor&nbsp;and&nbsp;Solve:&nbsp;Speed&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;linear<b>&nbsp;</b>equation&#160;<a href="luvecad.htm" target="_top">Lu&nbsp;Factor&nbsp;and&nbsp;Solve&nbsp;with&nbsp;Recorded&nbsp;Pivoting</a><br>
&#160;&#160;&#160;&#160;&#160;record<b>&nbsp;</b>pivot&#160;<a href="luvecadok.cpp.htm" target="_top">Lu&nbsp;Factor&nbsp;and&nbsp;Solve&nbsp;With&nbsp;Recorded&nbsp;Pivoting:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;speed&#160;<a href="lusolvespeed.cpp.htm" target="_top">Speed&nbsp;Test&nbsp;Lu&nbsp;Factor&nbsp;and&nbsp;Solve:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
Lu<b>&nbsp;</b>factor<br>
&#160;&#160;&#160;&#160;&#160;ADOLC&#160;<a href="detluadolc.cpp.htm" target="_top">ADOLC&nbsp;&amp;&nbsp;CppAD&nbsp;Gradient&nbsp;of&nbsp;Determinant&nbsp;by&nbsp;Lu&nbsp;Factorization</a><br>
&#160;&#160;&#160;&#160;&#160;complex&#160;<a href="detbylu.h.htm" target="_top">Determinant&nbsp;using&nbsp;Lu&nbsp;Factorization:&nbsp;Source&nbsp;Code</a><br>
&#160;&#160;&#160;&#160;&#160;determinant&#160;<a href="detbylu.htm" target="_top">Determinant&nbsp;Using&nbsp;Lu&nbsp;Factorization</a><br>
&#160;&#160;&#160;&#160;&#160;FADBAD&#160;<a href="detlufadbad.cpp.htm" target="_top">FADBAD&nbsp;&amp;&nbsp;CppAD&nbsp;Gradient&nbsp;of&nbsp;Determinant&nbsp;by&nbsp;Lu&nbsp;Factorization</a><br>
LuFactor&#160;<a href="lufactor.htm" target="_top">LU&nbsp;Factorization&nbsp;of&nbsp;A&nbsp;Square&nbsp;Matrix</a><br>
&#160;&#160;&#160;&#160;&#160;source&#160;<a href="lufactor.h.htm" target="_top">LuFactor&nbsp;Source&nbsp;Code</a><br>
LuInvert&#160;<a href="luinvert.htm" target="_top">Invert&nbsp;an&nbsp;LU&nbsp;Factored&nbsp;Equation</a><br>
&#160;&#160;&#160;&#160;&#160;source&#160;<a href="luinvert.h.htm" target="_top">LuInvert&nbsp;Source&nbsp;Code</a><br>
LuSolve&#160;<a href="lusolve.htm" target="_top">Compute&nbsp;Determinant&nbsp;and&nbsp;Solve&nbsp;Linear&nbsp;Equations</a><br>
&#160;&#160;&#160;&#160;&#160;source<b>&nbsp;</b>code&#160;<a href="lusolve.h.htm" target="_top">LuSolve&nbsp;Source&nbsp;Code</a><br>
LuVecAD&#160;<a href="luvecad.htm" target="_top">Lu&nbsp;Factor&nbsp;and&nbsp;Solve&nbsp;with&nbsp;Recorded&nbsp;Pivoting</a><br>
library<br>
&#160;&#160;&#160;&#160;&#160;standard<b>&nbsp;</b>math&#160;<a href="stdmathlib.htm" target="_top">The&nbsp;Standard&nbsp;Library&nbsp;Unary&nbsp;Math&nbsp;Functions</a><br>
linear<br>
&#160;&#160;&#160;&#160;&#160;equation&#160;<a href="lusolve.htm" target="_top">Compute&nbsp;Determinant&nbsp;and&nbsp;Solve&nbsp;Linear&nbsp;Equations</a><br>
&#160;&#160;&#160;&#160;&#160;equation&#160;<a href="ludetandsolve.htm" target="_top">Compute&nbsp;Determinants&nbsp;and&nbsp;Solve&nbsp;Equations&nbsp;by&nbsp;LU&nbsp;Factorization</a><br>
&#160;&#160;&#160;&#160;&#160;equation<b>&nbsp;</b>source<b>&nbsp;</b>code&#160;<a href="lusolve.h.htm" target="_top">LuSolve&nbsp;Source&nbsp;Code</a><br>
&#160;&#160;&#160;&#160;&#160;invert<b>&nbsp;</b>Lu<b>&nbsp;</b>equation&#160;<a href="luinvert.htm" target="_top">Invert&nbsp;an&nbsp;LU&nbsp;Factored&nbsp;Equation</a><br>
&#160;&#160;&#160;&#160;&#160;Lu<b>&nbsp;</b>factor<b>&nbsp;</b>equation&#160;<a href="lufactor.htm" target="_top">LU&nbsp;Factorization&nbsp;of&nbsp;A&nbsp;Square&nbsp;Matrix</a><br>
&#160;&#160;&#160;&#160;&#160;solve<b>&nbsp;</b>equation&#160;<a href="luvecad.htm" target="_top">Lu&nbsp;Factor&nbsp;and&nbsp;Solve&nbsp;with&nbsp;Recorded&nbsp;Pivoting</a><br>
log&#160;<a href="log10.cpp.htm" target="_top">The&nbsp;Base&nbsp;10&nbsp;Logarithm&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;<a href="log.htm" target="_top">The&nbsp;Logarithm&nbsp;Function</a><br>
&#160;&#160;&#160;&#160;&#160;base<b>&nbsp;</b>10&#160;<a href="log10.htm" target="_top">The&nbsp;Log&nbsp;Base&nbsp;10&nbsp;Function</a><br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="log.cpp.htm" target="_top">The&nbsp;Logarithm&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;forward<b>&nbsp;</b>theory&#160;<a href="logforward.htm" target="_top">Logarithm&nbsp;Function&nbsp;Forward&nbsp;Taylor&nbsp;Polynomial&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;inverse&#160;<a href="exp.htm" target="_top">The&nbsp;Exponential&nbsp;Function</a><br>
&#160;&#160;&#160;&#160;&#160;reverse<b>&nbsp;</b>theory&#160;<a href="logreverse.htm" target="_top">Logarithm&nbsp;Function&nbsp;Reverse&nbsp;Mode&nbsp;Theory</a><br>

<b><big><a name="M">M</a></big></b>
<br>
Memory<br>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="adfun_frame2.htm#Memory" target="frame1"><i>Constructing&nbsp;Differentiable&nbsp;Functions&nbsp;From&nbsp;The&nbsp;Tape:&#160;Memory</i></a><br>
Minor<br>
&#160;&#160;&#160;&#160;&#160;FADBAD<b>&nbsp;</b>expand&#160;<a href="detminorfadbad.cpp.htm" target="_top">FADBAD&nbsp;&amp;&nbsp;CppAD&nbsp;Gradient&nbsp;of&nbsp;Determinant&nbsp;by&nbsp;Minors</a><br>
Minors<br>
&#160;&#160;&#160;&#160;&#160;ADOLC<b>&nbsp;</b>expand&#160;<a href="detminoradolc.cpp.htm" target="_top">ADOLC&nbsp;&amp;&nbsp;CppAD&nbsp;Gradient&nbsp;of&nbsp;Determinant&nbsp;by&nbsp;Minors</a><br>
macro<br>
&#160;&#160;&#160;&#160;&#160;error<b>&nbsp;</b>assert&#160;<a href="cppaderror.htm" target="_top">CppAD&nbsp;Error&nbsp;Detection&nbsp;and&nbsp;Reporting</a><br>
math<br>
&#160;&#160;&#160;&#160;&#160;standard<b>&nbsp;</b>function&#160;<a href="faq_frame1.htm#Namespace.Using" target="frame1"><i>Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Namespace.Using</i></a><br>
&#160;&#160;&#160;&#160;&#160;standard<b>&nbsp;</b>library&#160;<a href="stdmathlib.htm" target="_top">The&nbsp;Standard&nbsp;Library&nbsp;Unary&nbsp;Math&nbsp;Functions</a><br>
matrix&#160;<a href="detbyminor.h.htm" target="_top">Determinant&nbsp;using&nbsp;Expansion&nbsp;by&nbsp;Minors:&nbsp;Source&nbsp;Code</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="detofminor.h.htm" target="_top">Compute&nbsp;the&nbsp;Determinant&nbsp;of&nbsp;a&nbsp;Minor:&nbsp;Source&nbsp;Code</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="detofminor.htm" target="_top">Compute&nbsp;the&nbsp;Determinant&nbsp;of&nbsp;a&nbsp;Minor</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="faq_frame1.htm#Matrix Inverse" target="frame1"><i>Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Matrix&nbsp;Inverse</i></a><br>
&#160;&#160;&#160;&#160;&#160;determinant&#160;<a href="ludetandsolve.htm" target="_top">Compute&nbsp;Determinants&nbsp;and&nbsp;Solve&nbsp;Equations&nbsp;by&nbsp;LU&nbsp;Factorization</a><br>
&#160;&#160;&#160;&#160;&#160;factor&#160;<a href="ludetandsolve.htm" target="_top">Compute&nbsp;Determinants&nbsp;and&nbsp;Solve&nbsp;Equations&nbsp;by&nbsp;LU&nbsp;Factorization</a><br>
&#160;&#160;&#160;&#160;&#160;factor<b>&nbsp;</b>source&#160;<a href="lusolve.h.htm" target="_top">LuSolve&nbsp;Source&nbsp;Code</a><br>
&#160;&#160;&#160;&#160;&#160;LuFactor<b>&nbsp;</b>source&#160;<a href="lufactor.h.htm" target="_top">LuFactor&nbsp;Source&nbsp;Code</a><br>
&#160;&#160;&#160;&#160;&#160;LuInvert<b>&nbsp;</b>source&#160;<a href="luinvert.h.htm" target="_top">LuInvert&nbsp;Source&nbsp;Code</a><br>
&#160;&#160;&#160;&#160;&#160;linear<b>&nbsp;</b>equation&#160;<a href="ludetandsolve.htm" target="_top">Compute&nbsp;Determinants&nbsp;and&nbsp;Solve&nbsp;Equations&nbsp;by&nbsp;LU&nbsp;Factorization</a><br>
memory&#160;<a href="faq_frame1.htm#Tape Storage: Disk or Memory" target="frame1"><i>Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Tape&nbsp;Storage:&nbsp;Disk&nbsp;or&nbsp;Memory</i></a><br>
minor&#160;<a href="detbyminor.h.htm" target="_top">Determinant&nbsp;using&nbsp;Expansion&nbsp;by&nbsp;Minors:&nbsp;Source&nbsp;Code</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;<a href="detofminor.h.htm" target="_top">Compute&nbsp;the&nbsp;Determinant&nbsp;of&nbsp;a&nbsp;Minor:&nbsp;Source&nbsp;Code</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;<a href="detofminor.htm" target="_top">Compute&nbsp;the&nbsp;Determinant&nbsp;of&nbsp;a&nbsp;Minor</a><br>
minors&#160;<a href="hesminordet.cpp.htm" target="_top">Gradient&nbsp;of&nbsp;Determinant&nbsp;Using&nbsp;Expansion&nbsp;by&nbsp;Minors:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="jacminordet.cpp.htm" target="_top">Gradient&nbsp;of&nbsp;Determinant&nbsp;Using&nbsp;Expansion&nbsp;by&nbsp;Minors:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
minus&#160;<a href="neg.htm" target="_top">Negation:&nbsp;The&nbsp;Unary&nbsp;Minus&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;<b>-=</b>&#160;<a href="subeq.htm" target="_top">The&nbsp;AD&nbsp;Subtraction&nbsp;Computed&nbsp;Assignment&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;<b>-=&nbsp;</b>example&#160;<a href="subeq.cpp.htm" target="_top">Subtraction&nbsp;Computed&nbsp;Assignment:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;binary&#160;<a href="sub.htm" target="_top">The&nbsp;AD&nbsp;Binary&nbsp;Subtraction&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="sub.cpp.htm" target="_top">Binary&nbsp;Subtraction:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
mode&#160;<a href="theoryexamrev.htm" target="_top">A&nbsp;Reverse&nbsp;Mode&nbsp;Evaluation</a><br>
&#160;&#160;&#160;&#160;&#160;<a href="theoryexamfor.htm" target="_top">A&nbsp;Forward&nbsp;Mode&nbsp;Evaluation</a><br>
&#160;&#160;&#160;&#160;&#160;<a href="reverse.htm" target="_top">Reverse&nbsp;Mode</a><br>
&#160;&#160;&#160;&#160;&#160;<a href="faq_frame1.htm#Mode" target="frame1"><i>Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Mode</i></a><br>
multiple<br>
&#160;&#160;&#160;&#160;&#160;tape&#160;<a href="multape.cpp.htm" target="_top">Multiple&nbsp;Tapes:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;tape&#160;<a href="multape.htm" target="_top">Using&nbsp;Multiple&nbsp;Tapes</a><br>
multiply<br>
&#160;&#160;&#160;&#160;&#160;<b>*=</b>&#160;<a href="muleq.htm" target="_top">The&nbsp;AD&nbsp;Multiplication&nbsp;Computed&nbsp;Assignment&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;<b>*=&nbsp;</b>example&#160;<a href="muleq.cpp.htm" target="_top">Multiplication&nbsp;Computed&nbsp;Assignment:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;binary&#160;<a href="mul.htm" target="_top">The&nbsp;AD&nbsp;Binary&nbsp;Multiplication&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="mul.cpp.htm" target="_top">Binary&nbsp;Multiplication:&nbsp;Example&nbsp;and&nbsp;Test</a><br>

<b><big><a name="N">N</a></big></b>
<br>
NDEBUG&#160;<a href="simplevector_frame1.htm#Exercise" target="frame1"><i>Definition&nbsp;of&nbsp;a&nbsp;Simple&nbsp;Vector:&#160;Exercise</i></a><br>
NearEqual<br>
&#160;&#160;&#160;&#160;&#160;AD&#160;<a href="nearequalext.htm" target="_top">Near&nbsp;Equal&nbsp;Extended&nbsp;to&nbsp;AD&nbsp;Types</a><br>
&#160;&#160;&#160;&#160;&#160;double<b>&nbsp;</b>and<b>&nbsp;</b>complex&#160;<a href="nearequal.htm" target="_top">Determine&nbsp;if&nbsp;Two&nbsp;Values&nbsp;Are&nbsp;Nearly&nbsp;Equal</a><br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="near_equal.cpp.htm" target="_top">NearEqual&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
namespace&#160;<a href="faq_frame1.htm#Namespace" target="frame1"><i>Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Namespace</i></a><br>
&#160;&#160;&#160;&#160;&#160;CppAD<b>&nbsp;</b>namespace&#160;<a href="cppad_frame2.htm#Syntax.using namespace CppAD" target="frame1"><i>A&nbsp;Package&nbsp;for&nbsp;Differentiation&nbsp;of&nbsp;C++&nbsp;Algorithms:&nbsp;CppAD&nbsp;Version&nbsp;05-07-05:&#160;Syntax.using&nbsp;namespace&nbsp;CppAD</i></a><br>
negative&#160;<a href="neg.cpp.htm" target="_top">Negative&nbsp;Operator:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="neg.htm" target="_top">Negation:&nbsp;The&nbsp;Unary&nbsp;Minus&nbsp;Operator</a><br>
notation&#160;<a href="theoryrevnotation.htm" target="_top">Function&nbsp;Definitions&nbsp;for&nbsp;Understanding&nbsp;Reverse&nbsp;Mode&nbsp;Evaluation</a><br>

<b><big><a name="O">O</a></big></b>
<br>
ODE&#160;<a href="odespeed.cpp.htm" target="_top">ODE&nbsp;Solver:&nbsp;Speed&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;control<b>&nbsp;</b>error&#160;<a href="odeerrcontrol.htm" target="_top">An&nbsp;Error&nbsp;Controller&nbsp;for&nbsp;ODE&nbsp;Solvers</a><br>
&#160;&#160;&#160;&#160;&#160;Rosenbrock&#160;<a href="rosen34.htm" target="_top">A&nbsp;3rd&nbsp;and&nbsp;4th&nbsp;Order&nbsp;Rosenbrock&nbsp;ODE&nbsp;Solver</a><br>
&#160;&#160;&#160;&#160;&#160;Runge<b>-</b>Kutta&#160;<a href="runge45.htm" target="_top">An&nbsp;Embedded&nbsp;4th&nbsp;and&nbsp;5th&nbsp;Order&nbsp;Runge-Kutta&nbsp;ODE&nbsp;Solver</a><br>
&#160;&#160;&#160;&#160;&#160;Taylor&#160;<a href="odetaylor.cpp.htm" target="_top">Taylor's&nbsp;Method&nbsp;Ode&nbsp;Solver:&nbsp;An&nbsp;Example&nbsp;and&nbsp;Test</a><br>
OdeErrControl&#160;<a href="odeerrcontrol.htm" target="_top">An&nbsp;Error&nbsp;Controller&nbsp;for&nbsp;ODE&nbsp;Solvers</a><br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="odeerrcontrol.cpp.htm" target="_top">OdeErrControl:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
Order<br>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="adfun_frame2.htm#Order" target="frame1"><i>Constructing&nbsp;Differentiable&nbsp;Functions&nbsp;From&nbsp;The&nbsp;Tape:&#160;Order</i></a><br>
one<br>
&#160;&#160;&#160;&#160;&#160;component<b>&nbsp;</b>derivative&#160;<a href="revone.h.htm" target="_top">Derivative&nbsp;of&nbsp;One&nbsp;Range&nbsp;Component:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;component<b>&nbsp;</b>partial&#160;<a href="forone.h.htm" target="_top">Partial&nbsp;w.r.t&nbsp;One&nbsp;Domain&nbsp;Component:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
operator&#160;<a href="eq.htm" target="_top">The&nbsp;AD&nbsp;Assignment&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="compare.htm" target="_top">The&nbsp;AD&nbsp;Comparison&nbsp;Operators</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="compeq.htm" target="_top">Computed&nbsp;Assignment&nbsp;Operators</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="binaryop.htm" target="_top">Base&nbsp;Type&nbsp;Binary&nbsp;Operators</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="neg.htm" target="_top">Negation:&nbsp;The&nbsp;Unary&nbsp;Minus&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;compare<b>&nbsp;</b>tape&#160;<a href="adfun_frame2.htm#CompareChange" target="frame1"><i>Constructing&nbsp;Differentiable&nbsp;Functions&nbsp;From&nbsp;The&nbsp;Tape:&#160;CompareChange</i></a><br>
order&#160;<a href="forward.htm" target="_top">Forward&nbsp;Mode</a><br>
ordinary&#160;<a href="odespeed.cpp.htm" target="_top">ODE&nbsp;Solver:&nbsp;Speed&nbsp;Test</a><br>
output&#160;<a href="output.cpp.htm" target="_top">The&nbsp;Output&nbsp;Operator&nbsp;for&nbsp;AD&nbsp;Objects:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="output.cpp.htm" target="_top">The&nbsp;Output&nbsp;Operator&nbsp;for&nbsp;AD&nbsp;Objects:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD&#160;<a href="output.htm" target="_top">Writing&nbsp;an&nbsp;AD&nbsp;Value&nbsp;on&nbsp;a&nbsp;Output&nbsp;Stream</a><br>

<b><big><a name="P">P</a></big></b>
<br>
Parameter&#160;<a href="parameter.htm" target="_top">Is&nbsp;This&nbsp;AD&nbsp;Object&nbsp;a&nbsp;Parameter</a><br>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="adfun_frame2.htm#Parameter" target="frame1"><i>Constructing&nbsp;Differentiable&nbsp;Functions&nbsp;From&nbsp;The&nbsp;Tape:&#160;Parameter</i></a><br>
Poly&#160;<a href="poly.htm" target="_top">Evaluate&nbsp;a&nbsp;Polynomial&nbsp;or&nbsp;its&nbsp;Derivative</a><br>
&#160;&#160;&#160;&#160;&#160;source&#160;<a href="poly.h.htm" target="_top">Poly&nbsp;Source&nbsp;Code</a><br>
parameter&#160;<a href="glossary_frame1.htm#Parameter" target="frame1"><i>Glossary:&#160;Parameter</i></a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="independent_frame2.htm#Parameters" target="frame1"><i>Declare&nbsp;Independent&nbsp;Variables&nbsp;and&nbsp;Start&nbsp;Recording:&#160;Parameters</i></a><br>
partial<br>
&#160;&#160;&#160;&#160;&#160;easy&#160;<a href="forone.htm" target="_top">Partial&nbsp;w.r.t&nbsp;One&nbsp;Domain&nbsp;Component:&nbsp;Forward&nbsp;Mode&nbsp;Easy&nbsp;Driver</a><br>
&#160;&#160;&#160;&#160;&#160;one<b>&nbsp;</b>component&#160;<a href="forone.h.htm" target="_top">Partial&nbsp;w.r.t&nbsp;One&nbsp;Domain&nbsp;Component:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;second&#160;<a href="revtwo.h.htm" target="_top">Second&nbsp;Partials&nbsp;Reverse&nbsp;Driver:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;second&#160;<a href="fortwo.h.htm" target="_top">Subset&nbsp;of&nbsp;Second&nbsp;Order&nbsp;Partials:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
plus<br>
&#160;&#160;&#160;&#160;&#160;<b>+=</b>&#160;<a href="addeq.htm" target="_top">The&nbsp;AD&nbsp;Addition&nbsp;Computed&nbsp;Assignment&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;<b>+=&nbsp;</b>example&#160;<a href="addeq.cpp.htm" target="_top">Addition&nbsp;Computed&nbsp;Assignment:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;binary&#160;<a href="add.htm" target="_top">The&nbsp;AD&nbsp;Binary&nbsp;Addition&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="add.cpp.htm" target="_top">Binary&nbsp;Addition:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
polynomial&#160;<a href="theoryexamfun.htm" target="_top">An&nbsp;Example&nbsp;Function</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="complexpoly.cpp.htm" target="_top">Complex&nbsp;Polynomial:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="poly.htm" target="_top">Evaluate&nbsp;a&nbsp;Polynomial&nbsp;or&nbsp;its&nbsp;Derivative</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="polynomial.htm" target="_top">Polynomials&nbsp;and&nbsp;Their&nbsp;Derivatives</a><br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="poly.cpp.htm" target="_top">Polynomial&nbsp;Evaluation:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;getstarted&#160;<a href="getstarted.cpp.htm" target="_top">Getting&nbsp;Started&nbsp;Using&nbsp;CppAD&nbsp;With&nbsp;A&nbsp;Polynomial&nbsp;Example</a><br>
pow&#160;<a href="pow.cpp.htm" target="_top">The&nbsp;Power&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;<a href="powint.cpp.htm" target="_top">Integer&nbsp;Powers:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;<a href="pow.htm" target="_top">The&nbsp;Power&nbsp;Function</a><br>
print<br>
&#160;&#160;&#160;&#160;&#160;forward&#160;<a href="printfor.htm" target="_top">Printing&nbsp;Values&nbsp;During&nbsp;Forward&nbsp;Mode&nbsp;Calculations</a><br>
&#160;&#160;&#160;&#160;&#160;forward<b>&nbsp;</b>example&#160;<a href="printfor.cpp.htm" target="_top">Printing&nbsp;During&nbsp;Forward&nbsp;Mode:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
procedure&#160;<a href="theoryexamproc.htm" target="_top">A&nbsp;Procedural&nbsp;Representation&nbsp;of&nbsp;the&nbsp;Example&nbsp;Function</a><br>
program&#160;<a href="example.cpp.htm" target="_top">Program&nbsp;That&nbsp;Runs&nbsp;the&nbsp;CppAD&nbsp;Example&nbsp;Suite</a><br>

<b><big><a name="Q">Q</a></big></b>
<br>
questions&#160;<a href="faq.htm" target="_top">Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers</a><br>

<b><big><a name="R">R</a></big></b>
<br>
Range<br>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="adfun_frame2.htm#Range" target="frame1"><i>Constructing&nbsp;Differentiable&nbsp;Functions&nbsp;From&nbsp;The&nbsp;Tape:&#160;Range</i></a><br>
Reverse&#160;<a href="reverse.h.htm" target="_top">Reverse&nbsp;Mode:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
Rosen34&#160;<a href="rosen34.htm" target="_top">A&nbsp;3rd&nbsp;and&nbsp;4th&nbsp;Order&nbsp;Rosenbrock&nbsp;ODE&nbsp;Solver</a><br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="rosen34.cpp.htm" target="_top">Rosen34:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
Rosenbrock<br>
&#160;&#160;&#160;&#160;&#160;ODE&#160;<a href="rosen34.htm" target="_top">A&nbsp;3rd&nbsp;and&nbsp;4th&nbsp;Order&nbsp;Rosenbrock&nbsp;ODE&nbsp;Solver</a><br>
Runge<br>
&#160;&#160;&#160;&#160;&#160;ODE&#160;<a href="runge45.htm" target="_top">An&nbsp;Embedded&nbsp;4th&nbsp;and&nbsp;5th&nbsp;Order&nbsp;Runge-Kutta&nbsp;ODE&nbsp;Solver</a><br>
Runge45&#160;<a href="runge45.htm" target="_top">An&nbsp;Embedded&nbsp;4th&nbsp;and&nbsp;5th&nbsp;Order&nbsp;Runge-Kutta&nbsp;ODE&nbsp;Solver</a><br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="runge45.cpp.htm" target="_top">Runge45:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
real&#160;<a href="realistic.htm" target="_top">Examples&nbsp;Using&nbsp;CppAD&nbsp;in&nbsp;a&nbsp;Realistic&nbsp;Application</a><br>
record<br>
&#160;&#160;&#160;&#160;&#160;index&#160;<a href="vecad.htm" target="_top">Vectors&nbsp;That&nbsp;Record&nbsp;Indexing&nbsp;Operations</a><br>
recording&#160;<a href="glossary_frame1.htm#Tape State.Recording" target="frame1"><i>Glossary:&#160;Tape&nbsp;State.Recording</i></a><br>
relative<br>
&#160;&#160;&#160;&#160;&#160;difference&#160;<a href="nearequal.htm" target="_top">Determine&nbsp;if&nbsp;Two&nbsp;Values&nbsp;Are&nbsp;Nearly&nbsp;Equal</a><br>
represent&#160;<a href="theoryexambinary.htm" target="_top">A&nbsp;Binary&nbsp;Representation&nbsp;of&nbsp;the&nbsp;Procedure</a><br>
require<br>
&#160;&#160;&#160;&#160;&#160;base<b>&nbsp;</b>type&#160;<a href="cppad_frame2.htm#Base Type Requirements" target="frame1"><i>A&nbsp;Package&nbsp;for&nbsp;Differentiation&nbsp;of&nbsp;C++&nbsp;Algorithms:&nbsp;CppAD&nbsp;Version&nbsp;05-07-05:&#160;Base&nbsp;Type&nbsp;Requirements</i></a><br>
resize<br>
&#160;&#160;&#160;&#160;&#160;vector&#160;<a href="simplevector_frame1.htm#Resize" target="frame1"><i>Definition&nbsp;of&nbsp;a&nbsp;Simple&nbsp;Vector:&#160;Resize</i></a><br>
reverse&#160;<a href="theoryexamrev.htm" target="_top">A&nbsp;Reverse&nbsp;Mode&nbsp;Evaluation</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="theoryrevnotation.htm" target="_top">Function&nbsp;Definitions&nbsp;for&nbsp;Understanding&nbsp;Reverse&nbsp;Mode&nbsp;Evaluation</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="reverse.htm" target="_top">Reverse&nbsp;Mode</a><br>
&#160;&#160;&#160;&#160;&#160;acos<b>&nbsp;</b>theory&#160;<a href="acosreverse.htm" target="_top">Arccosine&nbsp;Function&nbsp;Reverse&nbsp;Mode&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;asin<b>&nbsp;</b>theory&#160;<a href="asinreverse.htm" target="_top">Arcsine&nbsp;Function&nbsp;Reverse&nbsp;Mode&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;atan<b>&nbsp;</b>theory&#160;<a href="atanreverse.htm" target="_top">Arctangent&nbsp;Function&nbsp;Reverse&nbsp;Mode&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;cos<b>&nbsp;</b>theory&#160;<a href="sincosreverse.htm" target="_top">Sine&nbsp;and&nbsp;Cosine&nbsp;Functions&nbsp;Reverse&nbsp;Mode&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;easy<b>&nbsp;</b>driver&#160;<a href="drivers.htm" target="_top">First&nbsp;and&nbsp;Second&nbsp;Derivatives:&nbsp;Easy&nbsp;Drivers</a><br>
&#160;&#160;&#160;&#160;&#160;exp<b>&nbsp;</b>theory&#160;<a href="expreverse.htm" target="_top">Exponential&nbsp;Function&nbsp;Reverse&nbsp;Mode&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;log<b>&nbsp;</b>theory&#160;<a href="logreverse.htm" target="_top">Logarithm&nbsp;Function&nbsp;Reverse&nbsp;Mode&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;sin<b>&nbsp;</b>theory&#160;<a href="sincosreverse.htm" target="_top">Sine&nbsp;and&nbsp;Cosine&nbsp;Functions&nbsp;Reverse&nbsp;Mode&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;sqrt<b>&nbsp;</b>theory&#160;<a href="sqrtreverse.htm" target="_top">Square&nbsp;Root&nbsp;Function&nbsp;Reverse&nbsp;Mode&nbsp;Theory</a><br>
root<br>
&#160;&#160;&#160;&#160;&#160;square&#160;<a href="sqrt.htm" target="_top">The&nbsp;Square&nbsp;Root&nbsp;Function</a><br>
run&#160;<a href="speedfadbad.cpp.htm" target="_top">Run&nbsp;All&nbsp;The&nbsp;FADBAD&nbsp;Speed&nbsp;Comparison&nbsp;Tests</a><br>
&#160;&#160;&#160;&#160;<a href="speedadolc.cpp.htm" target="_top">Run&nbsp;All&nbsp;The&nbsp;ADOLC&nbsp;Speed&nbsp;Comparison&nbsp;Tests</a><br>
&#160;&#160;&#160;&#160;<a href="speed.cpp.htm" target="_top">Run&nbsp;All&nbsp;The&nbsp;Speed&nbsp;Tests</a><br>
&#160;&#160;&#160;&#160;<a href="example.cpp.htm" target="_top">Program&nbsp;That&nbsp;Runs&nbsp;the&nbsp;CppAD&nbsp;Example&nbsp;Suite</a><br>

<b><big><a name="S">S</a></big></b>
<br>
Size<br>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="adfun_frame2.htm#Size" target="frame1"><i>Constructing&nbsp;Differentiable&nbsp;Functions&nbsp;From&nbsp;The&nbsp;Tape:&#160;Size</i></a><br>
SpeedTest&#160;<a href="speedtest.htm" target="_top">Run&nbsp;One&nbsp;Speed&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="speedtestexample.htm" target="_top">Example&nbsp;Use&nbsp;of&nbsp;SpeedTest</a><br>
second<br>
&#160;&#160;&#160;&#160;&#160;derivative<b>&nbsp;</b>easy&#160;<a href="revtwo.htm" target="_top">Subset&nbsp;of&nbsp;Second&nbsp;Partial&nbsp;Derivatives:&nbsp;Reverse&nbsp;Mode&nbsp;Easy&nbsp;Driver</a><br>
&#160;&#160;&#160;&#160;&#160;derivative<b>&nbsp;</b>easy&#160;<a href="fortwo.htm" target="_top">Subset&nbsp;of&nbsp;Second&nbsp;Partial&nbsp;Derivatives:&nbsp;Forward&nbsp;Mode&nbsp;Easy&nbsp;Driver</a><br>
&#160;&#160;&#160;&#160;&#160;partial&#160;<a href="revtwo.h.htm" target="_top">Second&nbsp;Partials&nbsp;Reverse&nbsp;Driver:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;partial&#160;<a href="fortwo.h.htm" target="_top">Subset&nbsp;of&nbsp;Second&nbsp;Order&nbsp;Partials:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
simple<br>
&#160;&#160;&#160;&#160;&#160;vector&#160;<a href="simplevector.htm" target="_top">Definition&nbsp;of&nbsp;a&nbsp;Simple&nbsp;Vector</a><br>
&#160;&#160;&#160;&#160;&#160;vector<b>&nbsp;</b>check&#160;<a href="checksimplevector.htm" target="_top">Check&nbsp;Simple&nbsp;Vector&nbsp;Concept</a><br>
&#160;&#160;&#160;&#160;&#160;vector<b>&nbsp;</b>example&#160;<a href="simplevector.cpp.htm" target="_top">Simple&nbsp;Vector&nbsp;Template&nbsp;Class:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
sin&#160;<a href="sin.cpp.htm" target="_top">The&nbsp;Sine&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;<a href="sin.htm" target="_top">The&nbsp;Sine&nbsp;Function</a><br>
&#160;&#160;&#160;&#160;<a href="exp.cpp.htm" target="_top">The&nbsp;Exponential&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;forward<b>&nbsp;</b>theory&#160;<a href="sinforward.htm" target="_top">Sine&nbsp;Function&nbsp;Forward&nbsp;Taylor&nbsp;Polynomial&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;inverse&#160;<a href="asin.htm" target="_top">The&nbsp;Inverse&nbsp;Sine&nbsp;Function</a><br>
&#160;&#160;&#160;&#160;&#160;reverse<b>&nbsp;</b>theory&#160;<a href="sincosreverse.htm" target="_top">Sine&nbsp;and&nbsp;Cosine&nbsp;Functions&nbsp;Reverse&nbsp;Mode&nbsp;Theory</a><br>
size<br>
&#160;&#160;&#160;&#160;&#160;vector&#160;<a href="simplevector_frame1.htm#Size" target="frame1"><i>Definition&nbsp;of&nbsp;a&nbsp;Simple&nbsp;Vector:&#160;Size</i></a><br>
&#160;&#160;&#160;&#160;&#160;vector<b>&nbsp;</b>constructor&#160;<a href="simplevector_frame1.htm#Sizing Constructor" target="frame1"><i>Definition&nbsp;of&nbsp;a&nbsp;Simple&nbsp;Vector:&#160;Sizing&nbsp;Constructor</i></a><br>
solve<br>
&#160;&#160;&#160;&#160;&#160;Lu<b>&nbsp;</b>factor&#160;<a href="lufactor.htm" target="_top">LU&nbsp;Factorization&nbsp;of&nbsp;A&nbsp;Square&nbsp;Matrix</a><br>
&#160;&#160;&#160;&#160;&#160;linear<b>&nbsp;</b>equation&#160;<a href="luvecad.htm" target="_top">Lu&nbsp;Factor&nbsp;and&nbsp;Solve&nbsp;with&nbsp;Recorded&nbsp;Pivoting</a><br>
&#160;&#160;&#160;&#160;&#160;linear<b>&nbsp;</b>equation&#160;<a href="lusolve.htm" target="_top">Compute&nbsp;Determinant&nbsp;and&nbsp;Solve&nbsp;Linear&nbsp;Equations</a><br>
&#160;&#160;&#160;&#160;&#160;ODE&#160;<a href="rosen34.htm" target="_top">A&nbsp;3rd&nbsp;and&nbsp;4th&nbsp;Order&nbsp;Rosenbrock&nbsp;ODE&nbsp;Solver</a><br>
&#160;&#160;&#160;&#160;&#160;ODE&#160;<a href="runge45.htm" target="_top">An&nbsp;Embedded&nbsp;4th&nbsp;and&nbsp;5th&nbsp;Order&nbsp;Runge-Kutta&nbsp;ODE&nbsp;Solver</a><br>
source<br>
&#160;&#160;&#160;&#160;&#160;CppAD<b>::</b>vector&#160;<a href="cppad_vector.h.htm" target="_top">CppAD::vector&nbsp;Source&nbsp;Code</a><br>
&#160;&#160;&#160;&#160;&#160;LuFactor&#160;<a href="lufactor.h.htm" target="_top">LuFactor&nbsp;Source&nbsp;Code</a><br>
&#160;&#160;&#160;&#160;&#160;LuInvert&#160;<a href="luinvert.h.htm" target="_top">LuInvert&nbsp;Source&nbsp;Code</a><br>
&#160;&#160;&#160;&#160;&#160;LuSolve&#160;<a href="lusolve.h.htm" target="_top">LuSolve&nbsp;Source&nbsp;Code</a><br>
&#160;&#160;&#160;&#160;&#160;Poly&#160;<a href="poly.h.htm" target="_top">Poly&nbsp;Source&nbsp;Code</a><br>
special<b>&nbsp;</b>functions&#160;<a href="faq_frame1.htm#Intrinsic Functions" target="frame1"><i>Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Intrinsic&nbsp;Functions</i></a><br>
speed&#160;<a href="speedfadbad.cpp.htm" target="_top">Run&nbsp;All&nbsp;The&nbsp;FADBAD&nbsp;Speed&nbsp;Comparison&nbsp;Tests</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;<a href="speedadolc.cpp.htm" target="_top">Run&nbsp;All&nbsp;The&nbsp;ADOLC&nbsp;Speed&nbsp;Comparison&nbsp;Tests</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;<a href="odespeed.cpp.htm" target="_top">ODE&nbsp;Solver:&nbsp;Speed&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;<a href="speed.cpp.htm" target="_top">Run&nbsp;All&nbsp;The&nbsp;Speed&nbsp;Tests</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;<a href="speed.htm" target="_top">Routines&nbsp;That&nbsp;Speed&nbsp;Test&nbsp;CppAD</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;<a href="faq_frame1.htm#Speed" target="frame1"><i>Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Speed</i></a><br>
&#160;&#160;&#160;&#160;&#160;ADOLC&#160;<a href="detluadolc.cpp.htm" target="_top">ADOLC&nbsp;&amp;&nbsp;CppAD&nbsp;Gradient&nbsp;of&nbsp;Determinant&nbsp;by&nbsp;Lu&nbsp;Factorization</a><br>
&#160;&#160;&#160;&#160;&#160;ADOLC&#160;<a href="detminoradolc.cpp.htm" target="_top">ADOLC&nbsp;&amp;&nbsp;CppAD&nbsp;Gradient&nbsp;of&nbsp;Determinant&nbsp;by&nbsp;Minors</a><br>
&#160;&#160;&#160;&#160;&#160;determinant<b>&nbsp;</b>by<b>&nbsp;</b>minors&#160;<a href="detminorspeed.cpp.htm" target="_top">Determinant&nbsp;Using&nbsp;Expansion&nbsp;by&nbsp;Minors:&nbsp;Speed&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;FADBAD&#160;<a href="detlufadbad.cpp.htm" target="_top">FADBAD&nbsp;&amp;&nbsp;CppAD&nbsp;Gradient&nbsp;of&nbsp;Determinant&nbsp;by&nbsp;Lu&nbsp;Factorization</a><br>
&#160;&#160;&#160;&#160;&#160;FADBAD&#160;<a href="detminorfadbad.cpp.htm" target="_top">FADBAD&nbsp;&amp;&nbsp;CppAD&nbsp;Gradient&nbsp;of&nbsp;Determinant&nbsp;by&nbsp;Minors</a><br>
&#160;&#160;&#160;&#160;&#160;Lu&#160;<a href="lusolvespeed.cpp.htm" target="_top">Speed&nbsp;Test&nbsp;Lu&nbsp;Factor&nbsp;and&nbsp;Solve:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Lu<b>&nbsp;</b>determinant&#160;<a href="detluspeed.cpp.htm" target="_top">Determinant&nbsp;by&nbsp;Lu&nbsp;Factor&nbsp;and&nbsp;Solve:&nbsp;Speed&nbsp;Test</a><br>
sqrt&#160;<a href="sqrt.cpp.htm" target="_top">The&nbsp;Square&nbsp;Root&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;<a href="sqrt.htm" target="_top">The&nbsp;Square&nbsp;Root&nbsp;Function</a><br>
&#160;&#160;&#160;&#160;&#160;forward<b>&nbsp;</b>theory&#160;<a href="sqrtforward.htm" target="_top">Square&nbsp;Root&nbsp;Function&nbsp;Forward&nbsp;Taylor&nbsp;Polynomial&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;reverse<b>&nbsp;</b>theory&#160;<a href="sqrtreverse.htm" target="_top">Square&nbsp;Root&nbsp;Function&nbsp;Reverse&nbsp;Mode&nbsp;Theory</a><br>
square<b>&nbsp;</b>root&#160;<a href="sqrt.htm" target="_top">The&nbsp;Square&nbsp;Root&nbsp;Function</a><br>
standard<br>
&#160;&#160;&#160;&#160;&#160;math<b>&nbsp;</b>function&#160;<a href="faq_frame1.htm#Namespace.Using" target="frame1"><i>Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Namespace.Using</i></a><br>
&#160;&#160;&#160;&#160;&#160;math<b>&nbsp;</b>library&#160;<a href="stdmathlib.htm" target="_top">The&nbsp;Standard&nbsp;Library&nbsp;Unary&nbsp;Math&nbsp;Functions</a><br>
start<br>
&#160;&#160;&#160;&#160;&#160;tape&#160;<a href="independent.htm" target="_top">Declare&nbsp;Independent&nbsp;Variables&nbsp;and&nbsp;Start&nbsp;Recording</a><br>
state&#160;<a href="glossary_frame1.htm#Tape State" target="frame1"><i>Glossary:&#160;Tape&nbsp;State</i></a><br>
&#160;&#160;&#160;&#160;&#160;tape&#160;<a href="independent_frame2.htm#Tape State" target="frame1"><i>Declare&nbsp;Independent&nbsp;Variables&nbsp;and&nbsp;Start&nbsp;Recording:&#160;Tape&nbsp;State</i></a><br>
stiff<br>
&#160;&#160;&#160;&#160;&#160;ODE&#160;<a href="rosen34.htm" target="_top">A&nbsp;3rd&nbsp;and&nbsp;4th&nbsp;Order&nbsp;Rosenbrock&nbsp;ODE&nbsp;Solver</a><br>
storage<b>:</b>&#160;<a href="faq_frame1.htm#Tape Storage: Disk or Memory" target="frame1"><i>Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Tape&nbsp;Storage:&nbsp;Disk&nbsp;or&nbsp;Memory</i></a><br>
stream<br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>output&#160;<a href="output.htm" target="_top">Writing&nbsp;an&nbsp;AD&nbsp;Value&nbsp;on&nbsp;a&nbsp;Output&nbsp;Stream</a><br>
subtract<br>
&#160;&#160;&#160;&#160;&#160;<b>-=</b>&#160;<a href="subeq.htm" target="_top">The&nbsp;AD&nbsp;Subtraction&nbsp;Computed&nbsp;Assignment&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;<b>-=&nbsp;</b>example&#160;<a href="subeq.cpp.htm" target="_top">Subtraction&nbsp;Computed&nbsp;Assignment:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;binary&#160;<a href="sub.htm" target="_top">The&nbsp;AD&nbsp;Binary&nbsp;Subtraction&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="sub.cpp.htm" target="_top">Binary&nbsp;Subtraction:&nbsp;Example&nbsp;and&nbsp;Test</a><br>

<b><big><a name="T">T</a></big></b>
<br>
Taylor&#160;<a href="reverse.htm" target="_top">Reverse&nbsp;Mode</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="forward.htm" target="_top">Forward&nbsp;Mode</a><br>
&#160;&#160;&#160;&#160;&#160;ODE&#160;<a href="odetaylor.cpp.htm" target="_top">Taylor's&nbsp;Method&nbsp;Ode&nbsp;Solver:&nbsp;An&nbsp;Example&nbsp;and&nbsp;Test</a><br>
tan<br>
&#160;&#160;&#160;&#160;&#160;inverse&#160;<a href="atan2.cpp.htm" target="_top">The&nbsp;Two&nbsp;Argument&nbsp;Inverse&nbsp;Tangent:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;inverse&#160;<a href="atan2.htm" target="_top">The&nbsp;Two&nbsp;Argument&nbsp;Inverse&nbsp;Tangent&nbsp;Function</a><br>
&#160;&#160;&#160;&#160;&#160;inverse&#160;<a href="atan.htm" target="_top">The&nbsp;Inverse&nbsp;Tangent&nbsp;Function</a><br>
tape&#160;<a href="glossary_frame1.htm#Tape State" target="frame1"><i>Glossary:&#160;Tape&nbsp;State</i></a><br>
&#160;&#160;&#160;&#160;&#160;<a href="odespeed.cpp.htm" target="_top">ODE&nbsp;Solver:&nbsp;Speed&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;<a href="adfun.htm" target="_top">Constructing&nbsp;Differentiable&nbsp;Functions&nbsp;From&nbsp;The&nbsp;Tape</a><br>
&#160;&#160;&#160;&#160;&#160;<a href="faq_frame1.htm#Tape Storage: Disk or Memory" target="frame1"><i>Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Tape&nbsp;Storage:&nbsp;Disk&nbsp;or&nbsp;Memory</i></a><br>
&#160;&#160;&#160;&#160;&#160;compare<b>&nbsp;</b>operator&#160;<a href="adfun_frame2.htm#CompareChange" target="frame1"><i>Constructing&nbsp;Differentiable&nbsp;Functions&nbsp;From&nbsp;The&nbsp;Tape:&#160;CompareChange</i></a><br>
&#160;&#160;&#160;&#160;&#160;index&#160;<a href="vecad.htm" target="_top">Vectors&nbsp;That&nbsp;Record&nbsp;Indexing&nbsp;Operations</a><br>
&#160;&#160;&#160;&#160;&#160;multiple&#160;<a href="multape.cpp.htm" target="_top">Multiple&nbsp;Tapes:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;multiple&#160;<a href="multape.htm" target="_top">Using&nbsp;Multiple&nbsp;Tapes</a><br>
&#160;&#160;&#160;&#160;&#160;start&#160;<a href="independent.htm" target="_top">Declare&nbsp;Independent&nbsp;Variables&nbsp;and&nbsp;Start&nbsp;Recording</a><br>
&#160;&#160;&#160;&#160;&#160;state&#160;<a href="independent_frame2.htm#Tape State" target="frame1"><i>Declare&nbsp;Independent&nbsp;Variables&nbsp;and&nbsp;Start&nbsp;Recording:&#160;Tape&nbsp;State</i></a><br>
taylor&#160;<a href="glossary_frame1.htm#Taylor Coefficient" target="frame1"><i>Glossary:&#160;Taylor&nbsp;Coefficient</i></a><br>
template<br>
&#160;&#160;&#160;&#160;&#160;polynomial<b>&nbsp;</b>derivative&#160;<a href="poly.htm" target="_top">Evaluate&nbsp;a&nbsp;Polynomial&nbsp;or&nbsp;its&nbsp;Derivative</a><br>
&#160;&#160;&#160;&#160;&#160;simple<b>&nbsp;</b>vector<b>&nbsp;</b>class&#160;<a href="simplevector.htm" target="_top">Definition&nbsp;of&nbsp;a&nbsp;Simple&nbsp;Vector</a><br>
&#160;&#160;&#160;&#160;&#160;vector<b>&nbsp;</b>class&#160;<a href="cppad_vector.htm" target="_top">The&nbsp;CppAD::vector&nbsp;Template&nbsp;Class</a><br>
test&#160;<a href="speedfadbad.cpp.htm" target="_top">Run&nbsp;All&nbsp;The&nbsp;FADBAD&nbsp;Speed&nbsp;Comparison&nbsp;Tests</a><br>
&#160;&#160;&#160;&#160;&#160;<a href="speedadolc.cpp.htm" target="_top">Run&nbsp;All&nbsp;The&nbsp;ADOLC&nbsp;Speed&nbsp;Comparison&nbsp;Tests</a><br>
&#160;&#160;&#160;&#160;&#160;<a href="odespeed.cpp.htm" target="_top">ODE&nbsp;Solver:&nbsp;Speed&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;<a href="speed.cpp.htm" target="_top">Run&nbsp;All&nbsp;The&nbsp;Speed&nbsp;Tests</a><br>
&#160;&#160;&#160;&#160;&#160;<a href="speed.htm" target="_top">Routines&nbsp;That&nbsp;Speed&nbsp;Test&nbsp;CppAD</a><br>
&#160;&#160;&#160;&#160;&#160;<a href="example.cpp.htm" target="_top">Program&nbsp;That&nbsp;Runs&nbsp;the&nbsp;CppAD&nbsp;Example&nbsp;Suite</a><br>
&#160;&#160;&#160;&#160;&#160;<a href="output.cpp.htm" target="_top">The&nbsp;Output&nbsp;Operator&nbsp;for&nbsp;AD&nbsp;Objects:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;<a href="install.htm" target="_top">Installing&nbsp;and&nbsp;Testing&nbsp;CppAD</a><br>
&#160;&#160;&#160;&#160;&#160;<b>/</b>&#160;<a href="div.cpp.htm" target="_top">Binary&nbsp;Division:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="fun.h.htm" target="_top">Differentiable&nbsp;Function&nbsp;Constructor:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;abs&#160;<a href="abs.cpp.htm" target="_top">The&nbsp;Absolute&nbsp;Value&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;acos&#160;<a href="acos.cpp.htm" target="_top">The&nbsp;Acos&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;add&#160;<a href="add.cpp.htm" target="_top">Binary&nbsp;Addition:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;asin&#160;<a href="asin.cpp.htm" target="_top">The&nbsp;Asin&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;assign&#160;<a href="eq.cpp.htm" target="_top">AD&nbsp;Assignment&nbsp;Operator:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;atan&#160;<a href="atan.cpp.htm" target="_top">The&nbsp;Atan&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;atan2&#160;<a href="atan2.cpp.htm" target="_top">The&nbsp;Two&nbsp;Argument&nbsp;Inverse&nbsp;Tangent:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;boolean&#160;<a href="boolfun.cpp.htm" target="_top">Defining&nbsp;Boolean&nbsp;Functions&nbsp;with&nbsp;AD&nbsp;Arguments:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;CompareChange&#160;<a href="comparechange.cpp.htm" target="_top">CompareChange&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;CondExp&#160;<a href="condexp.cpp.htm" target="_top">Conditional&nbsp;Expressions:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;CppAD<b>::</b>vector&#160;<a href="cppad_vector.cpp.htm" target="_top">CppAD::vector&nbsp;Template&nbsp;Class:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;check<b>&nbsp;</b>SimpleVector&#160;<a href="checksimplevector.cpp.htm" target="_top">The&nbsp;CheckSimpleVector&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;compare&#160;<a href="compare.cpp.htm" target="_top">AD&nbsp;Comparison&nbsp;Operators:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;complex&#160;<a href="lusolve.cpp.htm" target="_top">LuSolve&nbsp;With&nbsp;Complex&nbsp;Arguments:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;complex<b>&nbsp;</b>polynomial&#160;<a href="complexpoly.cpp.htm" target="_top">Complex&nbsp;Polynomial:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;construct<b>&nbsp;</b>from<b>&nbsp;</b>base&#160;<a href="frombase.cpp.htm" target="_top">AD&nbsp;Constructor&nbsp;From&nbsp;Base&nbsp;Type:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;copy&#160;<a href="copy.cpp.htm" target="_top">AD&nbsp;Copy&nbsp;Constructor:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;cos&#160;<a href="cos.cpp.htm" target="_top">The&nbsp;Cosine&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;default<b>&nbsp;</b>constructor&#160;<a href="default.cpp.htm" target="_top">Default&nbsp;AD&nbsp;Constructor:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;derivative&#160;<a href="revone.h.htm" target="_top">Derivative&nbsp;of&nbsp;One&nbsp;Range&nbsp;Component:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;determinant<b>&nbsp;</b>by<b>&nbsp;</b>minors&#160;<a href="detbylu.cpp.htm" target="_top">Determinant&nbsp;Using&nbsp;Lu&nbsp;Factorization:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;determinant<b>&nbsp;</b>by<b>&nbsp;</b>minors&#160;<a href="detbyminor.cpp.htm" target="_top">Determinant&nbsp;Using&nbsp;Expansion&nbsp;by&nbsp;Minors:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;determinant<b>&nbsp;</b>by<b>&nbsp;</b>minors&#160;<a href="detofminor.cpp.htm" target="_top">Determinant&nbsp;of&nbsp;a&nbsp;Minor:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;discrete&#160;<a href="discrete.cpp.htm" target="_top">User&nbsp;Defined&nbsp;Discrete&nbsp;Functions:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;division&#160;<a href="div.cpp.htm" target="_top">Binary&nbsp;Division:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;erf&#160;<a href="erf.cpp.htm" target="_top">The&nbsp;Error&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Forward&#160;<a href="forward.h.htm" target="_top">Forward&nbsp;Mode:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;gradient&#160;<a href="hesludet.cpp.htm" target="_top">Gradient&nbsp;of&nbsp;Determinant&nbsp;Using&nbsp;LU&nbsp;Factorization:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;gradient&#160;<a href="hesminordet.cpp.htm" target="_top">Gradient&nbsp;of&nbsp;Determinant&nbsp;Using&nbsp;Expansion&nbsp;by&nbsp;Minors:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;gradient&#160;<a href="jacludet.cpp.htm" target="_top">Gradient&nbsp;of&nbsp;Determinant&nbsp;Using&nbsp;Lu&nbsp;Factorization:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;gradient&#160;<a href="jacminordet.cpp.htm" target="_top">Gradient&nbsp;of&nbsp;Determinant&nbsp;Using&nbsp;Expansion&nbsp;by&nbsp;Minors:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Hessian&#160;<a href="hessian.h.htm" target="_top">Hessian&nbsp;of&nbsp;Scalar&nbsp;Valued&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Jacobian&#160;<a href="jacobian.h.htm" target="_top">Derivative&nbsp;of&nbsp;Vector&nbsp;Valued&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;LU&#160;<a href="hesludet.cpp.htm" target="_top">Gradient&nbsp;of&nbsp;Determinant&nbsp;Using&nbsp;LU&nbsp;Factorization:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Lu&#160;<a href="jacludet.cpp.htm" target="_top">Gradient&nbsp;of&nbsp;Determinant&nbsp;Using&nbsp;Lu&nbsp;Factorization:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Lu<b>&nbsp;</b>record<b>&nbsp;</b>pivot&#160;<a href="luvecadok.cpp.htm" target="_top">Lu&nbsp;Factor&nbsp;and&nbsp;Solve&nbsp;With&nbsp;Recorded&nbsp;Pivoting:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;LuFactor&#160;<a href="lufactor.cpp.htm" target="_top">LuFactor:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;LuInvert&#160;<a href="luinvert.cpp.htm" target="_top">LuInvert:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;LuSolve&#160;<a href="lusolve.cpp.htm" target="_top">LuSolve&nbsp;With&nbsp;Complex&nbsp;Arguments:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;log&#160;<a href="log10.cpp.htm" target="_top">The&nbsp;Base&nbsp;10&nbsp;Logarithm&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;log&#160;<a href="log.cpp.htm" target="_top">The&nbsp;Logarithm&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;minors<b>&nbsp;</b>expansion&#160;<a href="hesminordet.cpp.htm" target="_top">Gradient&nbsp;of&nbsp;Determinant&nbsp;Using&nbsp;Expansion&nbsp;by&nbsp;Minors:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;minors<b>&nbsp;</b>expansion&#160;<a href="jacminordet.cpp.htm" target="_top">Gradient&nbsp;of&nbsp;Determinant&nbsp;Using&nbsp;Expansion&nbsp;by&nbsp;Minors:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;minus&#160;<a href="sub.cpp.htm" target="_top">Binary&nbsp;Subtraction:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;multiply&#160;<a href="mul.cpp.htm" target="_top">Binary&nbsp;Multiplication:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;NearEqual&#160;<a href="near_equal.cpp.htm" target="_top">NearEqual&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;negative&#160;<a href="neg.cpp.htm" target="_top">Negative&nbsp;Operator:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;ODE&#160;<a href="odetaylor.cpp.htm" target="_top">Taylor's&nbsp;Method&nbsp;Ode&nbsp;Solver:&nbsp;An&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;OdeErrControl&#160;<a href="odeerrcontrol.cpp.htm" target="_top">OdeErrControl:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;output&#160;<a href="output.cpp.htm" target="_top">The&nbsp;Output&nbsp;Operator&nbsp;for&nbsp;AD&nbsp;Objects:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;partial&#160;<a href="forone.h.htm" target="_top">Partial&nbsp;w.r.t&nbsp;One&nbsp;Domain&nbsp;Component:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;plus&#160;<a href="add.cpp.htm" target="_top">Binary&nbsp;Addition:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;polynomial&#160;<a href="poly.cpp.htm" target="_top">Polynomial&nbsp;Evaluation:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;pow&#160;<a href="pow.cpp.htm" target="_top">The&nbsp;Power&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;pow&#160;<a href="powint.cpp.htm" target="_top">Integer&nbsp;Powers:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Reverse&#160;<a href="reverse.h.htm" target="_top">Reverse&nbsp;Mode:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Rosen34&#160;<a href="rosen34.cpp.htm" target="_top">Rosen34:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Runge45&#160;<a href="runge45.cpp.htm" target="_top">Runge45:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;second<b>&nbsp;</b>partial&#160;<a href="revtwo.h.htm" target="_top">Second&nbsp;Partials&nbsp;Reverse&nbsp;Driver:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;second<b>&nbsp;</b>partial&#160;<a href="fortwo.h.htm" target="_top">Subset&nbsp;of&nbsp;Second&nbsp;Order&nbsp;Partials:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;simple<b>&nbsp;</b>vector&#160;<a href="simplevector.cpp.htm" target="_top">Simple&nbsp;Vector&nbsp;Template&nbsp;Class:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;sin&#160;<a href="sin.cpp.htm" target="_top">The&nbsp;Sine&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;sin&#160;<a href="exp.cpp.htm" target="_top">The&nbsp;Exponential&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;speed&#160;<a href="speedtest.htm" target="_top">Run&nbsp;One&nbsp;Speed&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;sqrt&#160;<a href="sqrt.cpp.htm" target="_top">The&nbsp;Square&nbsp;Root&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;subtract&#160;<a href="sub.cpp.htm" target="_top">Binary&nbsp;Subtraction:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;times&#160;<a href="mul.cpp.htm" target="_top">Binary&nbsp;Multiplication:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Value&#160;<a href="value.cpp.htm" target="_top">Conversion&nbsp;to&nbsp;Base&nbsp;Type:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;VecAD&#160;<a href="vec.cpp.htm" target="_top">Recording&nbsp;Vector&nbsp;Indexing&nbsp;Operations:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
theory<br>
&#160;&#160;&#160;&#160;&#160;acos<b>&nbsp;</b>forward&#160;<a href="acosforward.htm" target="_top">Arccosine&nbsp;Function&nbsp;Forward&nbsp;Taylor&nbsp;Polynomial&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;acos<b>&nbsp;</b>reverse&#160;<a href="acosreverse.htm" target="_top">Arccosine&nbsp;Function&nbsp;Reverse&nbsp;Mode&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;asin<b>&nbsp;</b>forward&#160;<a href="asinforward.htm" target="_top">Arcsine&nbsp;Function&nbsp;Forward&nbsp;Taylor&nbsp;Polynomial&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;asin<b>&nbsp;</b>reverse&#160;<a href="asinreverse.htm" target="_top">Arcsine&nbsp;Function&nbsp;Reverse&nbsp;Mode&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;atan<b>&nbsp;</b>forward&#160;<a href="atanforward.htm" target="_top">Arctangent&nbsp;Function&nbsp;Forward&nbsp;Taylor&nbsp;Polynomial&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;atan<b>&nbsp;</b>reverse&#160;<a href="atanreverse.htm" target="_top">Arctangent&nbsp;Function&nbsp;Reverse&nbsp;Mode&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;cos<b>&nbsp;</b>forward&#160;<a href="cosforward.htm" target="_top">Cosine&nbsp;Function&nbsp;Forward&nbsp;Taylor&nbsp;Polynomial&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;cos<b>&nbsp;</b>reverse&#160;<a href="sincosreverse.htm" target="_top">Sine&nbsp;and&nbsp;Cosine&nbsp;Functions&nbsp;Reverse&nbsp;Mode&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;exp<b>&nbsp;</b>forward&#160;<a href="expforward.htm" target="_top">Exponential&nbsp;Function&nbsp;Forward&nbsp;Taylor&nbsp;Polynomial&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;exp<b>&nbsp;</b>reverse&#160;<a href="expreverse.htm" target="_top">Exponential&nbsp;Function&nbsp;Reverse&nbsp;Mode&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;log<b>&nbsp;</b>forward&#160;<a href="logforward.htm" target="_top">Logarithm&nbsp;Function&nbsp;Forward&nbsp;Taylor&nbsp;Polynomial&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;log<b>&nbsp;</b>reverse&#160;<a href="logreverse.htm" target="_top">Logarithm&nbsp;Function&nbsp;Reverse&nbsp;Mode&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;sin<b>&nbsp;</b>forward&#160;<a href="sinforward.htm" target="_top">Sine&nbsp;Function&nbsp;Forward&nbsp;Taylor&nbsp;Polynomial&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;sin<b>&nbsp;</b>reverse&#160;<a href="sincosreverse.htm" target="_top">Sine&nbsp;and&nbsp;Cosine&nbsp;Functions&nbsp;Reverse&nbsp;Mode&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;sqrt<b>&nbsp;</b>forward&#160;<a href="sqrtforward.htm" target="_top">Square&nbsp;Root&nbsp;Function&nbsp;Forward&nbsp;Taylor&nbsp;Polynomial&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;sqrt<b>&nbsp;</b>reverse&#160;<a href="sqrtreverse.htm" target="_top">Square&nbsp;Root&nbsp;Function&nbsp;Reverse&nbsp;Mode&nbsp;Theory</a><br>
times<br>
&#160;&#160;&#160;&#160;&#160;<b>*=</b>&#160;<a href="muleq.htm" target="_top">The&nbsp;AD&nbsp;Multiplication&nbsp;Computed&nbsp;Assignment&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;<b>*=&nbsp;</b>example&#160;<a href="muleq.cpp.htm" target="_top">Multiplication&nbsp;Computed&nbsp;Assignment:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="mul.cpp.htm" target="_top">Binary&nbsp;Multiplication:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
type&#160;<a href="glossary_frame1.htm#Base Type" target="frame1"><i>Glossary:&#160;Base&nbsp;Type</i></a><br>
&#160;&#160;&#160;&#160;&#160;<a href="value.htm" target="_top">Base&nbsp;Type&nbsp;Value</a><br>
&#160;&#160;&#160;&#160;&#160;base<b>&nbsp;</b>require&#160;<a href="cppad_frame2.htm#Base Type Requirements" target="frame1"><i>A&nbsp;Package&nbsp;for&nbsp;Differentiation&nbsp;of&nbsp;C++&nbsp;Algorithms:&nbsp;CppAD&nbsp;Version&nbsp;05-07-05:&#160;Base&nbsp;Type&nbsp;Requirements</i></a><br>

<b><big><a name="U">U</a></big></b>
<br>
unary&#160;<a href="neg.htm" target="_top">Negation:&nbsp;The&nbsp;Unary&nbsp;Minus&nbsp;Operator</a><br>
using&#160;<a href="faq_frame1.htm#Namespace.Using" target="frame1"><i>Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Namespace.Using</i></a><br>

<b><big><a name="V">V</a></big></b>
<br>
Variable&#160;<a href="parameter.htm" target="_top">Is&nbsp;This&nbsp;AD&nbsp;Object&nbsp;a&nbsp;Parameter</a><br>
VecAD&#160;<a href="vec.cpp.htm" target="_top">Recording&nbsp;Vector&nbsp;Indexing&nbsp;Operations:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;<a href="vecad_frame2.htm#Constructor" target="frame1"><i>Vectors&nbsp;That&nbsp;Record&nbsp;Indexing&nbsp;Operations:&#160;Constructor</i></a><br>
value&#160;<a href="value.htm" target="_top">Base&nbsp;Type&nbsp;Value</a><br>
&#160;&#160;&#160;&#160;&#160;absolute&#160;<a href="abs.htm" target="_top">The&nbsp;Absolute&nbsp;Value&nbsp;Function</a><br>
value<b>_</b>type<br>
&#160;&#160;&#160;&#160;&#160;vector&#160;<a href="simplevector_frame1.htm#Value Type" target="frame1"><i>Definition&nbsp;of&nbsp;a&nbsp;Simple&nbsp;Vector:&#160;Value&nbsp;Type</i></a><br>
variable&#160;<a href="glossary_frame1.htm#Variable" target="frame1"><i>Glossary:&#160;Variable</i></a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="glossary_frame1.htm#Independent Variable" target="frame1"><i>Glossary:&#160;Independent&nbsp;Variable</i></a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="glossary_frame1.htm#Dependent Variable" target="frame1"><i>Glossary:&#160;Dependent&nbsp;Variable</i></a><br>
&#160;&#160;&#160;&#160;&#160;independent&#160;<a href="independent.htm" target="_top">Declare&nbsp;Independent&nbsp;Variables&nbsp;and&nbsp;Start&nbsp;Recording</a><br>
variables&#160;<a href="independent_frame2.htm#Variables" target="frame1"><i>Declare&nbsp;Independent&nbsp;Variables&nbsp;and&nbsp;Start&nbsp;Recording:&#160;Variables</i></a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="faq_frame1.htm#Independent Variables" target="frame1"><i>Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Independent&nbsp;Variables</i></a><br>
vector&#160;<a href="glossary_frame1.htm#Elementary Vector" target="frame1"><i>Glossary:&#160;Elementary&nbsp;Vector</i></a><br>
&#160;&#160;&#160;&#160;&#160;CppAD&#160;<a href="cppad_vector.cpp.htm" target="_top">CppAD::vector&nbsp;Template&nbsp;Class:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;CppAD<b>&nbsp;</b>source&#160;<a href="cppad_vector.h.htm" target="_top">CppAD::vector&nbsp;Source&nbsp;Code</a><br>
&#160;&#160;&#160;&#160;&#160;record<b>&nbsp;</b>index&#160;<a href="vec.cpp.htm" target="_top">Recording&nbsp;Vector&nbsp;Indexing&nbsp;Operations:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;record<b>&nbsp;</b>index&#160;<a href="vecad.htm" target="_top">Vectors&nbsp;That&nbsp;Record&nbsp;Indexing&nbsp;Operations</a><br>
&#160;&#160;&#160;&#160;&#160;simple&#160;<a href="simplevector.cpp.htm" target="_top">Simple&nbsp;Vector&nbsp;Template&nbsp;Class:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;simple&#160;<a href="simplevector.htm" target="_top">Definition&nbsp;of&nbsp;a&nbsp;Simple&nbsp;Vector</a><br>
&#160;&#160;&#160;&#160;&#160;simple<b>&nbsp;</b>check&#160;<a href="checksimplevector.htm" target="_top">Check&nbsp;Simple&nbsp;Vector&nbsp;Concept</a><br>
&#160;&#160;&#160;&#160;&#160;template<b>&nbsp;</b>class&#160;<a href="cppad_vector.htm" target="_top">The&nbsp;CppAD::vector&nbsp;Template&nbsp;Class</a><br>
version<br>
&#160;&#160;&#160;&#160;&#160;CppAD&#160;<a href="cppad.htm" target="_top">A&nbsp;Package&nbsp;for&nbsp;Differentiation&nbsp;of&nbsp;C++&nbsp;Algorithms:&nbsp;CppAD&nbsp;Version&nbsp;05-07-05</a><br>

<b><big><a name="W">W</a></big></b>
<br>
windows<br>
&#160;&#160;&#160;&#160;&#160;CppAD<b>&nbsp;</b>install&#160;<a href="installwindows.htm" target="_top">Windows&nbsp;Installation&nbsp;and&nbsp;Testing</a><br>

</body>
</html>
