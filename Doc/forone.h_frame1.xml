<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>Partial w.r.t One Domain Component: Example and Test</title>
<meta name="description" content="Partial w.r.t One Domain Component: Example and Test"/>
<meta name="keywords" content=" partial one component derivative example test "/><style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
</head>
<body>
<div align='right'><a href="forone.xml" target="_top">previous</a>
&#xA0;&#xA0;<a href="revone.xml" target="_top">next</a>
&#xA0;&#xA0;<a href="_contents.xml" target="_top">contents</a>
&#xA0;&#xA0;<a href="_reference.xml" target="_top">reference</a>
&#xA0;&#xA0;<a href="_index.xml" target="_top">index</a>
&#xA0;&#xA0;<a href="_search.xml" target="_top">search</a>
&#xA0;&#xA0;<a href="_external.xml" target="_top">external</a>
&#xA0;&#xA0;This:&#xA0;&#xA0;<a href="forone.h.xml" target="_top">section</a>, <a href="forone.h_frame1.xml" target="_top">frame</a></div>
<hr/>







<center><b><big><big>Partial w.r.t One Domain Component: Example and Test</big></big></b></center>
<code><font color="blue"><span style='white-space: nowrap'><br/>
<br/>
#&#xA0;include&#xA0;&lt;CppAD/CppAD.h&gt;<br/>
<br/>
//&#xA0;----------------------------------------------------------------------------<br/>
<br/>
template&#xA0;&lt;typename&#xA0;VectorDouble&gt;&#xA0;//&#xA0;vector&#xA0;class,&#xA0;elements&#xA0;of&#xA0;type&#xA0;double<br/>
bool&#xA0;ForOne()<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;ok&#xA0;=&#xA0;true;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;namespace&#xA0;CppAD;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;CppAD::exp;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;CppAD::sin;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;CppAD::cos;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;n&#xA0;=&#xA0;2;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;m&#xA0;=&#xA0;3;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;independent&#xA0;and&#xA0;dependent&#xA0;variable&#xA0;vectors<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;&#xA0;AD&lt;double&gt;&#xA0;&gt;&#xA0;&#xA0;X(n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;&#xA0;AD&lt;double&gt;&#xA0;&gt;&#xA0;&#xA0;Y(m);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;value&#xA0;of&#xA0;the&#xA0;independent&#xA0;variable<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;X[0]&#xA0;=&#xA0;1.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;X[1]&#xA0;=&#xA0;2.;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;set&#xA0;the&#xA0;independent&#xA0;variables<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Independent(X);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;comupute&#xA0;the&#xA0;dependent&#xA0;variable&#xA0;values<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Y[0]&#xA0;=&#xA0;X[0]&#xA0;*&#xA0;exp(&#xA0;X[1]&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Y[1]&#xA0;=&#xA0;X[0]&#xA0;*&#xA0;sin(&#xA0;X[1]&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Y[2]&#xA0;=&#xA0;X[0]&#xA0;*&#xA0;cos(&#xA0;X[1]&#xA0;);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;create&#xA0;the&#xA0;function&#xA0;object&#xA0;F&#xA0;:&#xA0;X&#xA0;-&gt;&#xA0;Y<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ADFun&lt;double&gt;&#xA0;F(X,&#xA0;Y);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;argument&#xA0;value<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;VectorDouble&#xA0;x(n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x[0]&#xA0;=&#xA0;2.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x[1]&#xA0;=&#xA0;1.;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;compute&#xA0;and&#xA0;check&#xA0;partials&#xA0;of&#xA0;F&#xA0;w.r.t&#xA0;x[0]<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;VectorDouble&#xA0;dF(m);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;dF&#xA0;&#xA0;=&#xA0;F.ForOne(x,&#xA0;0);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;&#xA0;NearEqual(&#xA0;dF[0],&#xA0;exp(x[1]),&#xA0;1e-10,&#xA0;1e-10&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;&#xA0;NearEqual(&#xA0;dF[1],&#xA0;sin(x[1]),&#xA0;1e-10,&#xA0;1e-10&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;&#xA0;NearEqual(&#xA0;dF[2],&#xA0;cos(x[1]),&#xA0;1e-10,&#xA0;1e-10&#xA0;);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;compute&#xA0;and&#xA0;check&#xA0;partials&#xA0;of&#xA0;F&#xA0;w.r.t&#xA0;x[1]<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;dF&#xA0;&#xA0;=&#xA0;F.ForOne(x,&#xA0;1);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;&#xA0;NearEqual(&#xA0;dF[0],&#xA0;&#xA0;x[0]*exp(x[1]),&#xA0;1e-10,&#xA0;1e-10&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;&#xA0;NearEqual(&#xA0;dF[1],&#xA0;&#xA0;x[0]*cos(x[1]),&#xA0;1e-10,&#xA0;1e-10&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;&#xA0;NearEqual(&#xA0;dF[2],&#xA0;-x[0]*sin(x[1]),&#xA0;1e-10,&#xA0;1e-10&#xA0;);<br/>
<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;ok;<br/>
<br/>
}<br/>
<br/>
</span></font></code>
<hr/>Input File: Example\ForOne.h

</body>
</html>
