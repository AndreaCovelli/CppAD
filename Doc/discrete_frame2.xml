<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>User Defined Discrete Functions</title>
<meta name="description" content="User Defined Discrete Functions"/>
<meta name="keywords" content=" conditional assign "/><style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
</head>
<body>
<div align='right'>&#xA0;&#xA0;This:&#xA0;&#xA0;<a href="discrete.xml" target="_top">section</a>, <a href="discrete_frame2.xml" target="_top">frame</a></div>

<b><big><a name="Description">Description</a></big></b>
<br/>
The results of the <a href="compare.xml" target="_top"><span style='white-space: nowrap'>Compare</span></a>
 operations are boolean values
and hence are not recorded in the corresponding <a href="adfun.xml" target="_top"><span style='white-space: nowrap'>ADFun</span></a>
 object.
One can record the results of simulated logical operations
using the discrete functions described here.

<br/>
<br/>
<b><big><a name="Definition">Definition</a></big></b>
<br/>
The preprocessor macro invocation
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADCreateDiscrete(</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font></code><i><span style='white-space: nowrap'>FunName</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br/>
</span></font></code>creates a function with the following prototype
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;inline&#xA0;AD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;&#xA0;</span></font></code><i><span style='white-space: nowrap'>FunName</span></i><code><font color="blue"><span style='white-space: nowrap'>(const&#xA0;AD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;&#xA0;&amp;</span></font></code><i><span style='white-space: nowrap'>w</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br/>
</span></font></code>This function will compute its values using a user provided function
with the following prototype
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;</span></font></code><i><span style='white-space: nowrap'>FunName</span></i><code><font color="blue"><span style='white-space: nowrap'>(const&#xA0;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;&amp;</span></font></code><i><span style='white-space: nowrap'>w</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br/>
</span></font></code><br/>
<b><big><a name="Derivatives">Derivatives</a></big></b>
<br/>
An <a href="adfun.xml" target="_top"><span style='white-space: nowrap'>ADFun</span></a>
 object will compute the value of a discrete function
using the user provided version.
All the derivatives of a discrete function are treated as zero.

<br/>
<br/>
<b><big><a name="Conditional Assignment">Conditional Assignment</a></big></b>


<br/>
The conditional expression function <a href="condexp.xml" target="_top"><span style='white-space: nowrap'>CondExp</span></a>

is the preferred way to do conditional assignments.
Unfortunately, this requires that the <code><font color="blue">&gt;</font></code> operator be 
defined for the base type.
If <code><font color="blue">&gt;</font></code> is not defined for the base type, you can 
use the following construction to obtain conditional assignments:
<code><span style='white-space: nowrap'><br/>
<br/>
</span></code>Suppose that 
<i>w</i>,
<i>x</i>,
<i>y</i>, and <i>z</i> are <code><font color="blue">AD&lt; std::complex&lt;double&gt; &gt;</font></code> variables
and our computations contain a statement of the form
<code><font color="blue">
<span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if(&#xA0;w&#xA0;==&#xA0;0.&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;z&#xA0;=&#xA0;x;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;else&#xA0;z&#xA0;=&#xA0;y;<br/>
</span>
</font></code>
The corresponding <a href="adfun.xml" target="_top"><span style='white-space: nowrap'>ADFun</span></a>
 would only contain the
assignment that is executed. 
Further suppose that the function
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;EqZero(const&#xA0;double&#xA0;&amp;</span></font></code><i><span style='white-space: nowrap'>w</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br/>
</span></font></code>returns one if 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>w</mi>
<mo stretchy="false">=</mo>
<mn>0</mn>
</mrow></math>

 and zero otherwise and we use the command
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADCreateDiscrete(&#xA0;std::complex&lt;double&gt;&#xA0;,&#xA0;EqZero)<br/>
</span></font></code>If we replace the computations above by
<code><font color="blue">
<span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;z&#xA0;=&#xA0;EqZero(w)&#xA0;*&#xA0;x&#xA0;+&#xA0;(1.&#xA0;-&#xA0;EqZero(w))&#xA0;*&#xA0;y<br/>
</span>
</font></code>
the value of <i>z</i> will be the same as in the previous computations.
Furthermore the corresponding <code><font color="blue">ADFun</font></code> will record 
this conditional assignment.
(Note that while the value of <code><font color="blue">EqZero(w)</font></code> depends on <code><font color="blue">w</font></code>,
all of its derivatives are treated as being zero.)

<br/>
<br/>
<b><big><a name="Example">Example</a></big></b>

<br/>
The file
<a href="discrete.cpp.xml" target="_top"><span style='white-space: nowrap'>Discrete.cpp</span></a>

contains an example and a test of using discrete functions.   
It returns true if it succeeds and false otherwise.



<hr/>Input File: CppAD\local\Discrete.h

</body>
</html>
