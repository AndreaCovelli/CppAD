<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>Negative Operator: Example and Test</title>
<meta name="description" content="Negative Operator: Example and Test"/>
<meta name="keywords" content=" negative example test "/><style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
</head>
<body>
<div align='right'><a href="neg.xml" target="_top">previous</a>
&#xA0;&#xA0;<a href="binaryop.xml" target="_top">next</a>
&#xA0;&#xA0;<a href="_contents.xml" target="_top">contents</a>
&#xA0;&#xA0;<a href="_reference.xml" target="_top">reference</a>
&#xA0;&#xA0;<a href="_index.xml" target="_top">index</a>
&#xA0;&#xA0;<a href="_search.xml" target="_top">search</a>
&#xA0;&#xA0;<a href="_external.xml" target="_top">external</a>
&#xA0;&#xA0;This:&#xA0;&#xA0;<a href="neg.cpp.xml" target="_top">section</a>, <a href="neg.cpp_frame1.xml" target="_top">frame</a></div>
<hr/>


<center><b><big><big>Negative Operator: Example and Test</big></big></b></center>
<code><font color="blue"><span style='white-space: nowrap'><br/>
<br/>
#&#xA0;include&#xA0;&lt;CppAD/CppAD.h&gt;<br/>
<br/>
bool&#xA0;Neg(void)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;ok&#xA0;=&#xA0;true;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;namespace&#xA0;CppAD;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;independent&#xA0;variable&#xA0;vector,&#xA0;indices,&#xA0;values,&#xA0;and&#xA0;declaration<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;&#xA0;AD&lt;double&gt;&#xA0;&gt;&#xA0;U(2);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;s&#xA0;=&#xA0;0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;t&#xA0;=&#xA0;1;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;U[s]&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;3.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;U[t]&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;4.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Independent(U);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;dependent&#xA0;variable&#xA0;vector&#xA0;and&#xA0;indices<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;&#xA0;AD&lt;double&gt;&#xA0;&gt;&#xA0;Z(1);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;x&#xA0;=&#xA0;0;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;dependent&#xA0;variable&#xA0;values<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Z[x]&#xA0;=&#xA0;-&#xA0;U[t];&#xA0;&#xA0;&#xA0;//&#xA0;&#xA0;-&#xA0;AD&lt;double&gt;&#xA0;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;create&#xA0;f:&#xA0;U&#xA0;-&gt;&#xA0;Z&#xA0;and&#xA0;vectors&#xA0;used&#xA0;for&#xA0;derivative&#xA0;calculations<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ADFun&lt;double&gt;&#xA0;f(U,&#xA0;Z);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;double&gt;&#xA0;v(&#xA0;f.Domain()&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;double&gt;&#xA0;w(&#xA0;f.Range()&#xA0;);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;check&#xA0;values<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(&#xA0;Z[x]&#xA0;==&#xA0;-4.&#xA0;);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;forward&#xA0;computation&#xA0;of&#xA0;partials&#xA0;w.r.t.&#xA0;s<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;v[s]&#xA0;=&#xA0;1.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;v[t]&#xA0;=&#xA0;0.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;w&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;f.Forward(1,&#xA0;v);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(&#xA0;w[x]&#xA0;==&#xA0;0.&#xA0;);&#xA0;&#xA0;&#xA0;//&#xA0;dx/ds<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;forward&#xA0;computation&#xA0;of&#xA0;partials&#xA0;w.r.t.&#xA0;t<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;v[s]&#xA0;=&#xA0;0.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;v[t]&#xA0;=&#xA0;1.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;w&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;f.Forward(1,&#xA0;v);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(&#xA0;w[x]&#xA0;==&#xA0;-1.&#xA0;);&#xA0;&#xA0;&#xA0;//&#xA0;dx/dt<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;reverse&#xA0;computation&#xA0;of&#xA0;second&#xA0;partials&#xA0;of&#xA0;z<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;double&gt;&#xA0;r(&#xA0;f.Domain()&#xA0;*&#xA0;2&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;w[x]&#xA0;=&#xA0;1.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;r&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;f.Reverse(2,&#xA0;w);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(&#xA0;r[2&#xA0;*&#xA0;s&#xA0;+&#xA0;1]&#xA0;==&#xA0;0.&#xA0;);&#xA0;&#xA0;//&#xA0;d^2&#xA0;x&#xA0;/&#xA0;(ds&#xA0;ds)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(&#xA0;r[2&#xA0;*&#xA0;t&#xA0;+&#xA0;1]&#xA0;==&#xA0;0.&#xA0;);&#xA0;&#xA0;//&#xA0;d^2&#xA0;x&#xA0;/&#xA0;(ds&#xA0;dt)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;ok;<br/>
}<br/>
</span></font></code>
<hr/>Input File: Example\Neg.cpp

</body>
</html>
