/* --------------------------------------------------------------------------
CppAD: C++ Algorithmic Differentiation: Copyright (C) 2003-22 Bradley M. Bell

  CppAD is distributed under the terms of the
               Eclipse Public License Version 2.0.

  This Source Code may also be made available under the following
  Secondary License when the conditions for such availability set forth
  in the Eclipse Public License, Version 2.0 are satisfied:
        GNU General Public License, Version 2.0 or later.
-------------------------------------------------------------------------- */

$begin whats_new_22$$
$spell
    CppAD
    op
    neg
    mul
    div
    iterator
    iterators
    cppad_lib
    hpp
    rc
    json
    cmake
    nx
$$

$section Changes and Additions to CppAD During 2022$$

$head 04-15$$
$list number$$
Add $cref atomic_four_lin_ode$$ an example of making the solution
of an ODE an atomic operation.
As with the other atomic four examples, the $codei%AD<%Base%>%$$
version of the derivative calculations a done using atomic operations.
$lnext
Add the $cref/equality/sparse_rc/other/Equality/$$ operator
to the sparsity pattern template class.
$lend

$head 03-29$$
Add the $cref atomic_four_lin_ode$$ example
which is not yet complete.

$head 03-26$$
Change $code y(nx)$$ to $code y(ny)$$ in
$cref  atomic_four_mat_mul_forward.cpp$$.

$head 03-25$$
$list number$$
Fix $cref atomic_four_mat_mul$$ by changing it's base class
from $code atomic_four<double>$$ to $codei%atomic_four<%Base%>%$$;
see $cref atomic_four_mat_mul.hpp$$.
$lnext
Remove under construction warning from $cref atomic_four_mat_mul$$.
$lnext
Change $code atomic_vector$$ to $cref atomic_four_vector$$.
$lend

$head 03-24$$
Fix $cref atomic_four_vector$$ by changing it's base class
from $code atomic_four<double>$$ to $codei%atomic_four<%Base%>%$$.
Make some other similar corrections in $cref atomic_four_vector.hpp$$.

$head 03-23$$
Improve error detection and message when both
$cref/cmake_build_type/cmake/cmake_build_type/$$ and
$cref/cppad_debug_which/cmake/cppad_debug_which/$$ are chosen
during the install procedure.

$head 02-21$$
Extend the json graph representation to include
$cref/atomic four/json_graph_op/Atomic Functions/Atomic Four/$$ functions.
For example, see $cref json_atom4_op.cpp$$.

$head 02-19$$
Extend the C++ graph representation to include atomic four
$cref/atomic functions/graph_op_enum/Atomic Function/$$.
For example, see $cref graph_atom4_op.cpp$$.

$head 02-18$$
Fixed the value of $icode%after%[%i%]%$$ in the
$cref/print_graph_op/cpp_ad_graph/operator_arg/print_graph_op/$$ documentation.
To be specific, $code - 2$$ was changed to $code - 1$$.

$head 02-17$$
Add $code identical_zero$$ to the possible
$cref/ad_type/atomic_four_for_type/ad_type/$$ values in
the atomic four $code for_type$$ function.
See $cref atomic_four_vector_for_type.hpp$$,
$cref atomic_four_mat_mul_for_type.hpp$$, and
$cref atomic_four_mat_mul_identical_zero.cpp$$
for an examples using this feature.

$head 02-16$$
Use the $cref atomic_four_norm_sq.cpp$$ overrides
as examples for the virtual functions in the $cref atomic_four$$
base class.

$head 02-13$$
$list number$$
The $cref atomic_four_mat_mul$$ example class was added.
$lnext
The $cref atomic_four_vector$$ include path has changed to
$codei%
    # include <cppad/example/atomic_four/vector.hpp>
%$$
$lend

$head 02-12$$
Add the $cref/push_back/sparse_rc/push_back/$$ and
output stream (see $cref/os/sparse_rc/os/$$) operations
to the $code sparse_rc$$ template class.

$head 02-11$$
The value of $code Libs:$$ in the $code cppad.pc$$ $cref pkgconfig$$ file
was not being set correctly for some cases. This has been fixed.

$head 02-01$$
Fix a possible integer overflow in the $cref to_string.cpp$$ example
(might cause the test to fail).

$head 01-27$$
Convert $cref atomic_four_forward.cpp$$ from an atomic_three
to an atomic_four example.

$head 01-25$$
Convert $cref atomic_four_dynamic.cpp$$ from an atomic_three
to an atomic_four example.

$head 01-23$$
$list number$$
Add $cref atomic_four$$, a simpler interface to atomic functions.
This has the optional $cref/call_id/atomic_four_call/call_id/$$ argument
which can be used to attach extra information to an atomic function call.
$lnext
The $cref atomic_four_vector$$ is a good example that uses
$icode call_id$$ to specify which
element by element operator is being called; see
$cref/call_id/atomic_four_vector/op/$$.
$lnext
Remove element-by-element atomic operations from $cref wish_list$$
(completed by the atomic_vector class).
$lend


$head 01-19$$
Edit wish_list cppad_lib
$cref/requirement/wish_list/cppad_lib/Requirement/$$ item.
Add an $cref/atomic functions/wish_list/Optimization/Atomic Functions/$$
item to the optimization wish list.

$head 01-15$$
$list number$$
Fix some conversion warnings generated by the clang compiler
for the $cref atomic_four_vector$$ example.
$lnext
Correct the order of p, q in function calls in
$cref atomic_four_vector_forward_op.hpp$$.
$lend

$head 01-06$$
$list number$$
Fix the $code []$$ operator using CppAD vector
$cref/iterators/CppAD_vector/Iterators/operator[]/$$.
In addition it was extended to include $code size_t$$ indices.
$lnext
Add reverse mode to the $cref atomic_four_vector$$,  mul, div, operators
and fix some warning used $code size_t$$ iterator indices.
$lend

$head 01-04$$
$list number$$
Add the neg operator to $cref atomic_four_vector$$.
$lnext
Add reverse mode to the atomic_vector,  add, sub, and neg operators.
$lend

$head 01-01$$
The $code example/atomic_three/vector_op.cpp$$ example
(see $cref atomic_four_vector$$) was split into multiple files and moved into the
$code example/atomic_vector$$ directory.

$end
