/* --------------------------------------------------------------------------
CppAD: C++ Algorithmic Differentiation: Copyright (C) 2003-19 Bradley M. Bell

  CppAD is distributed under the terms of the
               Eclipse Public License Version 2.0.

  This Source Code may also be made available under the following
  Secondary License when the conditions for such availability set forth
  in the Eclipse Public License, Version 2.0 are satisfied:
        GNU General Public License, Version 2.0 or later.
-------------------------------------------------------------------------- */

$begin whats_new_19$$
$spell
    CppAD
    LeppOp
    dag
    mul
    jac
    hes
    chkpoint
    var
    subgraph
    Jacobians
    jacobian
    cmake
    bthread
    colpack
    subgraphs
    bool
    Json
    cppad
    vec
$$

$section Changes and Additions to CppAD During 2019$$

$head 07-05$$
$list number$$
The $cref/n_usage/json_ad_graph/op_usage_vec/n_usage/$$ value generated by
$cref to_json$$ was not correct. This has been fixed.
$lnext
All the possible operators were included in the
$cref/op_define_vec/json_ad_graph/op_define_vec/$$ section generated by
$code to_json$$.
Now only operators that are used are included.
This makes it easier for humans to understand simple example graphs.
$lend

$head 07-04$$
$list number$$
Improve the $cref from_json$$ error messages by including the
previous two lines of Json in error message.
$lnext
Working on a $cref to_json$$ example that outputs graph
for the derivative of a function.
$lend

$head 07-03$$
The format of a Json computational graph was changed to include
a section at the top that defines the mapping
between integer codes in the graph and corresponding operators,
see the heading $cref/op_define_vec/json_ad_graph/op_define_vec/$$.
This is now separate from
$cref/op_usage_vec/json_ad_graph/op_usage_vec/$$ which is the part
of the graph that is expect to be very large and is now less verbose.

$head 06-29$$
It used to be the case that optimized functions with cumulative
summation operators could not be optimized.
This has been fixed and it is now acceptable to
$cref/re-optimize/optimize/Re-Optimize/$$ an $code ADFun$$ object.

$head 06-19$$
$list number$$
Some work was done to improve the speed of sparsity calculations
when using the internal representation for a
$cref/boolean vector/glossary/Sparsity Pattern/Boolean Vector/$$.
$lnext
An extra pair of braces was expected in each
$cref/op_usage/json_ad_graph/op_usage/$$ of an $cref json_ad_graph$$.
This has been fixed.
$lend


$head 06-18$$
There are some problems using as Windows DLL for the $code cppad_lib$$
library. These problems have been circumvented (for the time being) by using
as static library for Windows systems.

$head 06-17$$
A new feature that constructs a $code ADFun$$ object
from a Json representation of a computational graph was added; see
$cref json_ad_graph$$ and $cref from_json$$.
This requires linking the $code cppad_lib$$ library.
It is a Minimal Viable Product and is intended for testing.
As of yet, only has the addition and multiplication operators are
implemented.

$head 06-10$$
Some work was done to improve the speed of sparsity calculations
when using the internal representation for a
$cref/vector of sets/glossary/Sparsity Pattern/Vector of Sets/$$.
This also reduced the time required by the
$cref optimize$$ operation for some cases.

$head 06-02$$
The version number in the title of the top level for the
$cref CppAD$$ documentation was not being updated.
This started on $code 20190521$$ and has been fixed.

$head 05-31$$
Add the $cref/swap/CppAD_vector/$$ operation to the
$code CppAD::vector$$ template class and
$cref/vectorBool/CppAD_vector/vectorBool/$$ class.
In addition, change $cref cppad_vector.cpp$$ example
so it focuses on operations that are not in
$cref SimpleVector$$.

$head 05-28$$
There was a bug in optimizing conditional expressions; i.e.,
optimizing without the option
$cref/no_conditional_skip/optimize/options/no_conditional_skip/$$.
This was a rare case that involving sets of conditional expressions
and conditionally skipping a specific operator.
The bug was reproduced in a regression test and is fixed.

$head 05-22$$
$list number$$
Some speed improvements were made to the
$cref for_hes_sparsity$$ algorithm.
To be specific the forward Jacobian and Hessian patterns
are computed during the same pass and using the same structure.
This avoids an extra pass on the operation sequence.
In addition, when $cref/internal_bool/for_hes_sparsity/internal_bool/$$
is false, it enables smart points to the forward Jacobian and Hessian
to share the same underlying sets of integers (when they are equal).
$lnext
Some minor improvements and updating was done for the
$cref directory$$ and $cref glossary$$ sections.
$lend

$head 05-21$$
Simplify the example computation of Hessian using subgraphs
$cref subgraph_hes2jac.cpp$$.
This simplification was a change from using
$cref/multiple levels of AD/mul_level/$$ to using $cref base2ad$$.

$head 05-07$$
There was a bug in the checking for correctness of the
$cref adolc_sparse_hessian.cpp$$ results.
This was due to the fact that the sparsity patterns for ADOL-C
may have more entires that CppAD knows are zero.

$head 04-01$$
Add the optional
$cref/repeat_out/time_test/repeat_out/$$ argument to the
$code time_test$$ function.

$head 03-27$$
Improve the speed of sparse Hessian calculations that
$cref/colpack.symmetric/sparse_hes/coloring/colpack.symmetric/$$
coloring method by directly accessing the coloring determined by Colpack.

$head 03-19$$
There was a bug in $cref/f.Reverse(q, w)/reverse_any/$$ when $icode f$$
contained the  $cref/pow(x,y)/pow/$$ function and $icode%x% == 0%$$.
To be specific, it was not reporting zero instead of $code nan$$
for the derivative. This has been partially, but not completely fixed.
See the $cref/reverse mode/wish_list/Reverse Mode/$$ in the wish list.

$head 03-13$$
Fix a bug in $cref/f.subgraph_jac_rev(x, subset)/subgraph_jac_rev/$$.
This bug appeared in a test that only returned the upper triangle
of a symmetric matrix (the lower triangle worked).

$head 02-26$$
There was a problem linking the boost multi-threading library
on some systems that caused the corresponding check to be skipped.
This has been fixed. To be specific,
$codep
     make check_example_multi_thread_bthread: available
$$
was not in the $cref/cmake command/cmake/CMake Command/$$ output.
This has been fixed.


$head 02-23$$
The return value $icode n_sweep$$ was changed to
$cref/n_color/sparse_jac/n_color/$$ because it is not the number
of sweeps when $cref/group_max/sparse_jac/group_max/$$ is not equal to one.
This change was also made for the
$cref/speed tests/speed_main/Speed Results/n_color/$$.

$head 02-22$$
Add row major order specifications to the speed test routines
$cref/link_sparse_jacobian/link_sparse_jacobian/Row Major/$$ and
$cref/link_sparse_hessian/link_sparse_hessian/Row Major/$$.
This reduced the overhead (increased the speed) for the
$cref adolc_sparse_jacobian.cpp$$ and
$cref adolc_sparse_hessian.cpp$$ test cases.

$head 02-20$$
$list number$$
Fix bug below in the new release
$href%https://github.com/coin-or/CppAD/archive/20190200.1.tar.gz%
20190200.1%$$.
$lnext
There was a problem locating the boost multi-threading library.
To be specific, the
$cref/cmake command/cmake/CMake Command/$$ would report
$codei%
    Could not find boost multi-threading library
%$$
but it would still try to use the library.
This was because a file name with a $code -$$ in it was
also being used for a cmake variable name.
This has been fixed.
$lend

$head 02-06$$
Improve the discussion of the purpose of for the different
$cref/subgraph/subgraph_jac_rev/Purpose/$$ options which computing
sparse Jacobians.

$head 02-01$$
$list number$$
A stable release for 2019 is now available on the
$href%https://github.com/coin-or/CppAD/releases%release%$$ page.
$lnext
The $cref download$$ page was edited to include better discussion
of the license and documentation.
$lend


$head 01-18$$
The documentation for $cref atomic_three$$,
and its subsections, was improved.

$head 01-17$$
The arguments
$cref/parameter_x/atomic_three/parameter_x/$$ and
$cref/type_x/atomic_three/type_x/$$ were included
for all the $code atomic_three$$ virtual functions.

$head 01-16$$
More improvements, and bug fixes, in the optimization of $cref atomic$$
operations.
This results in a reduction in the number of parameters
$cref/size_par/seq_property/size_par/$$
and the number of variables
$cref/size_var/seq_property/size_var/$$.

$head 01-15$$
Fix a bug in the optimization of $cref atomic_three$$
operations with $cref/dynamic/Independent/dynamic/$$ parameters.

$head 01-14$$
$list number$$
The $cref/rev_depend/atomic_three_rev_depend/$$ call back function
was added to $code atomic_three$$ class.
This enables one to $cref optimize$$ functions that use
$code atomic_three$$ operations; see
the $cref/rev_depend.cpp/atomic_three_rev_depend.cpp/$$ example.
$lnext
The ability to $cref optimize$$ functions was extended to
$cref chkpoint_two$$ operations; e.g., a call to optimize was added
at the end of the
$cref/get_started.cpp/chkpoint_two_get_started.cpp/$$ example.
$lnext
The $cref chkpoint_one$$ class was deprecated,
use $cref chkpoint_two$$ instead.
$lend

$head 01-06$$
One of the two atomic matrix multiply examples was converted
from using $cref atomic_two$$ to $cref atomic_three_mat_mul.cpp$$.
This conversion made it clear that the $icode type_x$$ argument
needed to be included in the
$cref/jac_sparsity/atomic_three_jac_sparsity/type_x/$$ and
$cref/hes_sparsity/atomic_three_hes_sparsity/type_x/$$ functions.

$head 01-05$$
Merge in the $code atomic branch$$.
This completed $cref wish_list$$ item for the new atomic function API;
see $cref atomic_three$$.
This is an improvement over the $cref atomic_two$$ interface,
which used the $code atomic_base$$ class and has been deprecated.
In addition the following changes were included:
$list number$$
Move the checkpoint examples below the
$cref/checkpoint/chkpoint_one/$$ documentation.
$lnext
A phantom parameter, at index zero, was added; see
$cref/size_par/seq_property/size_par/$$.
$lnext
There appears to have been a bug in $code put_con_par$$ (not tested for)
whereby a constant parameter might match a dynamic parameter
(and get changed). This has been fixed.
$lnext
There was a mistake in the $code check_variable_dag$$ routine whereby
the operator $code LeppOp$$ checked a parameter index as if it were
a variable index. This has been fixed.
$lend

$head 01-11$$
Merge in the $code chkpoint$$ branch.
$list number$$
This created the $cref chkpoint_two$$ class as a replacement
for the $cref chkpoint_one$$ class.
This new checkpoint class takes advantage
of $cref/dynamic parameters/glossary/Parameter/Dynamic/$$
and can be used with $cref base2ad$$.
$lnext
While creating the $code chkpoint_two$$ class,
a problem was discovered in the $cref atomic_three$$ class.
To be specific, it does not yet work with $cref optimize$$.
A reverse dependency analysis is the proper way to fix this.
The $code atomic_three$$ $code type$$ member function does a forward
$cref/dependency analysis/atomic_three_for_type/Dependency Analysis/$$
and so its name was changed from $code type$$ to $code for_type$$.
$lend

$end
