/*
$begin CompareChange$$
$spell 
	const
$$

$section Comparison Changes During ADFun Function Evaluation$$

$index ADFun, CompareChange$$
$index CompareChange, ADFun$$

$table
$bold Syntax$$ $cnext
$syntax%%c% = %f%.CompareChange()%$$
$tend

$fend 20$$

$head Purpose$$
An $syntax%ADFun<%Base%>%$$ object contains an
$syntax%AD<%Base%>%$$ 
$xref/AD/AD Operation Sequence/operation sequence/$$.
This operation sequence represents a function
$latex \[
	F : B^n \rightarrow B^m
\] $$
where $latex B$$ is the space corresponding to objects of type $italic Base$$.
The ADFun object can be used to evaluate the function
and its derivatives of arbitrary order.

$head f$$
The object $italic f$$ has prototype
$syntax%
	const ADFun<%Base%> %f%
%$$

$head c$$
The result $italic c$$ has prototype
$syntax%
	size_t %c%
%$$
It is the number of 
$syntax%AD<%Base%>%$$ $xref/Compare//comparison/$$ 
operations,
corresponding to the previous call to $xref/Forward/$$ 
$syntax%
	%F%.Forward(0, %x%)
%$$
that have a different result from
when $italic F$$ was created by taping an algorithm.

$head Discussion$$
If $italic c$$ is not zero, 
the boolean values that resulting from some of the 
$xref/Compare//comparison operations/$$
in the algorithm are different from when the 
$xref/AD/AD Operation Sequence/AD operation sequence/$$ was created.
In this case, you may want to record the algorithm with the
$xref/glossary/Independent Variable/independent variables/$$ 
equal to the values in $italic x$$ in the call to $code Forward$$
(so that the AD operation sequence properly represents the function
corresponding to the algorithm).
On the other hand, taping the AD operation sequence usually takes significantly
more time than evaluation using the ADFun object.
In many cases, one knows that even though the comparison operations
may have changed, this does not significantly change the resulting function
and it is not worth recording a new AD operation sequence. 


$head Restrictions$$
$index NDEBUG, CompareChange$$
Computation of this function requires extra operations in the tape.
If $code NDEBUG$$ is defined,
these operations are not included in the tape and

$head Example$$
$children%
	Example/CompareChange.cpp
%$$
The file
$xref/CompareChange.cpp/$$
contains an example and test of this operation.
They return true if they succeed and false otherwise.

$end
