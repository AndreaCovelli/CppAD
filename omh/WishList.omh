$begin WishList$$
$spell
	Jacobian
	Vec
	Cpp
	Atan
$$

$section The CppAD Wish List$$
$index wish list$$
$index new, features$$
$index features, new$$

$head Sparsity Structure$$
Some users have requested that CppAD be able to compute the sparsity 
structure for a function for the Jacobian of a vector valued function
and for the Hessian of a scalar valued function.

$head VecAD$$
Returning a void from $xref/VecAD/$$ assignment
made it more efficient.
There are still some problems with it because elements 
uses pointers back to the original vector and optimizing
compilers can reorder operations so that the vector
is destroyed before the pointer is used.
One way to fix this is to change the syntax for $code VecAD$$ operations
to use
$syntax%
	%X%.set(%index%, %value%)
%$$
for assignment operations.
One could still use
$syntax%
	%X%[%index%]%
%$$
for accessing operations but perhaps it would be better to use
$syntax%
	%X%.get(%index%)
%$$
to emphasize the fact that you can not assign an element using
$syntax%
	%X%[%index%]% = %y%
%$$


$head Multiple Tapes With Same Base Type$$
$index multiple, tape$$
$index tape, multiple$$
Some users have expressed an interest in having multiple tapes,
with the same base type,
recording at the same time. 
The idea is something like this:
$codep
	Independent(x);    // perhaps in thread 1
	Independent(y);    // perhaps in thread 2
	z = x * x;         // operation on tape corresponding to x
	w = y * y;         // operation on tape corresponding to y
	a = w * z;         // would generate an error because cannot mix tapes
$$
One application of this is where each of the tapes is on a different
processor in a shared memory multiple processor application.


$head Integer Function$$
$index int, of CppAD<Base>$$
It would be useful for $code AD$$ types to have a function that behaves 
like the coercion from $code double$$ to $code int$$.
This function would have a derivative that is identically zero; i.e.,
the resulting integer value would be fixed and not change with the
$code AD$$ argument.

$head Atan2$$
$index atan2$$
The $xref/Atan2//atan2/$$ function could be made faster by adding
a special operator for it.

$end
