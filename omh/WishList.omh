$begin WishList$$
$spell
	CondExp
	Jacobian
	Vec
	Cpp
	Atan
	CppADlib
$$

$section The CppAD Wish List$$
$index wish list$$
$index new, features$$
$index features, new$$

$head Object Library$$
Most of CppAD is an include file library,
only the routines 
$xref/SpeedTest/$$,
$xref/NearEqual/$$,
and
$xref/erf/$$
are in the object library $code CppADlib.a$$.
If we convert these routines to include file libraries,
it will make the $xref/Install/$$ simpler and avoid the issue of 
compiling the object library both for optimization and debugging; see
$href%
	http://list.coin-or.org/pipermail/cppad/2005-November/000012.html
%$$


$head CondExp$$
Extend the conditional expressions $xref/CondExp/$$ so that they are 
valid for complex types by comparing real parts.
In addition, use this change to extend $xref/LuRatio/$$ so 
that it works with complex AD types.

$head Error Recovery$$
There is a problem with redefining the CppAD error in
$xref/CppADError/$$.
If one uses two different definitions of the macros,
some of the class objects in CppAD would depend on the definition
and only one version of the definition would be linked.
It would be nice to add default routine for handling errors
that the could be switched dynamically during program execution.

$head Multiple Tapes With Same Base Type$$
$index multiple, tape$$
$index tape, multiple$$
Some users have expressed an interest in having multiple tapes,
with the same base type,
recording at the same time. 
The idea is something like this:
$codep
	Independent(x);    // perhaps in thread 1
	Independent(y);    // perhaps in thread 2
	z = x * x;         // operation on tape corresponding to x
	w = y * y;         // operation on tape corresponding to y
	a = w * z;         // would generate an error because cannot mix tapes
$$
One application of this is where each of the tapes is on a different
processor in a shared memory multiple processor application.


$head Integer Function$$
$index int, of CppAD<Base>$$
It would be useful for $code AD$$ types to have a function that behaves 
like the coercion from $code double$$ to $code int$$.
This function would have a derivative that is identically zero; i.e.,
the resulting integer value would be fixed and not change with the
$code AD$$ argument.

$head Atan2$$
$index atan2$$
The $xref/Atan2//atan2/$$ function could be made faster by adding
a special operator for it.

$end
