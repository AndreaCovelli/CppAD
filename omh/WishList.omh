$begin WishList$$
$spell
	Taylor
	Vec
	Cpp
	Atan
$$

$section The CppAD Wish List$$
$index wish list$$
$index new, features$$
$index features, new$$

$head Use Less Memory$$
The $code Partial$$ array, which is used for reverse mode calculations,
does not retain information between calls to $xref/Reverse/$$.
It should be deleted between calls instead of retained for repeated use.
$pre

$$
The $code Taylor$$ array, which is used for forward mode calculations,
does retain information between calls to $xref/Forward/$$ and 
is used also used by $xref/Reverse/$$.
There should be an option to completely remove its memory
when the user chooses to do so.


$head VecAD$$
The $code VecAD$$ vector type is currently 
$xref/VecAD/Inefficient/inefficient/$$ because they require
a lot of conversion from a $code VecAD$$ element to a normal
CppAD variable.
This could be avoided if the $syntax%CppAD<%Base%>%$$ type
were changed so as to distinguish between tape indices
and $code VecAD$$ variable indices.
A similar distinction could also be used to identify
parameter indices and only one tape copy of a parameter
would be necessary for each CppAD parameter object
(currently a separate copy is constructed for each use).
 


$head Concept Checking$$
$index concept, checking$$
$index checking, concept$$
Some 
$href%
	http://www.boost.org/libs/concept_check/concept_check.htm%
	concept checking
%$$
was added in the $xref/WhatsNew05/07-04/07-04/$$ release.
More of this should be done.

$head Multiple Tapes With Same Base Type$$
$index multiple, tape$$
$index tape, multiple$$
Some users have expressed an interest in having multiple tapes,
with the same base type,
recording at the same time. 
The idea is something like this:
$codep
	Independent(x);    // perhaps in thread 1
	Independent(y);    // perhaps in thread 2
	z = x * x;         // operation on tape corresponding to x
	w = y * y;         // operation on tape corresponding to y
	a = w * z;         // would generate an error because cannot mix tapes
$$
One application of this is where each of the tapes is on a different
processor in a shared memory multiple processor application.


$head Integer Function$$
$index int, of CppAD<Base>$$
It would be useful for $code AD$$ types to have a function that behaves 
like the coercion from $code double$$ to $code int$$.
This function would have a derivative that is identically zero; i.e.,
the resulting integer value would be fixed and not change with the
$code AD$$ argument.

$head Atan2$$
$index atan2$$
The $xref/Atan2//atan2/$$ function could be made faster by adding
a special operator for it.

$end
