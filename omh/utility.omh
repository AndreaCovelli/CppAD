$Id$
/* --------------------------------------------------------------------------
CppAD: C++ Algorithmic Differentiation: Copyright (C) 2003-15 Bradley M. Bell

CppAD is distributed under multiple licenses. This distribution is under
the terms of the
                    Eclipse Public License Version 1.0.

A copy of this license is included in the COPYING file of this distribution.
Please visit http://www.coin-or.org/CppAD/ for information on other licenses.
-------------------------------------------------------------------------- */

$begin utility$$
$spell
	CppAD
	namespace
	alloc
$$


$section Some General Purpose Utilities$$

$children%
	cppad/utility/error_handler.hpp%

	cppad/utility/near_equal.hpp%
	cppad/utility/speed_test.hpp%
	cppad/utility/time_test.hpp%

	omh/numeric_type.omh%
	cppad/utility/check_numeric_type.hpp%
	omh/simple_vector.omh%
	cppad/utility/check_simple_vector.hpp%

	cppad/utility/nan.hpp%
	cppad/utility/pow_int.hpp%
	cppad/utility/poly.hpp%
	omh/lu_det_and_solve.omh%
	cppad/utility/romberg_one.hpp%
	cppad/utility/romberg_mul.hpp%
	cppad/utility/runge_45.hpp%
	cppad/utility/rosen_34.hpp%
	cppad/utility/ode_err_control.hpp%
	cppad/utility/ode_gear.hpp%
	cppad/utility/ode_gear_control.hpp%

	cppad/utility/vector.hpp%
	omh/thread_alloc.omh%
	cppad/utility/index_sort.hpp%

	cppad/local/bender_quad.hpp%
	cppad/local/opt_val_hes.hpp%
	cppad/local/lu_ratio.hpp
%$$

$head Testing$$
The routines listed below support numerical correctness and speed testing:
$table
$rref NearEqual$$
$rref time_test$$
$rref speed_test$$
$rref SpeedTest$$
$tend

$head C++ Concepts$$
We refer to a the set of classes that satisfy certain conditions
as a C++ concept.
The following concepts are used by the CppAD Template library:
$table
$rref NumericType$$
$rref CheckNumericType$$
$rref SimpleVector$$
$rref CheckSimpleVector$$
$tend


$head General Numerical Routines$$
The routines listed below are general purpose numerical routines
written with the floating point type a C++ template parameter.
This enables them to be used with algorithmic differentiation types,
as well as for other purposes.
$table
$rref nan$$
$rref pow_int$$
$rref Poly$$
$rref LuDetAndSolve$$
$rref RombergOne$$
$rref RombergMul$$
$rref Runge45$$
$rref Rosen34$$
$rref OdeErrControl$$
$rref OdeGear$$
$rref OdeGearControl$$
$tend

$head CppAD Numerical$$
The routines listed below are numerical routines that are specially
designed to work with CppAD in particular.
$table
$rref BenderQuad$$
$rref opt_val_hes$$
$rref LuRatio$$
$tend

$head Miscellaneous$$

$subhead Error Handler$$
All of the routines in the CppAD namespace use the following
general purpose error handler:
$table
$rref ErrorHandler$$
$tend

$subhead CppAD::vector$$
A simple implementation of a template vector class
(that is easy to view in a C++ debugger):
$table
$rref CppAD_vector$$
$tend

$subhead thread_alloc$$
$table
$rref thread_alloc$$
$tend

$subhead index_sort$$
$table
$rref index_sort$$
$tend

$end
