/* $Id$ */
/* --------------------------------------------------------------------------
CppAD: C++ Algorithmic Differentiation: Copyright (C) 2003-14 Bradley M. Bell

CppAD is distributed under multiple licenses. This distribution is under
the terms of the 
                    Eclipse Public License Version 1.0.

A copy of this license is included in the COPYING file of this distribution.
Please visit http://www.coin-or.org/CppAD/ for information on other licenses.
-------------------------------------------------------------------------- */
$begin forward_any$$
$spell
	std::cout
	ostream
	xk
	xp
	yp
	Ind
	vp
	uj
	Taylor
	const
	dy
$$

$section Any Order Forward Mode$$ 

$index forward, mode$$
$index mode, forward$$
$index derivative, forward mode$$
$index calculate, forward mode$$

$head Syntax$$
$icode%y_q% = %f%.Forward(%q%, %x_q% )
%$$
$icode%y_q% = %f%.Forward(%q%, %x_q%, %s%)
%$$


$head Purpose$$
We use $latex F : B^n \rightarrow B^m$$ to denote the
$cref/AD function/glossary/AD Function/$$ corresponding to $icode f$$.
Given a function $latex X : B \rightarrow B^n$$,
defined by its 
$cref/Taylor coefficients/glossary/Taylor Coefficient/$$,
forward mode computes the Taylor coefficients for the function 
$latex \[
	Y (t) = F [ X(t) ]
\]$$

$subhead Function Values$$
If you are using forward mode to compute values for $latex F(x)$$,
$cref forward_zero$$ is simpler to understand
than this explanation of the general case.

$subhead Derivative Values$$
If you are using forward mode to compute values for $latex F^{(1)} (x) * dx$$,
$cref forward_one$$ is simpler to understand
than this explanation of the general case.

$head X(t)$$
The function
$latex X : B \rightarrow B^n$$ is defined using
a sequence of Taylor coefficients $latex x^{(k)} \in B^n$$:
$latex \[
	X(t) = x^{(0)} + x^{(1)} * t + \cdots + x^{(q)} * t^q 
\] $$ 
For $latex k = 0, \ldots , q$$,
the vector $latex x^{(k)}$$ above is defined as the value of 
$icode x_k$$ in the previous call (counting this call) of the form
$codei%
	%f%.Forward(%k%, %x_k%)
%$$ 
If there is no previous call with $latex k = 0$$,
$latex x^{(0)}$$ is the value of the independent variables when the 
corresponding 
AD of $icode Base$$
$cref/operation sequence/glossary/Operation/Sequence/$$ was recorded.
Note that 
$latex x^{(k)}$$ is related to the $th k$$ derivative of $latex X(t)$$ by
$latex \[
	x^{(k)} = \frac{1}{k !} X^{(k)} (0) 
\] $$

$head Y(t)$$
The function
$latex Y : B \rightarrow B^m$$ is defined by
$latex Y(t) = F[ X(t) ] $$.
We use $latex y^{(k)} \in B^m$$ 
to denote the $th k$$ order Taylor coefficient of $latex Y(t)$$; i.e.,
$latex \[
	Y(t) = y^{(0)} + y^{(1)} * t + \cdots, + y^{(q)} * t^q + o( t^q ) 
\] $$ 
where $latex o( t^q ) * t^{-q} \rightarrow 0$$ 
as $latex t \rightarrow 0$$.
Note that $latex y^{(k)}$$ is related to 
the $th k$$ derivative of $latex Y(t)$$ by
$latex \[
	y^{(k)} = \frac{1}{k !} Y^{(k)} (0) 
\] $$


$head f$$
The $cref ADFun$$ object $icode f$$ has prototype
$codei%
	ADFun<%Base%> %f%
%$$
Note that the $cref ADFun$$ object $icode f$$ is not $code const$$.
Before this call to $code Forward$$, the value returned by
$codei%
	%f%.size_taylor()
%$$
must be greater than or equal $latex q$$.
After this call it will be will be $latex q+1$$ (see $cref size_taylor$$).

$head q$$
The argument $icode q$$ has prototype
$codei%
	size_t %q%
%$$
and specifies the order of the Taylor coefficients to be calculated.

$head x_q$$
The argument $icode x_q$$ has prototype
$codei%
	const %Vector%& %x_q%
%$$
(see $cref/Vector/forward_any/Vector/$$ below).
As above, we use $icode n$$ to denote the dimension of the
$cref/domain/seq_property/Domain/$$ space for $icode f$$.
The size of $icode x_q$$ must be either $icode n$$ or 
$icode%n%*(%q%+1)%$$.

$subhead Restrictions$$
Note if $icode f$$ uses $cref old_atomic$$ functions,
the size of $icode x_q$$ must be $icode n$$.

$subhead One Order$$
If $icode%x_q%.size() == %n%$$,
The $th q$$ order Taylor coefficient for $latex X(t)$$ 
is defined by this value; i.e., $latex x^{(q)} = x\_p$$.
For $latex k = 0 , \ldots , q-1$$,
the $th k$$ order Taylor coefficient $latex x^{(k)}$$ 
is defined by $icode x_k$$ in the previous call to
$codei%
	%f%.Forward(%k%, %x_k%)
%$$

$subhead Multiple Orders$$
If $icode%x_q%.size() == %n%*(%q%+1)%$$,
For $latex k = 0 , \ldots , q$$,
for $latex j = 0 , \ldots , n$$,
the $th j$$ component of the $th k$$ order Taylor coefficient 
$latex x_j^{(k)}$$ 
is defined by $icode x_j^k$$ were
$codei%
	%x_j^k% = %x_q%[ %j% * %q% + %k% ]
%$$

$head s$$
If the argument $icode s$$ is not present, $code std::cout$$
is used in its place.
Otherwise, this argument has prototype
$codei%
	std::ostream& %s%
%$$
If $icode%q% == 0%$$,
$icode s$$ specifies where the output corresponding to $cref PrintFor$$
will be written.
If $icode%q% != 0%$$, $icode s$$ is not used.

$head y_q$$
The return value $icode y_q$$ has prototype
$codei%
	%Vector% %y_q%
%$$
(see $cref/Vector/forward_any/Vector/$$ below).
As above, we use $icode m$$ to denote the dimension of the
$cref/range/seq_property/Range/$$ space for $icode f$$.

$subhead One Order$$
If $icode%x_q%.size() == %n%$$,
the vector $icode y_q$$ has size $icode m$$.
The $th q$$ order Taylor coefficient for $latex Y(t)$$ 
is defined by this value; i.e., $latex y^{(q)} = y\_p$$.

$subhead Multiple Orders$$
If $icode%x_q%.size() == %n%*(%q%+1)%$$,
the vector $icode y_q$$ has size $icode%m%*(%q%+1)%$$.
For $latex k = 0 , \ldots , q$$,
for $latex i = 0 , \ldots , m$$,
the $th i$$ component of the $th k$$ order Taylor coefficient 
$latex y_i^{(k)}$$ 
is defined by $icode y_i^k$$ were
$codei%
	%y_i^k% = %y_q%[ %i% * %q% + %k% ]
%$$

$head Vector$$
The type $icode Vector$$ must be a $cref SimpleVector$$ class with
$cref/elements of type/SimpleVector/Elements of Specified Type/$$
$icode Base$$.
The routine $cref CheckSimpleVector$$ will generate an error message
if this is not the case.

$head Zero Order$$
In the case where $latex q = 0$$ and $icode%x_q%.size() == %n%$$,
the result $icode y_q$$ is given by
$latex \[
\begin{array}{rcl}
y^{(0)} & = & (F \circ X) ( 0 ) \\
	& = & F[ x^{(0)} ]
\end{array}
\] $$
The agrees with the simplification where
$latex q$$, 
$latex x^{(0)}$$, and 
$latex y^{(0)}$$ above are replaced by
$code 0$$, 
$icode x$$, and 
$icode y$$ 
in $cref forward_zero$$.

$head First Order$$
In the case where $latex q = 1$$ and $icode%x_q%.size() == %n%$$,
the result $icode y_q$$ is given by
$latex \[
\begin{array}{rcl}
y^{(1)} & = & (F \circ X)^{(1)} ( 0 ) \\
	& = & F^{(1)} [ X(0) ] *  X^{(1)} (0) \\
	& = & F^{(1)} ( x^{(0)} ) *  x^{(1)}
\end{array}
\] $$
The agrees with the simplification where 
$latex q$$, 
$latex x^{(0)}$$, 
$latex x^{(1)}$$, and 
$latex y^{(1)}$$ above are replaced by
$code 1$$, 
$icode x$$, 
$icode dx$$, and 
$icode dy$$ 
in $cref forward_one$$.
$pre

$$
Note that if $latex x^{(1)}$$ is the $th j$$ 
$cref/elementary vector/glossary/Elementary Vector/$$
$latex \[
y^{(1)} = \D{F}{x_j} ( x^{(0)} ) 
\] $$

$head Second Order$$
In the case where $latex q = 2$$ and $icode%x_q%.size() == %n%$$,
the $th i$$ element of 
the result $icode y_q$$ is given by
$latex \[
\begin{array}{rcl}
y_i^{(2)} 
& = & \frac{1}{2} (F_i \circ X)^{(2)} ( 0 ) 
\\
& = & \frac{1}{2} \left[ F_i^{(1)} [ X(0) ] * X^{(2)} (0) 
  + X^{(1)} (0)^T * F_i^{(2)} [ X(0) ] * X^{(1)} (0) \right]
\\
& = & \frac{1}{2}  \left[
	2 * F_i^{(1)} ( x^{(0)} ) * x^{(2)}
	+
	( x^{(1)} )^T * F_i^{(2)} ( x^{(0)} ) * x^{(1)}
\right  ]
\end{array}
\] $$
Note that if $latex x^{(1)}$$ is the $th j$$ 
$cref/elementary vector/glossary/Elementary Vector/$$
and $latex x^{(2)}$$ is zero,
$latex \[
\begin{array}{rcl}
	\DD{F_i}{x_j}{x_j} ( x^{(0)} ) = 2 y_i^{(2)} 
\end{array}
\] $$
If $latex x^{(1)}$$ is the sum of the $th j$$ and $th l$$ 
$cref/elementary vectors/glossary/Elementary Vector/$$
and $latex x^{(2)}$$ is zero,
$latex \[
\begin{array}{rcl}
	y_i^{(2)} 
	& = & \frac{1}{2} \left[
		\DD{F_i}{x_j}{x_j} ( x^{(0)} )
		+
		\DD{F_i}{x_j}{x_\ell} ( x^{(0)} )
		+
		\DD{F_i}{x_\ell}{x_j} ( x^{(0)} )
		+
		\DD{F_i}{x_\ell}{x_\ell} ( x^{(0)} )
	\right]
	\\
	\DD{F_i}{x_\ell}{x_j} ( x^{(0)} )
	& = & 
	y_i^{(2)} 
	-
	\frac{1}{2} \DD{F_i}{x_j}{x_j} ( x^{(0)} )
	-
	\frac{1}{2} \DD{F_i}{x_\ell}{x_\ell} ( x^{(0)} )
\end{array} 
\] $$

$head Example$$
The file
$cref forward.cpp$$ ( $cref forward_mul.cpp$$ )
contains an example and test using one order (multiple orders).
They return true if they succeed and false otherwise.

$end
