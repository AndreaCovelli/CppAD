<html><head>
<title>Macros Used by CppAD Implementation</title>
<meta name="description" content="Macros Used by CppAD Implementation">
<meta name="keywords" content=" macro definition cppadnull cppadstandardmathfun cppadstandardmathbinaryfun cppadfoldbinaryoperator "><style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
</head>
<body>
<div align='right'><a href="newfeature.htm" target="_top">previous</a>
&nbsp;&nbsp;<a href="greaterthanzero.htm" target="_top">next</a>
&nbsp;&nbsp;<a href="_contents.htm" target="_top">contents</a>
&nbsp;&nbsp;<a href="_reference.htm" target="_top">reference</a>
&nbsp;&nbsp;<a href="_index.htm" target="_top">index</a>
&nbsp;&nbsp;<a href="_search.htm" target="_top">search</a>
&nbsp;&nbsp;<a href="_external.htm" target="_top">external</a>
&nbsp;&nbsp;This:&nbsp;&nbsp;<a href="admacro.htm" target="_top">section</a>, <a href="admacro_frame1.htm" target="_top">frame</a></div>
<hr>




<center><b><big><big>Macros Used by CppAD Implementation</big></big></b></center>
<br>
<b><big><a name="CppADNull">CppADNull</a></big></b>
<br>
The preprocessor symbol <code><font color="blue">CppADNull</font></code> is used for a null pointer. 
If it is not yet defined,
it is defined when <code><font color="blue">CppAD/local/ADDefine.h</font></code> is included is included.

<br>
<br>
<b><big><a name="CppADStandardMathFun">CppADStandardMathFun</a></big></b>
<br>
The macro call
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppADStandardMathFun(</span></font></code><i><span style='white-space: nowrap'>Name</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>defines an inline function in the
current namespace that is a link to the corresponding
standard mathematical functions
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>Name</span></i><code><font color="blue"><span style='white-space: nowrap'>(float&nbsp;x)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>Name</span></i><code><font color="blue"><span style='white-space: nowrap'>(double&nbsp;x)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;complex&lt;float&gt;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>Name</span></i><code><font color="blue"><span style='white-space: nowrap'>(std::complex&lt;float&gt;&nbsp;x)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;complex&lt;double&gt;&nbsp;</span></font></code><i><span style='white-space: nowrap'>Name</span></i><code><font color="blue"><span style='white-space: nowrap'>(std::complex&lt;double&gt;&nbsp;x)<br>
</span></font></code>Note that you should not place a semi-colon directly after the use
of this macro.

<br>
<br>
<b><big><a name="CppADStandardMathBinaryFun">CppADStandardMathBinaryFun</a></big></b>
<br>
The macro call
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppADStandardMathBinaryFun(</span></font></code><i><span style='white-space: nowrap'>Name</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>defines an inline function in the
current namespace that is a link to the corresponding
standard mathematical functions
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>Name</span></i><code><font color="blue"><span style='white-space: nowrap'>(float&nbsp;x,&nbsp;float&nbsp;y)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>Name</span></i><code><font color="blue"><span style='white-space: nowrap'>(double&nbsp;x,&nbsp;double&nbsp;y)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;complex&lt;float&gt;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>Name</span></i><code><font color="blue"><span style='white-space: nowrap'>(std::complex&lt;float&gt;&nbsp;x,&nbsp;std::complex&lt;float&gt;&nbsp;y)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;complex&lt;double&gt;&nbsp;</span></font></code><i><span style='white-space: nowrap'>Name</span></i><code><font color="blue"><span style='white-space: nowrap'>(std::complex&lt;double&gt;&nbsp;x,&nbsp;std::complex&lt;double&gt;&nbsp;y)<br>
</span></font></code>Note that you should not place a semi-colon directly after the use
of this macro.

<br>
<br>
<b><big><a name="CppADFoldBinaryOperator">CppADFoldBinaryOperator</a></big></b>
<br>
The syntax
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppADFoldBinaryOperator(</span></font></code><i><span style='white-space: nowrap'>Type</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>Op</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>defines the operators
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>left</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font></code><i><span style='white-space: nowrap'>Op</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font></code><i><span style='white-space: nowrap'>right</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>which has the result type <i>Type</i> and the 
following argument types:
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>left</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>right</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-----------------&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-----------------<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VecADelem&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VecADelem&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VecADelem&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VecADelem&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VecADelem&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VecADelem&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VecADelem&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VecADelem&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int<br>
</span></font></code>In the case where the left operand has type <code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>,
it defines a member function.
All of the arguments are <code><font color="blue">const</font></code> and call by reference,
except for the <code><font color="blue">int</font></code> case which is call by value.
In all cases, it converts the operands to <code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code> and then
uses the definition of the same operation for that case. 
Hence it assumes a definition
for the case where both operands are <code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code> objects.



<hr>Input File: CppAD\local\ADDefine.h

</body>
</html>
